/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Play.ID API
 * Esports API for Play.ID
 * OpenAPI spec version: 1.0
 */
import type {
  AddParticipantsDto,
  AddUserBody,
  AgreementsControllerFindOneParams,
  AssignRefereeDto,
  AuthenticateCheckinDto,
  ChangeCardStatusDto,
  ChangeFileStatusDto,
  CheckAccountDto,
  CheckTeamNameDto,
  CheckinControllerFindMyCheckinParams,
  CreateAgreementDto,
  CreateBracketDto,
  CreateBrawlStarsCardDto,
  CreateBulkRosterDto,
  CreateCompetitionDto,
  CreateEFootballCardDto,
  CreateEternalReturnsCardDto,
  CreateFCOnlineCardDto,
  CreateKartCardDto,
  CreateKingOfFightersCardDto,
  CreateLolCardDto,
  CreateOWCardDto,
  CreatePokemonUniteCardDto,
  CreatePubgMobileCardDto,
  CreateQrDto,
  CreateRosterDto,
  CreateStageDto,
  CreateStreetFighterCardDto,
  CreateTeamDto,
  CreateValCardDto,
  DemoBody,
  DenyCheckinDto,
  FileUploadControllerDownloadFileByUserIdAndTagParams,
  FileUploadControllerGetMyFilesParams,
  FileUploadControllerUploadFileBody,
  FileUploadControllerUploadFileParams,
  GameControllerUploadFileBody,
  InitializeBracketStructureDto,
  LogoControllerUploadLogoBody,
  ManageMatchSetsDto,
  ModifyCompetitionDto,
  PlayersControllerGetMyRegistrationInfoParams,
  ProCheckinControllerPeakUserInfoByCodeParams,
  ProMatchRefereeControllerGetMyAssignmentsParams,
  ProPhotoControllerGetPlayerPhotoParams,
  QrControllerGetQrCodeByGameAndDateParams,
  RegisterPlayerDto,
  ReplaceRefereeDto,
  RosterControllerFindAllByQueryParams,
  RsoControllerCallbackParams,
  SaveSetParticipantStatsDto,
  SaveSetResultsDto,
  ScanQrDto,
  SendBatchNotiDto,
  SignInWithClerkTokenDto,
  StageControllerGetStagesParams,
  StartAuthDto,
  SubmitMatchDto,
  SubmitMatchNoteDto,
  TeamsControllerFindMyTeamParams,
  TeamsControllerRemovePlayerParams,
  TeamsControllerRemoveTeamParams,
  UpdateGameTypeDto,
  UpdateMatchSetScreenshotDto,
  UpdateNicknameDto,
  UpdateParentAgreementDto,
  UpdatePositionDto,
  UpdateRankAndTierDto,
  UpdateStageDto,
  UpdateStatusDto,
  UpdateUserDto,
  VerifyAuthDto,
  VersionControllerCheckVersionParams
} from './model'
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import {
  CompetitionCategoryType
} from './model'
import type {
  Agreements,
  AgreementsWithToken,
  AppVersion,
  BankAccount,
  BracketControllerCreateBracket200,
  BracketGroupControllerGetBracketGroupOverview200,
  BrawlStarsCard,
  BrawlStarsUser,
  CheckTeamNameResponse,
  Checkin,
  ChildCompetitionDto,
  Competition,
  CompetitionDto,
  CompetitionsControllerFindAllGroup200Item,
  CompetitionsControllerFindHostingCompetitions200,
  CompetitionsControllerModifyGameTypeDetail200,
  DynamicQrDto,
  EFootballCard,
  EternalReturnsCard,
  FCOnlineCard,
  FcOnlineUser,
  File,
  GameControllerFindMyGameCards200Item,
  GameControllerRefreshCard200,
  GameControllerRefreshCard201,
  GameControllerUpdateNickname200,
  GameControllerUpdateNickname201,
  GameControllerUpdateRankAndTier200,
  GameControllerUploadFile201,
  GameMetaDto,
  GameTypeDto,
  KartRiderCard,
  KingOfFightersCard,
  LolCard,
  LolUser,
  MatchControllerGetSetParticipantStats200,
  MatchControllerGetSetResults200,
  MatchControllerUploadSetResultScreenshot200,
  MyTeamResonse,
  OWCard,
  ParentCompetitionDto,
  PassInfo,
  Player,
  PlayersControllerChangeCardStatus200,
  PokemonUniteCard,
  ProCheckin,
  ProCompetition,
  ProHistoryDto,
  ProMatchReferee,
  PubgMobileCard,
  Qr,
  Referee,
  RefreshUserRoleResponseDto,
  Result,
  RosterControllerCreateRoster200,
  RosterControllerFindAllByQuery200AllOf,
  RosterControllerFindOne200,
  RsoControllerCallback200,
  SendPushDto,
  SignInWithPassResponseDto,
  StageControllerCreateStage200,
  StageControllerGetStage200,
  StageControllerGetStages200,
  StageControllerUpdateStage200,
  StreetFighterCard,
  Team,
  User,
  UserControllerAddUserWithName201,
  UserControllerRefreshRole201,
  UserControllerSignInWithClerk200,
  UserControllerSignInWithPass201,
  ValCard
} from './model'
import { customInstance } from '../lib/axios';



type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


  export const appControllerGetHello = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<string>(
      {url: `/healthcheck`, method: 'GET'
    },
      options);
    }
  
export const appControllerTestRole = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/test/role`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary get my team
 */
export const teamsControllerFindMyTeam = (
    params: TeamsControllerFindMyTeamParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<MyTeamResonse>(
      {url: `/teams/me`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary get team by teamCode
 */
export const teamsControllerFindOne = (
    teamCode: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<MyTeamResonse>(
      {url: `/teams/${teamCode}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary find all teams
 */
export const teamsControllerFindAll = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Team[]>(
      {url: `/teams`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary create a new team
 */
export const teamsControllerCreate = (
    createTeamDto: CreateTeamDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Team>(
      {url: `/teams`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createTeamDto
    },
      options);
    }
  
/**
 * @summary get players in team
 */
export const teamsControllerFindPlayers = (
    teamCode: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Player[]>(
      {url: `/teams/${teamCode}/players`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary add player to team
 */
export const teamsControllerAddPlayer = (
    teamCode: string,
    registerPlayerDto: RegisterPlayerDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Player>(
      {url: `/teams/${teamCode}/players`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: registerPlayerDto
    },
      options);
    }
  
/**
 * @summary check team name exist
 */
export const teamsControllerCheckTeamNameExist = (
    checkTeamNameDto: CheckTeamNameDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CheckTeamNameResponse | void>(
      {url: `/teams/teamName`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: checkTeamNameDto
    },
      options);
    }
  
/**
 * @summary confirm team
 */
export const teamsControllerConfirm = (
    teamCode: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Team>(
      {url: `/teams/${teamCode}/confirm`, method: 'POST'
    },
      options);
    }
  
/**
 * @summary update player position
 */
export const teamsControllerUpdatePosition = (
    teamCode: string,
    userId: string,
    updatePositionDto: UpdatePositionDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Player>(
      {url: `/teams/${teamCode}/${userId}/position`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updatePositionDto
    },
      options);
    }
  
/**
 * @summary remove player by userId
 */
export const teamsControllerRemovePlayer = (
    userId: string,
    params: TeamsControllerRemovePlayerParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/teams/${userId}`, method: 'DELETE',
        params
    },
      options);
    }
  
/**
 * @summary remove team
 */
export const teamsControllerRemoveTeam = (
    teamCode: string,
    params: TeamsControllerRemoveTeamParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/teams/entry/${teamCode}`, method: 'DELETE',
        params
    },
      options);
    }
  
/**
 * @summary update player status
 */
export const playersControllerUpdateStatus = (
    userId: string,
    updateStatusDto: UpdateStatusDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Player>(
      {url: `/players/${userId}/status`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateStatusDto
    },
      options);
    }
  
/**
 * @summary get my registration info
 */
export const playersControllerGetMyRegistrationInfo = (
    params: PlayersControllerGetMyRegistrationInfoParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Player>(
      {url: `/players/me`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary change game card status
 */
export const playersControllerChangeCardStatus = (
    userId: string,
    changeCardStatusDto: ChangeCardStatusDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PlayersControllerChangeCardStatus200>(
      {url: `/players/gameCards/${userId}/status`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: changeCardStatusDto
    },
      options);
    }
  
/**
 * @summary Complete solo player application
 */
export const playersControllerCompleteSoloApplication = (
    playerId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/players/${playerId}/complete`, method: 'PUT'
    },
      options);
    }
  
/**
 * @summary add solo player
 */
export const playersControllerAddPlayer = (
    registerPlayerDto: RegisterPlayerDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Player>(
      {url: `/players`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: registerPlayerDto
    },
      options);
    }
  
/**
 * @summary get my user info
 */
export const userControllerFindMe = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<User>(
      {url: `/user/me`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary get user info
 */
export const userControllerFindOne = (
    userId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<User>(
      {url: `/user/${userId}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary update user info
 */
export const userControllerUpdateUserInfo = (
    userId: string,
    updateUserDto: UpdateUserDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<User>(
      {url: `/user/${userId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateUserDto
    },
      options);
    }
  
/**
 * @summary [DEBUG]: remove user info
 */
export const userControllerRemoveUser = (
    userId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<User>(
      {url: `/user/${userId}`, method: 'DELETE'
    },
      options);
    }
  
/**
 * @summary create user info with pass
 */
export const userControllerGetDemoUser = (
    demoBody: DemoBody,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<SignInWithPassResponseDto | void>(
      {url: `/user/demo`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: demoBody
    },
      options);
    }
  
/**
 * @summary create user info with name and birthday
 */
export const userControllerAddUserWithName = (
    addUserBody: AddUserBody,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<SignInWithPassResponseDto | UserControllerAddUserWithName201>(
      {url: `/user/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: addUserBody
    },
      options);
    }
  
/**
 * @summary create user info with pass
 */
export const userControllerSignInWithPass = (
    uid: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<SignInWithPassResponseDto | UserControllerSignInWithPass201>(
      {url: `/user/pass/${uid}`, method: 'POST'
    },
      options);
    }
  
/**
 * @summary Refresh user roles and token
 */
export const userControllerRefreshRole = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<RefreshUserRoleResponseDto | UserControllerRefreshRole201>(
      {url: `/user/roles/refresh`, method: 'POST'
    },
      options);
    }
  
/**
 * Clerk Token Sign In
 */
export const userControllerSignInWithClerk = (
    signInWithClerkTokenDto: SignInWithClerkTokenDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UserControllerSignInWithClerk200 | void>(
      {url: `/user/clerk/sign-in`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: signInWithClerkTokenDto
    },
      options);
    }
  
/**
 * @summary get my team
 */
export const passControllerPass = (
    uid: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PassInfo>(
      {url: `/id/pass/${uid}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary send push notification
 */
export const pushControllerSendPush = (
    pushToken: string,
    sendPushDto: SendPushDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<SendPushDto>(
      {url: `/push/${pushToken}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: sendPushDto
    },
      options);
    }
  
export const fileUploadControllerUploadFile = (
    tag: string,
    fileUploadControllerUploadFileBody: FileUploadControllerUploadFileBody,
    params: FileUploadControllerUploadFileParams,
 options?: SecondParameter<typeof customInstance>,) => {const formData = new FormData();
if(fileUploadControllerUploadFileBody.file !== undefined) {
 formData.append('file', fileUploadControllerUploadFileBody.file)
 }

      return customInstance<File>(
      {url: `/files/upload/${tag}`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData,
        params
    },
      options);
    }
  
export const fileUploadControllerGetMyFiles = (
    params?: FileUploadControllerGetMyFilesParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<File[]>(
      {url: `/files/me`, method: 'GET',
        params
    },
      options);
    }
  
export const fileUploadControllerDownloadFile = (
    fileId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/files/${fileId}`, method: 'GET'
    },
      options);
    }
  
export const fileUploadControllerDownloadFileByUserIdAndTag = (
    userId: string,
    tag: string,
    params: FileUploadControllerDownloadFileByUserIdAndTagParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/files/${userId}/${tag}`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary update file status
 */
export const fileUploadControllerUpdateStatus = (
    userId: string,
    tag: string,
    changeFileStatusDto: ChangeFileStatusDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<File>(
      {url: `/files/status/${userId}/${tag}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: changeFileStatusDto
    },
      options);
    }
  
export const logoControllerUploadLogo = (
    logoControllerUploadLogoBody: LogoControllerUploadLogoBody,
 options?: SecondParameter<typeof customInstance>,) => {const formData = new FormData();
if(logoControllerUploadLogoBody.file !== undefined) {
 formData.append('file', logoControllerUploadLogoBody.file)
 }

      return customInstance<void>(
      {url: `/logo`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      options);
    }
  
export const logoControllerGetLogo = (
    fileId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/logo/${fileId}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary get aggrement by parent key
 */
export const agreementsControllerFindParentKey = (
    parentKey: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AgreementsWithToken>(
      {url: `/agreements/parents/${parentKey}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary update parent data by key
 */
export const agreementsControllerUpdateParentDataByKey = (
    parentKey: string,
    updateParentAgreementDto: UpdateParentAgreementDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Agreements>(
      {url: `/agreements/parents/${parentKey}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateParentAgreementDto
    },
      options);
    }
  
/**
 * @summary get agreement info
 */
export const agreementsControllerFindOne = (
    userId: string,
    params: AgreementsControllerFindOneParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Agreements>(
      {url: `/agreements/${userId}`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary update agreement info
 */
export const agreementsControllerUpdateAgreement = (
    userId: string,
    createAgreementDto: CreateAgreementDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Agreements>(
      {url: `/agreements/${userId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: createAgreementDto
    },
      options);
    }
  
/**
 * @summary create agreement info
 */
export const agreementsControllerCreate = (
    createAgreementDto: CreateAgreementDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Agreements>(
      {url: `/agreements`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createAgreementDto
    },
      options);
    }
  
/**
 * @summary get my game cards
 */
export const gameControllerFindMyGameCards = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GameControllerFindMyGameCards200Item[]>(
      {url: `/games/me`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary get LOL user info
 */
export const gameControllerFindLOLUser = (
    name: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<LolUser>(
      {url: `/games/lol/users/${name}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary get FC Online user info
 */
export const gameControllerFindFCOnlineUser = (
    name: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<FcOnlineUser>(
      {url: `/games/fconline/users/${name}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary get Brawl Stars user info
 */
export const gameControllerFindBrawlStarsUser = (
    tag: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<BrawlStarsUser>(
      {url: `/games/brawlstars/users/${tag}`, method: 'GET'
    },
      options);
    }
  
export const gameControllerGetUserInfo = (
    name: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/games/eternalreturn/users/${name}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Get all game meta information
 */
export const gameControllerFindAllGameMetas = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GameMetaDto[]>(
      {url: `/games/meta`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Get game meta information by game ID
 */
export const gameControllerFindGameMetaByGameId = (
    gameId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GameMetaDto>(
      {url: `/games/meta/${gameId}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary create Brawl Stars card
 */
export const gameControllerCreateBrawlStarsCard = (
    createBrawlStarsCardDto: CreateBrawlStarsCardDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<BrawlStarsCard>(
      {url: `/games/brawlstars/cards`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createBrawlStarsCardDto
    },
      options);
    }
  
/**
 * @summary create Brawl Stars card
 */
export const gameControllerCreateEternalReturnsCard = (
    createEternalReturnsCardDto: CreateEternalReturnsCardDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<BrawlStarsCard | EternalReturnsCard>(
      {url: `/games/eternalreturn/cards`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createEternalReturnsCardDto
    },
      options);
    }
  
/**
 * @summary create King of Fighters card
 */
export const gameControllerCreateKingOfFightersCard = (
    createKingOfFightersCardDto: CreateKingOfFightersCardDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<KingOfFightersCard>(
      {url: `/games/kingoffighters/cards`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createKingOfFightersCardDto
    },
      options);
    }
  
/**
 * @summary create eFootball card
 */
export const gameControllerCreateEFootballCard = (
    createEFootballCardDto: CreateEFootballCardDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<EFootballCard>(
      {url: `/games/efootball/cards`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createEFootballCardDto
    },
      options);
    }
  
/**
 * @summary create Pokemon Unite card
 */
export const gameControllerCreatePokemonUniteCard = (
    createPokemonUniteCardDto: CreatePokemonUniteCardDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PokemonUniteCard>(
      {url: `/games/pokemonunite/cards`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createPokemonUniteCardDto
    },
      options);
    }
  
/**
 * @summary create LOL card
 */
export const gameControllerCreateLolCard = (
    createLolCardDto: CreateLolCardDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<LolCard>(
      {url: `/games/lol/cards`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createLolCardDto
    },
      options);
    }
  
/**
 * @summary create FC Online card
 */
export const gameControllerCreateFCOnlineCard = (
    createFCOnlineCardDto: CreateFCOnlineCardDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<FCOnlineCard>(
      {url: `/games/fconline/cards`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createFCOnlineCardDto
    },
      options);
    }
  
/**
 * @summary create VAL card
 */
export const gameControllerCreateValCard = (
    createValCardDto: CreateValCardDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ValCard>(
      {url: `/games/val/cards`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createValCardDto
    },
      options);
    }
  
/**
 * @summary create OW2 card
 */
export const gameControllerCreateOWCard = (
    createOWCardDto: CreateOWCardDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<OWCard>(
      {url: `/games/overwatch/cards`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createOWCardDto
    },
      options);
    }
  
/**
 * @summary create PUBG Mobile card
 */
export const gameControllerCreatePubgMobileCard = (
    createPubgMobileCardDto: CreatePubgMobileCardDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PubgMobileCard>(
      {url: `/games/pubgmobile/cards`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createPubgMobileCardDto
    },
      options);
    }
  
/**
 * @summary create Street Fighter card
 */
export const gameControllerCreateStreetFighterCard = (
    createStreetFighterCardDto: CreateStreetFighterCardDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<StreetFighterCard>(
      {url: `/games/streetfighter/cards`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createStreetFighterCardDto
    },
      options);
    }
  
/**
 * @summary create KartRider card
 */
export const gameControllerCreateKartRiderCard = (
    createKartCardDto: CreateKartCardDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<KartRiderCard>(
      {url: `/games/kartrider/cards`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createKartCardDto
    },
      options);
    }
  
/**
 * @summary get OW2 card info
 */
export const gameControllerFindOWCard = (
    gameCardId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<OWCard>(
      {url: `/games/overwatch/cards/${gameCardId}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary get BrawlStars card info
 */
export const gameControllerFindBrawlStarsCard = (
    gameCardId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<BrawlStarsCard>(
      {url: `/games/brawlstars/cards/${gameCardId}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary get PUBG Mobile card info
 */
export const gameControllerFindPubgMobileCard = (
    gameCardId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PubgMobileCard>(
      {url: `/games/pubgmobile/cards/${gameCardId}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary get Street Fighter card info
 */
export const gameControllerFindStreetFighterCard = (
    gameCardId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<StreetFighterCard>(
      {url: `/games/streetfighter/cards/${gameCardId}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary get KartRider card info
 */
export const gameControllerFindKartRiderCard = (
    gameCardId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<KartRiderCard>(
      {url: `/games/kartrider/cards/${gameCardId}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary get Eternal Returns card info
 */
export const gameControllerFindEternalReturnsCard = (
    gameCardId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<EternalReturnsCard>(
      {url: `/games/eternalreturn/cards/${gameCardId}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary get VAL card info
 */
export const gameControllerFindValCard = (
    gameCardId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ValCard>(
      {url: `/games/val/cards/${gameCardId}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary get LoL card info
 */
export const gameControllerFindLolCard = (
    gameCardId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<LolCard>(
      {url: `/games/lol/cards/${gameCardId}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary get King of Fighters card info
 */
export const gameControllerFindKingOfFightersCard = (
    gameCardId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<KingOfFightersCard>(
      {url: `/games/kingoffighters/cards/${gameCardId}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary get eFootball card info
 */
export const gameControllerFindEFootballCard = (
    gameCardId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<EFootballCard>(
      {url: `/games/efootball/cards/${gameCardId}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary get Pokemon Unite card info
 */
export const gameControllerFindPokemonUniteCard = (
    gameCardId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PokemonUniteCard>(
      {url: `/games/pokemonunite/cards/${gameCardId}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary get FC Online card info
 */
export const gameControllerFindFCOnlineCard = (
    gameCardId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<FCOnlineCard>(
      {url: `/games/fconline/cards/${gameCardId}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Game card refresh
 */
export const gameControllerRefreshCard = (
    gameCardId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GameControllerRefreshCard200 | GameControllerRefreshCard201>(
      {url: `/games/refresh/${gameCardId}`, method: 'POST'
    },
      options);
    }
  
/**
 * @summary update nickname
 */
export const gameControllerUpdateNickname = (
    gameCardId: string,
    updateNicknameDto: UpdateNicknameDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GameControllerUpdateNickname200 | GameControllerUpdateNickname201>(
      {url: `/games/updateNickname/${gameCardId}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: updateNicknameDto
    },
      options);
    }
  
/**
 * @summary remove game card
 */
export const gameControllerRemoveGameCard = (
    gameCardId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<LolCard>(
      {url: `/games/cards/${gameCardId}`, method: 'DELETE'
    },
      options);
    }
  
export const gameControllerUploadFile = (
    gameCardId: string,
    gameControllerUploadFileBody: GameControllerUploadFileBody,
 options?: SecondParameter<typeof customInstance>,) => {const formData = new FormData();
if(gameControllerUploadFileBody.file !== undefined) {
 formData.append('file', gameControllerUploadFileBody.file)
 }

      return customInstance<GameControllerUploadFile201>(
      {url: `/games/screenshots/${gameCardId}`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      options);
    }
  
export const gameControllerDownloadFileByUserIdAndTag = (
    gameCardId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/games/screenshots/${gameCardId}`, method: 'GET'
    },
      options);
    }
  
export const gameControllerUpdateRankAndTier = (
    gameCardId: string,
    updateRankAndTierDto: UpdateRankAndTierDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GameControllerUpdateRankAndTier200>(
      {url: `/games/rankandtier/${gameCardId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateRankAndTierDto
    },
      options);
    }
  
/**
 * @summary get all competitions with game types
 */
export const competitionsControllerFindAll = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Competition[]>(
      {url: `/competitions`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary create a new competition
 */
export const competitionsControllerCreate = (
    createCompetitionDto: CreateCompetitionDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Competition>(
      {url: `/competitions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createCompetitionDto
    },
      options);
    }
  
/**
 * @summary get all competitions that the user is a host of
 */
export const competitionsControllerFindHostingCompetitions = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CompetitionsControllerFindHostingCompetitions200>(
      {url: `/competitions/my`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary get competition groups
 */
export const competitionsControllerFindAllGroup = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CompetitionsControllerFindAllGroup200Item[]>(
      {url: `/competitions/groups`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Get child competitions by parent ID
 */
export const competitionsControllerFindByParentId = (
    parentId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ChildCompetitionDto[]>(
      {url: `/competitions/groups/${parentId}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary get competition details with game types
 */
export const competitionsControllerFindOne = (
    competitionId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CompetitionDto>(
      {url: `/competitions/${competitionId}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary modify competition
 */
export const competitionsControllerModify = (
    competitionId: string,
    modifyCompetitionDto: ModifyCompetitionDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Competition>(
      {url: `/competitions/${competitionId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: modifyCompetitionDto
    },
      options);
    }
  
/**
 * @summary delete a competition
 */
export const competitionsControllerDelete = (
    competitionId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Competition>(
      {url: `/competitions/${competitionId}`, method: 'DELETE'
    },
      options);
    }
  
/**
 * @summary ÎåÄÌöåÏùò Í≤åÏûÑ Î™®Îìú Î™©Î°ù Ï°∞Ìöå
 */
export const competitionsControllerFindGameModes = (
    competitionId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GameTypeDto[]>(
      {url: `/competitions/${competitionId}/game-modes`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary modify game type
 */
export const competitionsControllerModifyGameTypeDetail = (
    gameTypeId: string,
    updateGameTypeDto: UpdateGameTypeDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CompetitionsControllerModifyGameTypeDetail200>(
      {url: `/competitions/game-types/${gameTypeId}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateGameTypeDto
    },
      options);
    }
  
export const stageControllerCreateStage = (
    createStageDto: CreateStageDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<StageControllerCreateStage200 | void>(
      {url: `/stages`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createStageDto
    },
      options);
    }
  
export const stageControllerGetStages = (
    params?: StageControllerGetStagesParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<StageControllerGetStages200>(
      {url: `/stages`, method: 'GET',
        params
    },
      options);
    }
  
export const stageControllerGetStage = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<StageControllerGetStage200>(
      {url: `/stages/${id}`, method: 'GET'
    },
      options);
    }
  
export const stageControllerUpdateStage = (
    id: number,
    updateStageDto: UpdateStageDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<StageControllerUpdateStage200>(
      {url: `/stages/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateStageDto
    },
      options);
    }
  
export const stageControllerDeleteStage = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/stages/${id}`, method: 'DELETE'
    },
      options);
    }
  
/**
 * @summary get my team
 */
export const batchNotiControllerSendBatchNoti = (
    sendBatchNotiDto: SendBatchNotiDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Result>(
      {url: `/batchNoti`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: sendBatchNotiDto
    },
      options);
    }
  
/**
 * @summary get my bank accounts
 */
export const bankAccountsControllerFindMyBankAccounts = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<BankAccount[]>(
      {url: `/bankaccounts/me`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary create bank account
 */
export const bankAccountsControllerStartAuth = (
    startAuthDto: StartAuthDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<BankAccount>(
      {url: `/bankaccounts/startAuth`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: startAuthDto
    },
      options);
    }
  
/**
 * @summary verify bank account
 */
export const bankAccountsControllerVerify = (
    verifyAuthDto: VerifyAuthDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<BankAccount>(
      {url: `/bankaccounts/verify`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: verifyAuthDto
    },
      options);
    }
  
/**
 * @summary check my bank account name
 */
export const bankAccountsControllerCheckAccountName = (
    checkAccountDto: CheckAccountDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<BankAccount | void>(
      {url: `/bankaccounts/validateAccount`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: checkAccountDto
    },
      options);
    }
  
/**
 * @summary Get my check-in information
 */
export const checkinControllerFindMyCheckin = (
    params: CheckinControllerFindMyCheckinParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Checkin>(
      {url: `/checkin/me`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Check-in with QR code scan
 */
export const checkinControllerScanQrAndCheckIn = (
    scanQrDto: ScanQrDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Checkin>(
      {url: `/checkin`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: scanQrDto
    },
      options);
    }
  
/**
 * @summary Create or get QR code by date and game type
 */
export const qrControllerGetOrCreateQrCode = (
    createQrDto: CreateQrDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Qr>(
      {url: `/qr`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createQrDto
    },
      options);
    }
  
/**
 * @summary Get QR codes (filter by game type, date, and/or competition ID)
 */
export const qrControllerGetQrCodeByGameAndDate = (
    params?: QrControllerGetQrCodeByGameAndDateParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Qr[]>(
      {url: `/qr`, method: 'GET',
        params
    },
      options);
    }
  
export const rsoControllerCallback = (
    params: RsoControllerCallbackParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<RsoControllerCallback200>(
      {url: `/rso/callback`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary get my checkin info
 */
export const proCheckinControllerFindMyCheckin = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/pro/checkins/me`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary get checkin result by code
 */
export const proCheckinControllerFindByCode = (
    code: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/pro/checkins/results/${code}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary create code for QR Code
 */
export const proCheckinControllerGenerateCode = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DynamicQrDto>(
      {url: `/pro/checkins`, method: 'POST'
    },
      options);
    }
  
/**
 * @summary get checkin result by code
 */
export const proCheckinControllerPeakUserInfoByCode = (
    code: string,
    params: ProCheckinControllerPeakUserInfoByCodeParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/pro/checkins/peak/${code}`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary authenticate code for QR Code
 */
export const proCheckinControllerAuthenticateCode = (
    authenticateCheckinDto: AuthenticateCheckinDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void | ProCheckin>(
      {url: `/pro/checkins/approve`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: authenticateCheckinDto
    },
      options);
    }
  
/**
 * @summary deny checkin with code
 */
export const proCheckinControllerDenyCheckin = (
    denyCheckinDto: DenyCheckinDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void | ProCheckin>(
      {url: `/pro/checkins/deny`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: denyCheckinDto
    },
      options);
    }
  
/**
 * @summary get my card profile info
 */
export const proProfileControllerGetMyProfile = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/pro/profiles/me`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary get all matches
 */
export const proMatchControllerFindAll = (
    competitionId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/pro/competitions/${competitionId}/matches`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary get a match
 */
export const proMatchControllerFindOne = (
    competitionId: string,
    matchId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/pro/competitions/${competitionId}/matches/${matchId}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary get match sets
 */
export const proMatchControllerGetMatchSets = (
    competitionId: string,
    matchId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/pro/competitions/${competitionId}/matches/${matchId}/sets`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Îß§Ïπò ÏÑ∏Ìä∏ Í¥ÄÎ¶¨ (ÏÉùÏÑ±, ÏàòÏ†ï, ÏÇ≠Ï†ú)
 */
export const proMatchControllerManageMatchSets = (
    competitionId: string,
    matchId: string,
    manageMatchSetsDto: ManageMatchSetsDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/pro/competitions/${competitionId}/matches/${matchId}/sets`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: manageMatchSetsDto
    },
      options);
    }
  
/**
 * @summary Submit match with teams and note (main referee only)
 */
export const proMatchControllerSubmitMatch = (
    competitionId: string,
    matchId: string,
    submitMatchDto: SubmitMatchDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/pro/competitions/${competitionId}/matches/${matchId}/submit`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: submitMatchDto
    },
      options);
    }
  
/**
 * @summary get all competitions
 */
export const proCompetitionControllerFindAll = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ProCompetition[]>(
      {url: `/pro/competitions`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary get player's photo by type
 */
export const proPhotoControllerGetPlayerPhoto = (
    userId: string,
    params: ProPhotoControllerGetPlayerPhotoParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/pro/photo/players/${userId}`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary get user's photo by type
 */
export const proPhotoControllerGetMyPhoto = (
    type: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/pro/photo/${type}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary get player's history
 */
export const proHistoryControllerGetHistories = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ProHistoryDto>(
      {url: `/pro/history`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary get player's history by proPlayerId
 */
export const proHistoryControllerGetHistoriesByProPlayerId = (
    proPlayerId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ProHistoryDto>(
      {url: `/pro/history/${proPlayerId}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Get all games in a series
 */
export const proMatchGameControllerGetGames = (
    matchId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/pro/matches/${matchId}/games`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Delete a game result
 */
export const proMatchGameControllerDeleteGame = (
    matchId: string,
    gameSet: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/pro/matches/${matchId}/games/${gameSet}`, method: 'DELETE'
    },
      options);
    }
  
/**
 * @summary get match sets
 */
export const proMatchSetsControllerGetMatchSets = (
    matchId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/pro/matches/${matchId}/sets`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Manage match sets (create, update, delete)
 */
export const proMatchSetsControllerManageMatchSets = (
    matchId: string,
    manageMatchSetsDto: ManageMatchSetsDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/pro/matches/${matchId}/sets`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: manageMatchSetsDto
    },
      options);
    }
  
/**
 * @summary Get specific match set
 */
export const proMatchSetsControllerGetMatchSet = (
    matchId: string,
    setNumber: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/pro/matches/${matchId}/sets/${setNumber}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Update set screenshot information
 */
export const proMatchSetsControllerUpdateSetScreenshot = (
    matchId: string,
    setNumber: number,
    updateMatchSetScreenshotDto: UpdateMatchSetScreenshotDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/pro/matches/${matchId}/sets/${setNumber}/screenshot`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateMatchSetScreenshotDto
    },
      options);
    }
  
/**
 * @summary Delete set screenshot information
 */
export const proMatchSetsControllerDeleteSetScreenshot = (
    matchId: string,
    setNumber: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/pro/matches/${matchId}/sets/${setNumber}/screenshot`, method: 'DELETE'
    },
      options);
    }
  
/**
 * @summary Assign a specific referee to a match by admin
 */
export const proMatchRefereeControllerAssignReferee = (
    assignRefereeDto: AssignRefereeDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ProMatchReferee>(
      {url: `/pro/match-referees/assign-referee`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: assignRefereeDto
    },
      options);
    }
  
/**
 * @summary Replace a referee (using matchId and refereeId)
 */
export const proMatchRefereeControllerReplaceRefereeByIds = (
    replaceRefereeDto: ReplaceRefereeDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ProMatchReferee>(
      {url: `/pro/match-referees/replace-referee`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: replaceRefereeDto
    },
      options);
    }
  
/**
 * @summary Submit match processing (using matchId and refereeId)
 */
export const proMatchRefereeControllerSubmitMatchByIds = (
    submitMatchDto: SubmitMatchDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ProMatchReferee>(
      {url: `/pro/match-referees/submit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: submitMatchDto
    },
      options);
    }
  
/**
 * @summary Submit referee match notes (using JWT token for referee identification)
 */
export const proMatchRefereeControllerSubmitMatchNoteByIds = (
    submitMatchNoteDto: SubmitMatchNoteDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ProMatchReferee>(
      {url: `/pro/match-referees/note`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: submitMatchNoteDto
    },
      options);
    }
  
/**
 * @summary Get referee match assignments - supports optional matchId
 */
export const proMatchRefereeControllerGetMyAssignments = (
    params: ProMatchRefereeControllerGetMyAssignmentsParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ProMatchReferee[]>(
      {url: `/pro/match-referees/my-assignments`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Remove referee from match
 */
export const proMatchRefereeControllerRemoveReferee = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/pro/match-referees/remove-referee/${id}`, method: 'DELETE'
    },
      options);
    }
  
export const versionControllerCheckVersion = (
    params: VersionControllerCheckVersionParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/version/check`, method: 'GET',
        params
    },
      options);
    }
  
export const versionControllerUpdateVersionInfo = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AppVersion>(
      {url: `/version`, method: 'PUT'
    },
      options);
    }
  
/**
 * ÎåÄÏßÑÌëú ÏÉùÏÑ± Î∞è Í∑∏Î£π ÏÉùÏÑ±
 */
export const bracketControllerCreateBracket = (
    createBracketDto: CreateBracketDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<BracketControllerCreateBracket200 | void>(
      {url: `/brackets`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createBracketDto
    },
      options);
    }
  
/**
 * ÎåÄÏßÑÌëú Ï†ÑÏ≤¥ Íµ¨Ï°∞ Ï¥àÍ∏∞Ìôî (Ï†ÑÏ≤¥ Íµ¨Ï°∞ ‚àã Ìè¨Îß∑ ÏÑ§Ï†ï, ÎùºÏö¥Îìú, Îß§Ïπò Îì±)
 */
export const bracketControllerInitializeBracketStructure = (
    bracketId: number,
    initializeBracketStructureDto: InitializeBracketStructureDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/brackets/${bracketId}/structure`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: initializeBracketStructureDto
    },
      options);
    }
  
/**
 * ÎåÄÏßÑÌëú ÏÇ≠Ï†ú
 */
export const bracketControllerDeleteBracket = (
    bracketId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/brackets/${bracketId}`, method: 'DELETE'
    },
      options);
    }
  
/**
 * ÎåÄÏßÑÌëú Í∑∏Î£πÏùò Ï†ÑÏ≤¥ Íµ¨Ï°∞ Ï°∞Ìöå
 */
export const bracketGroupControllerGetBracketGroupOverview = (
    bracketGroupId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<BracketGroupControllerGetBracketGroupOverview200>(
      {url: `/bracket-groups/${bracketGroupId}/overview`, method: 'GET'
    },
      options);
    }
  
/**
 * ÎåÄÏßÑÌëú Í∑∏Î£πÏóê Î°úÏä§ÌÑ∞ Ï∂îÍ∞Ä
 */
export const bracketGroupControllerAddParticipants = (
    bracketGroupId: number,
    addParticipantsDto: AddParticipantsDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/bracket-groups/${bracketGroupId}/participants`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: addParticipantsDto
    },
      options);
    }
  
/**
 * Îß§ÏπòÏùò ÏÑ∏Ìä∏ Í≤ΩÍ∏∞ Í≤∞Í≥ºÎì§ Ï°∞Ìöå
 */
export const matchControllerGetSetResults = (
    matchId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<MatchControllerGetSetResults200>(
      {url: `/matches/${matchId}/set-results`, method: 'GET'
    },
      options);
    }
  
/**
 * Îß§ÏπòÏùò ÏÑ∏Ìä∏ Í≤ΩÍ∏∞ Í≤∞Í≥ºÎì§ Ï†ÄÏû•
 */
export const matchControllerSaveSetResults = (
    matchId: number,
    saveSetResultsDto: SaveSetResultsDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/matches/${matchId}/set-results`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: saveSetResultsDto
    },
      options);
    }
  
/**
 * Îß§ÏπòÏùò ÏÑ∏Ìä∏Î≥Ñ Ï∞∏Ïó¨ÏûêÎì§Ïùò ÏÉÅÏÑ∏ Í≤∞Í≥º(stat) Ï°∞Ìöå
 */
export const matchControllerGetSetParticipantStats = (
    matchId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<MatchControllerGetSetParticipantStats200>(
      {url: `/matches/${matchId}/set-participant-stats`, method: 'GET'
    },
      options);
    }
  
/**
 * Îß§ÏπòÏùò ÏÑ∏Ìä∏Î≥Ñ Ï∞∏Ïó¨ÏûêÎì§Ïùò ÏÉÅÏÑ∏ Í≤∞Í≥º Ï†ÄÏû•
 */
export const matchControllerSaveSetParticipantStats = (
    matchId: number,
    saveSetParticipantStatsDto: SaveSetParticipantStatsDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/matches/${matchId}/set-participant-stats`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: saveSetParticipantStatsDto
    },
      options);
    }
  
/**
 * Îß§ÏπòÏùò ÏÑ∏Ìä∏ Í≤ΩÍ∏∞ Í≤∞Í≥ºÏóê Í¥ÄÌïú Ïä§ÌÅ¨Î¶∞ÏÉ∑ ÌååÏùº ÏóÖÎ°úÎìú
 */
export const matchControllerUploadSetResultScreenshot = (
    matchId: number,
    setResultId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<MatchControllerUploadSetResultScreenshot200 | void>(
      {url: `/matches/${matchId}/set-results/${setResultId}/screenshots`, method: 'POST'
    },
      options);
    }
  
/**
 * Create a new roster
 */
export const rosterControllerCreateRoster = (
    createRosterDto: CreateRosterDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<RosterControllerCreateRoster200 | void>(
      {url: `/roster`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createRosterDto
    },
      options);
    }
  
/**
 * Find all rosters by query
 */
export const rosterControllerFindAllByQuery = (
    params: RosterControllerFindAllByQueryParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<RosterControllerFindAllByQuery200AllOf>(
      {url: `/roster`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * Create a new roster
 */
export const rosterControllerCreateBulkRoster = (
    createBulkRosterDto: CreateBulkRosterDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/roster/bulk`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createBulkRosterDto
    },
      options);
    }
  
/**
 * Find one roster by id
 */
export const rosterControllerFindOne = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<RosterControllerFindOne200>(
      {url: `/roster/${id}`, method: 'GET'
    },
      options);
    }
  
/**
 * Remove a roster by id
 */
export const rosterControllerSoftRemove = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/roster/${id}`, method: 'DELETE'
    },
      options);
    }
  
/**
 * @summary Î™®Îì† Ïã¨Ìåê Ï°∞Ìöå
 */
export const refereeControllerFindAll = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Referee[]>(
      {url: `/referee`, method: 'GET'
    },
      options);
    }
  
export type AppControllerGetHelloResult = NonNullable<Awaited<ReturnType<typeof appControllerGetHello>>>
export type AppControllerTestRoleResult = NonNullable<Awaited<ReturnType<typeof appControllerTestRole>>>
export type TeamsControllerFindMyTeamResult = NonNullable<Awaited<ReturnType<typeof teamsControllerFindMyTeam>>>
export type TeamsControllerFindOneResult = NonNullable<Awaited<ReturnType<typeof teamsControllerFindOne>>>
export type TeamsControllerFindAllResult = NonNullable<Awaited<ReturnType<typeof teamsControllerFindAll>>>
export type TeamsControllerCreateResult = NonNullable<Awaited<ReturnType<typeof teamsControllerCreate>>>
export type TeamsControllerFindPlayersResult = NonNullable<Awaited<ReturnType<typeof teamsControllerFindPlayers>>>
export type TeamsControllerAddPlayerResult = NonNullable<Awaited<ReturnType<typeof teamsControllerAddPlayer>>>
export type TeamsControllerCheckTeamNameExistResult = NonNullable<Awaited<ReturnType<typeof teamsControllerCheckTeamNameExist>>>
export type TeamsControllerConfirmResult = NonNullable<Awaited<ReturnType<typeof teamsControllerConfirm>>>
export type TeamsControllerUpdatePositionResult = NonNullable<Awaited<ReturnType<typeof teamsControllerUpdatePosition>>>
export type TeamsControllerRemovePlayerResult = NonNullable<Awaited<ReturnType<typeof teamsControllerRemovePlayer>>>
export type TeamsControllerRemoveTeamResult = NonNullable<Awaited<ReturnType<typeof teamsControllerRemoveTeam>>>
export type PlayersControllerUpdateStatusResult = NonNullable<Awaited<ReturnType<typeof playersControllerUpdateStatus>>>
export type PlayersControllerGetMyRegistrationInfoResult = NonNullable<Awaited<ReturnType<typeof playersControllerGetMyRegistrationInfo>>>
export type PlayersControllerChangeCardStatusResult = NonNullable<Awaited<ReturnType<typeof playersControllerChangeCardStatus>>>
export type PlayersControllerCompleteSoloApplicationResult = NonNullable<Awaited<ReturnType<typeof playersControllerCompleteSoloApplication>>>
export type PlayersControllerAddPlayerResult = NonNullable<Awaited<ReturnType<typeof playersControllerAddPlayer>>>
export type UserControllerFindMeResult = NonNullable<Awaited<ReturnType<typeof userControllerFindMe>>>
export type UserControllerFindOneResult = NonNullable<Awaited<ReturnType<typeof userControllerFindOne>>>
export type UserControllerUpdateUserInfoResult = NonNullable<Awaited<ReturnType<typeof userControllerUpdateUserInfo>>>
export type UserControllerRemoveUserResult = NonNullable<Awaited<ReturnType<typeof userControllerRemoveUser>>>
export type UserControllerGetDemoUserResult = NonNullable<Awaited<ReturnType<typeof userControllerGetDemoUser>>>
export type UserControllerAddUserWithNameResult = NonNullable<Awaited<ReturnType<typeof userControllerAddUserWithName>>>
export type UserControllerSignInWithPassResult = NonNullable<Awaited<ReturnType<typeof userControllerSignInWithPass>>>
export type UserControllerRefreshRoleResult = NonNullable<Awaited<ReturnType<typeof userControllerRefreshRole>>>
export type UserControllerSignInWithClerkResult = NonNullable<Awaited<ReturnType<typeof userControllerSignInWithClerk>>>
export type PassControllerPassResult = NonNullable<Awaited<ReturnType<typeof passControllerPass>>>
export type PushControllerSendPushResult = NonNullable<Awaited<ReturnType<typeof pushControllerSendPush>>>
export type FileUploadControllerUploadFileResult = NonNullable<Awaited<ReturnType<typeof fileUploadControllerUploadFile>>>
export type FileUploadControllerGetMyFilesResult = NonNullable<Awaited<ReturnType<typeof fileUploadControllerGetMyFiles>>>
export type FileUploadControllerDownloadFileResult = NonNullable<Awaited<ReturnType<typeof fileUploadControllerDownloadFile>>>
export type FileUploadControllerDownloadFileByUserIdAndTagResult = NonNullable<Awaited<ReturnType<typeof fileUploadControllerDownloadFileByUserIdAndTag>>>
export type FileUploadControllerUpdateStatusResult = NonNullable<Awaited<ReturnType<typeof fileUploadControllerUpdateStatus>>>
export type LogoControllerUploadLogoResult = NonNullable<Awaited<ReturnType<typeof logoControllerUploadLogo>>>
export type LogoControllerGetLogoResult = NonNullable<Awaited<ReturnType<typeof logoControllerGetLogo>>>
export type AgreementsControllerFindParentKeyResult = NonNullable<Awaited<ReturnType<typeof agreementsControllerFindParentKey>>>
export type AgreementsControllerUpdateParentDataByKeyResult = NonNullable<Awaited<ReturnType<typeof agreementsControllerUpdateParentDataByKey>>>
export type AgreementsControllerFindOneResult = NonNullable<Awaited<ReturnType<typeof agreementsControllerFindOne>>>
export type AgreementsControllerUpdateAgreementResult = NonNullable<Awaited<ReturnType<typeof agreementsControllerUpdateAgreement>>>
export type AgreementsControllerCreateResult = NonNullable<Awaited<ReturnType<typeof agreementsControllerCreate>>>
export type GameControllerFindMyGameCardsResult = NonNullable<Awaited<ReturnType<typeof gameControllerFindMyGameCards>>>
export type GameControllerFindLOLUserResult = NonNullable<Awaited<ReturnType<typeof gameControllerFindLOLUser>>>
export type GameControllerFindFCOnlineUserResult = NonNullable<Awaited<ReturnType<typeof gameControllerFindFCOnlineUser>>>
export type GameControllerFindBrawlStarsUserResult = NonNullable<Awaited<ReturnType<typeof gameControllerFindBrawlStarsUser>>>
export type GameControllerGetUserInfoResult = NonNullable<Awaited<ReturnType<typeof gameControllerGetUserInfo>>>
export type GameControllerFindAllGameMetasResult = NonNullable<Awaited<ReturnType<typeof gameControllerFindAllGameMetas>>>
export type GameControllerFindGameMetaByGameIdResult = NonNullable<Awaited<ReturnType<typeof gameControllerFindGameMetaByGameId>>>
export type GameControllerCreateBrawlStarsCardResult = NonNullable<Awaited<ReturnType<typeof gameControllerCreateBrawlStarsCard>>>
export type GameControllerCreateEternalReturnsCardResult = NonNullable<Awaited<ReturnType<typeof gameControllerCreateEternalReturnsCard>>>
export type GameControllerCreateKingOfFightersCardResult = NonNullable<Awaited<ReturnType<typeof gameControllerCreateKingOfFightersCard>>>
export type GameControllerCreateEFootballCardResult = NonNullable<Awaited<ReturnType<typeof gameControllerCreateEFootballCard>>>
export type GameControllerCreatePokemonUniteCardResult = NonNullable<Awaited<ReturnType<typeof gameControllerCreatePokemonUniteCard>>>
export type GameControllerCreateLolCardResult = NonNullable<Awaited<ReturnType<typeof gameControllerCreateLolCard>>>
export type GameControllerCreateFCOnlineCardResult = NonNullable<Awaited<ReturnType<typeof gameControllerCreateFCOnlineCard>>>
export type GameControllerCreateValCardResult = NonNullable<Awaited<ReturnType<typeof gameControllerCreateValCard>>>
export type GameControllerCreateOWCardResult = NonNullable<Awaited<ReturnType<typeof gameControllerCreateOWCard>>>
export type GameControllerCreatePubgMobileCardResult = NonNullable<Awaited<ReturnType<typeof gameControllerCreatePubgMobileCard>>>
export type GameControllerCreateStreetFighterCardResult = NonNullable<Awaited<ReturnType<typeof gameControllerCreateStreetFighterCard>>>
export type GameControllerCreateKartRiderCardResult = NonNullable<Awaited<ReturnType<typeof gameControllerCreateKartRiderCard>>>
export type GameControllerFindOWCardResult = NonNullable<Awaited<ReturnType<typeof gameControllerFindOWCard>>>
export type GameControllerFindBrawlStarsCardResult = NonNullable<Awaited<ReturnType<typeof gameControllerFindBrawlStarsCard>>>
export type GameControllerFindPubgMobileCardResult = NonNullable<Awaited<ReturnType<typeof gameControllerFindPubgMobileCard>>>
export type GameControllerFindStreetFighterCardResult = NonNullable<Awaited<ReturnType<typeof gameControllerFindStreetFighterCard>>>
export type GameControllerFindKartRiderCardResult = NonNullable<Awaited<ReturnType<typeof gameControllerFindKartRiderCard>>>
export type GameControllerFindEternalReturnsCardResult = NonNullable<Awaited<ReturnType<typeof gameControllerFindEternalReturnsCard>>>
export type GameControllerFindValCardResult = NonNullable<Awaited<ReturnType<typeof gameControllerFindValCard>>>
export type GameControllerFindLolCardResult = NonNullable<Awaited<ReturnType<typeof gameControllerFindLolCard>>>
export type GameControllerFindKingOfFightersCardResult = NonNullable<Awaited<ReturnType<typeof gameControllerFindKingOfFightersCard>>>
export type GameControllerFindEFootballCardResult = NonNullable<Awaited<ReturnType<typeof gameControllerFindEFootballCard>>>
export type GameControllerFindPokemonUniteCardResult = NonNullable<Awaited<ReturnType<typeof gameControllerFindPokemonUniteCard>>>
export type GameControllerFindFCOnlineCardResult = NonNullable<Awaited<ReturnType<typeof gameControllerFindFCOnlineCard>>>
export type GameControllerRefreshCardResult = NonNullable<Awaited<ReturnType<typeof gameControllerRefreshCard>>>
export type GameControllerUpdateNicknameResult = NonNullable<Awaited<ReturnType<typeof gameControllerUpdateNickname>>>
export type GameControllerRemoveGameCardResult = NonNullable<Awaited<ReturnType<typeof gameControllerRemoveGameCard>>>
export type GameControllerUploadFileResult = NonNullable<Awaited<ReturnType<typeof gameControllerUploadFile>>>
export type GameControllerDownloadFileByUserIdAndTagResult = NonNullable<Awaited<ReturnType<typeof gameControllerDownloadFileByUserIdAndTag>>>
export type GameControllerUpdateRankAndTierResult = NonNullable<Awaited<ReturnType<typeof gameControllerUpdateRankAndTier>>>
export type CompetitionsControllerFindAllResult = NonNullable<Awaited<ReturnType<typeof competitionsControllerFindAll>>>
export type CompetitionsControllerCreateResult = NonNullable<Awaited<ReturnType<typeof competitionsControllerCreate>>>
export type CompetitionsControllerFindHostingCompetitionsResult = NonNullable<Awaited<ReturnType<typeof competitionsControllerFindHostingCompetitions>>>
export type CompetitionsControllerFindAllGroupResult = NonNullable<Awaited<ReturnType<typeof competitionsControllerFindAllGroup>>>
export type CompetitionsControllerFindByParentIdResult = NonNullable<Awaited<ReturnType<typeof competitionsControllerFindByParentId>>>
export type CompetitionsControllerFindOneResult = NonNullable<Awaited<ReturnType<typeof competitionsControllerFindOne>>>
export type CompetitionsControllerModifyResult = NonNullable<Awaited<ReturnType<typeof competitionsControllerModify>>>
export type CompetitionsControllerDeleteResult = NonNullable<Awaited<ReturnType<typeof competitionsControllerDelete>>>
export type CompetitionsControllerFindGameModesResult = NonNullable<Awaited<ReturnType<typeof competitionsControllerFindGameModes>>>
export type CompetitionsControllerModifyGameTypeDetailResult = NonNullable<Awaited<ReturnType<typeof competitionsControllerModifyGameTypeDetail>>>
export type StageControllerCreateStageResult = NonNullable<Awaited<ReturnType<typeof stageControllerCreateStage>>>
export type StageControllerGetStagesResult = NonNullable<Awaited<ReturnType<typeof stageControllerGetStages>>>
export type StageControllerGetStageResult = NonNullable<Awaited<ReturnType<typeof stageControllerGetStage>>>
export type StageControllerUpdateStageResult = NonNullable<Awaited<ReturnType<typeof stageControllerUpdateStage>>>
export type StageControllerDeleteStageResult = NonNullable<Awaited<ReturnType<typeof stageControllerDeleteStage>>>
export type BatchNotiControllerSendBatchNotiResult = NonNullable<Awaited<ReturnType<typeof batchNotiControllerSendBatchNoti>>>
export type BankAccountsControllerFindMyBankAccountsResult = NonNullable<Awaited<ReturnType<typeof bankAccountsControllerFindMyBankAccounts>>>
export type BankAccountsControllerStartAuthResult = NonNullable<Awaited<ReturnType<typeof bankAccountsControllerStartAuth>>>
export type BankAccountsControllerVerifyResult = NonNullable<Awaited<ReturnType<typeof bankAccountsControllerVerify>>>
export type BankAccountsControllerCheckAccountNameResult = NonNullable<Awaited<ReturnType<typeof bankAccountsControllerCheckAccountName>>>
export type CheckinControllerFindMyCheckinResult = NonNullable<Awaited<ReturnType<typeof checkinControllerFindMyCheckin>>>
export type CheckinControllerScanQrAndCheckInResult = NonNullable<Awaited<ReturnType<typeof checkinControllerScanQrAndCheckIn>>>
export type QrControllerGetOrCreateQrCodeResult = NonNullable<Awaited<ReturnType<typeof qrControllerGetOrCreateQrCode>>>
export type QrControllerGetQrCodeByGameAndDateResult = NonNullable<Awaited<ReturnType<typeof qrControllerGetQrCodeByGameAndDate>>>
export type RsoControllerCallbackResult = NonNullable<Awaited<ReturnType<typeof rsoControllerCallback>>>
export type ProCheckinControllerFindMyCheckinResult = NonNullable<Awaited<ReturnType<typeof proCheckinControllerFindMyCheckin>>>
export type ProCheckinControllerFindByCodeResult = NonNullable<Awaited<ReturnType<typeof proCheckinControllerFindByCode>>>
export type ProCheckinControllerGenerateCodeResult = NonNullable<Awaited<ReturnType<typeof proCheckinControllerGenerateCode>>>
export type ProCheckinControllerPeakUserInfoByCodeResult = NonNullable<Awaited<ReturnType<typeof proCheckinControllerPeakUserInfoByCode>>>
export type ProCheckinControllerAuthenticateCodeResult = NonNullable<Awaited<ReturnType<typeof proCheckinControllerAuthenticateCode>>>
export type ProCheckinControllerDenyCheckinResult = NonNullable<Awaited<ReturnType<typeof proCheckinControllerDenyCheckin>>>
export type ProProfileControllerGetMyProfileResult = NonNullable<Awaited<ReturnType<typeof proProfileControllerGetMyProfile>>>
export type ProMatchControllerFindAllResult = NonNullable<Awaited<ReturnType<typeof proMatchControllerFindAll>>>
export type ProMatchControllerFindOneResult = NonNullable<Awaited<ReturnType<typeof proMatchControllerFindOne>>>
export type ProMatchControllerGetMatchSetsResult = NonNullable<Awaited<ReturnType<typeof proMatchControllerGetMatchSets>>>
export type ProMatchControllerManageMatchSetsResult = NonNullable<Awaited<ReturnType<typeof proMatchControllerManageMatchSets>>>
export type ProMatchControllerSubmitMatchResult = NonNullable<Awaited<ReturnType<typeof proMatchControllerSubmitMatch>>>
export type ProCompetitionControllerFindAllResult = NonNullable<Awaited<ReturnType<typeof proCompetitionControllerFindAll>>>
export type ProPhotoControllerGetPlayerPhotoResult = NonNullable<Awaited<ReturnType<typeof proPhotoControllerGetPlayerPhoto>>>
export type ProPhotoControllerGetMyPhotoResult = NonNullable<Awaited<ReturnType<typeof proPhotoControllerGetMyPhoto>>>
export type ProHistoryControllerGetHistoriesResult = NonNullable<Awaited<ReturnType<typeof proHistoryControllerGetHistories>>>
export type ProHistoryControllerGetHistoriesByProPlayerIdResult = NonNullable<Awaited<ReturnType<typeof proHistoryControllerGetHistoriesByProPlayerId>>>
export type ProMatchGameControllerGetGamesResult = NonNullable<Awaited<ReturnType<typeof proMatchGameControllerGetGames>>>
export type ProMatchGameControllerDeleteGameResult = NonNullable<Awaited<ReturnType<typeof proMatchGameControllerDeleteGame>>>
export type ProMatchSetsControllerGetMatchSetsResult = NonNullable<Awaited<ReturnType<typeof proMatchSetsControllerGetMatchSets>>>
export type ProMatchSetsControllerManageMatchSetsResult = NonNullable<Awaited<ReturnType<typeof proMatchSetsControllerManageMatchSets>>>
export type ProMatchSetsControllerGetMatchSetResult = NonNullable<Awaited<ReturnType<typeof proMatchSetsControllerGetMatchSet>>>
export type ProMatchSetsControllerUpdateSetScreenshotResult = NonNullable<Awaited<ReturnType<typeof proMatchSetsControllerUpdateSetScreenshot>>>
export type ProMatchSetsControllerDeleteSetScreenshotResult = NonNullable<Awaited<ReturnType<typeof proMatchSetsControllerDeleteSetScreenshot>>>
export type ProMatchRefereeControllerAssignRefereeResult = NonNullable<Awaited<ReturnType<typeof proMatchRefereeControllerAssignReferee>>>
export type ProMatchRefereeControllerReplaceRefereeByIdsResult = NonNullable<Awaited<ReturnType<typeof proMatchRefereeControllerReplaceRefereeByIds>>>
export type ProMatchRefereeControllerSubmitMatchByIdsResult = NonNullable<Awaited<ReturnType<typeof proMatchRefereeControllerSubmitMatchByIds>>>
export type ProMatchRefereeControllerSubmitMatchNoteByIdsResult = NonNullable<Awaited<ReturnType<typeof proMatchRefereeControllerSubmitMatchNoteByIds>>>
export type ProMatchRefereeControllerGetMyAssignmentsResult = NonNullable<Awaited<ReturnType<typeof proMatchRefereeControllerGetMyAssignments>>>
export type ProMatchRefereeControllerRemoveRefereeResult = NonNullable<Awaited<ReturnType<typeof proMatchRefereeControllerRemoveReferee>>>
export type VersionControllerCheckVersionResult = NonNullable<Awaited<ReturnType<typeof versionControllerCheckVersion>>>
export type VersionControllerUpdateVersionInfoResult = NonNullable<Awaited<ReturnType<typeof versionControllerUpdateVersionInfo>>>
export type BracketControllerCreateBracketResult = NonNullable<Awaited<ReturnType<typeof bracketControllerCreateBracket>>>
export type BracketControllerInitializeBracketStructureResult = NonNullable<Awaited<ReturnType<typeof bracketControllerInitializeBracketStructure>>>
export type BracketControllerDeleteBracketResult = NonNullable<Awaited<ReturnType<typeof bracketControllerDeleteBracket>>>
export type BracketGroupControllerGetBracketGroupOverviewResult = NonNullable<Awaited<ReturnType<typeof bracketGroupControllerGetBracketGroupOverview>>>
export type BracketGroupControllerAddParticipantsResult = NonNullable<Awaited<ReturnType<typeof bracketGroupControllerAddParticipants>>>
export type MatchControllerGetSetResultsResult = NonNullable<Awaited<ReturnType<typeof matchControllerGetSetResults>>>
export type MatchControllerSaveSetResultsResult = NonNullable<Awaited<ReturnType<typeof matchControllerSaveSetResults>>>
export type MatchControllerGetSetParticipantStatsResult = NonNullable<Awaited<ReturnType<typeof matchControllerGetSetParticipantStats>>>
export type MatchControllerSaveSetParticipantStatsResult = NonNullable<Awaited<ReturnType<typeof matchControllerSaveSetParticipantStats>>>
export type MatchControllerUploadSetResultScreenshotResult = NonNullable<Awaited<ReturnType<typeof matchControllerUploadSetResultScreenshot>>>
export type RosterControllerCreateRosterResult = NonNullable<Awaited<ReturnType<typeof rosterControllerCreateRoster>>>
export type RosterControllerFindAllByQueryResult = NonNullable<Awaited<ReturnType<typeof rosterControllerFindAllByQuery>>>
export type RosterControllerCreateBulkRosterResult = NonNullable<Awaited<ReturnType<typeof rosterControllerCreateBulkRoster>>>
export type RosterControllerFindOneResult = NonNullable<Awaited<ReturnType<typeof rosterControllerFindOne>>>
export type RosterControllerSoftRemoveResult = NonNullable<Awaited<ReturnType<typeof rosterControllerSoftRemove>>>
export type RefereeControllerFindAllResult = NonNullable<Awaited<ReturnType<typeof refereeControllerFindAll>>>


export const getAppControllerGetHelloResponseMock = (): string => (faker.word.sample())

export const getTeamsControllerFindMyTeamResponseLolCardMock = (overrideResponse: Partial<LolCard> = {}): LolCard => ({...{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), level: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), profilePicture: faker.string.alpha(20), puuid: faker.string.alpha(20), rank: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), tier: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, ...overrideResponse});

export const getTeamsControllerFindMyTeamResponseFCOnlineCardMock = (overrideResponse: Partial<FCOnlineCard> = {}): FCOnlineCard => ({...{achievementDate: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, division: faker.string.alpha(20), gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), level: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), ouid: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, ...overrideResponse});

export const getTeamsControllerFindMyTeamResponseMock = (overrideResponse: Partial< MyTeamResonse > = {}): MyTeamResonse => ({gameId: faker.string.alpha(20), members: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCard: faker.helpers.arrayElement([{...getTeamsControllerFindMyTeamResponseLolCardMock()},{...getTeamsControllerFindMyTeamResponseFCOnlineCardMock()}]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)})), missingDocs: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({competitionId: faker.string.alpha(20), description: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), minorBirthDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), name: faker.string.alpha(20), tag: faker.string.alpha(20)})), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: undefined, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, ...overrideResponse})

export const getTeamsControllerFindOneResponseLolCardMock = (overrideResponse: Partial<LolCard> = {}): LolCard => ({...{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), level: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), profilePicture: faker.string.alpha(20), puuid: faker.string.alpha(20), rank: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), tier: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, ...overrideResponse});

export const getTeamsControllerFindOneResponseFCOnlineCardMock = (overrideResponse: Partial<FCOnlineCard> = {}): FCOnlineCard => ({...{achievementDate: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, division: faker.string.alpha(20), gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), level: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), ouid: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, ...overrideResponse});

export const getTeamsControllerFindOneResponseMock = (overrideResponse: Partial< MyTeamResonse > = {}): MyTeamResonse => ({gameId: faker.string.alpha(20), members: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCard: faker.helpers.arrayElement([{...getTeamsControllerFindOneResponseLolCardMock()},{...getTeamsControllerFindOneResponseFCOnlineCardMock()}]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)})), missingDocs: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({competitionId: faker.string.alpha(20), description: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), minorBirthDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), name: faker.string.alpha(20), tag: faker.string.alpha(20)})), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: undefined, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, ...overrideResponse})

export const getTeamsControllerFindAllResponseMock = (): Team[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: undefined, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})))

export const getTeamsControllerCreateResponseMock = (overrideResponse: Partial< Team > = {}): Team => ({competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})

export const getTeamsControllerFindPlayersResponseMock = (): Player[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: undefined, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)})))

export const getTeamsControllerAddPlayerResponseMock = (overrideResponse: Partial< Player > = {}): Player => ({competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getTeamsControllerCheckTeamNameExistResponseMock = (overrideResponse: Partial< CheckTeamNameResponse | void > = {}): CheckTeamNameResponse | void => ({result: faker.datatype.boolean(), ...overrideResponse})

export const getTeamsControllerConfirmResponseMock = (overrideResponse: Partial< Team > = {}): Team => ({competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})

export const getTeamsControllerUpdatePositionResponseMock = (overrideResponse: Partial< Player > = {}): Player => ({competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getPlayersControllerUpdateStatusResponseMock = (overrideResponse: Partial< Player > = {}): Player => ({competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getPlayersControllerGetMyRegistrationInfoResponseMock = (overrideResponse: Partial< Player > = {}): Player => ({competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getPlayersControllerChangeCardStatusResponseLolCardMock = (overrideResponse: Partial<LolCard> = {}): LolCard => ({...{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), level: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), profilePicture: faker.string.alpha(20), puuid: faker.string.alpha(20), rank: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), tier: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, ...overrideResponse});

export const getPlayersControllerChangeCardStatusResponseFCOnlineCardMock = (overrideResponse: Partial<FCOnlineCard> = {}): FCOnlineCard => ({...{achievementDate: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, division: faker.string.alpha(20), gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), level: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), ouid: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, ...overrideResponse});

export const getPlayersControllerChangeCardStatusResponseMock = (): PlayersControllerChangeCardStatus200 => (faker.helpers.arrayElement([{...getPlayersControllerChangeCardStatusResponseLolCardMock()},{...getPlayersControllerChangeCardStatusResponseFCOnlineCardMock()}]))

export const getPlayersControllerAddPlayerResponseMock = (overrideResponse: Partial< Player > = {}): Player => ({competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getUserControllerFindMeResponseMock = (overrideResponse: Partial< User > = {}): User => ({address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, dateOfBirth: faker.string.alpha(20), deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), email: faker.string.alpha(20), gender: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isForeigner: faker.datatype.boolean(), lolMaxTier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), needCheck: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), phoneNumber: faker.string.alpha(20), pushToken: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.string.alpha(20), signature: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), unique_key: faker.string.alpha(20), university: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getUserControllerFindOneResponseMock = (overrideResponse: Partial< User > = {}): User => ({address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, dateOfBirth: faker.string.alpha(20), deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), email: faker.string.alpha(20), gender: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isForeigner: faker.datatype.boolean(), lolMaxTier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), needCheck: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), phoneNumber: faker.string.alpha(20), pushToken: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.string.alpha(20), signature: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), unique_key: faker.string.alpha(20), university: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getUserControllerUpdateUserInfoResponseMock = (overrideResponse: Partial< User > = {}): User => ({address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, dateOfBirth: faker.string.alpha(20), deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), email: faker.string.alpha(20), gender: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isForeigner: faker.datatype.boolean(), lolMaxTier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), needCheck: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), phoneNumber: faker.string.alpha(20), pushToken: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.string.alpha(20), signature: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), unique_key: faker.string.alpha(20), university: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getUserControllerRemoveUserResponseMock = (overrideResponse: Partial< User > = {}): User => ({address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, dateOfBirth: faker.string.alpha(20), deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), email: faker.string.alpha(20), gender: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isForeigner: faker.datatype.boolean(), lolMaxTier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), needCheck: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), phoneNumber: faker.string.alpha(20), pushToken: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.string.alpha(20), signature: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), unique_key: faker.string.alpha(20), university: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getUserControllerGetDemoUserResponseMock = (overrideResponse: Partial< SignInWithPassResponseDto | void > = {}): SignInWithPassResponseDto | void => ({existingUser: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), role: faker.helpers.arrayElement(['PLAYER','PRO_PLAYER','REFEREE','HOPAE_ADMIN','HOST_ADMIN','HOST_CLERK_ORG_ADMIN','HOST_CLERK_ORG_MEMBER','REFEREE_V2'] as const), token: faker.string.alpha(20), user: {address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, dateOfBirth: faker.string.alpha(20), deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), email: faker.string.alpha(20), gender: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isForeigner: faker.datatype.boolean(), lolMaxTier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), needCheck: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), phoneNumber: faker.string.alpha(20), pushToken: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.string.alpha(20), signature: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), unique_key: faker.string.alpha(20), university: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, ...overrideResponse})

export const getUserControllerAddUserWithNameResponseMock = (overrideResponse: Partial< SignInWithPassResponseDto | UserControllerAddUserWithName201 > = {}): SignInWithPassResponseDto | UserControllerAddUserWithName201 => (faker.helpers.arrayElement([{existingUser: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), role: faker.helpers.arrayElement(['PLAYER','PRO_PLAYER','REFEREE','HOPAE_ADMIN','HOST_ADMIN','HOST_CLERK_ORG_ADMIN','HOST_CLERK_ORG_MEMBER','REFEREE_V2'] as const), token: faker.string.alpha(20), user: {address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, dateOfBirth: faker.string.alpha(20), deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), email: faker.string.alpha(20), gender: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isForeigner: faker.datatype.boolean(), lolMaxTier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), needCheck: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), phoneNumber: faker.string.alpha(20), pushToken: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.string.alpha(20), signature: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), unique_key: faker.string.alpha(20), university: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, ...overrideResponse}, {}]))

export const getUserControllerSignInWithPassResponseMock = (overrideResponse: Partial< SignInWithPassResponseDto | UserControllerSignInWithPass201 > = {}): SignInWithPassResponseDto | UserControllerSignInWithPass201 => (faker.helpers.arrayElement([{existingUser: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), role: faker.helpers.arrayElement(['PLAYER','PRO_PLAYER','REFEREE','HOPAE_ADMIN','HOST_ADMIN','HOST_CLERK_ORG_ADMIN','HOST_CLERK_ORG_MEMBER','REFEREE_V2'] as const), token: faker.string.alpha(20), user: {address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, dateOfBirth: faker.string.alpha(20), deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), email: faker.string.alpha(20), gender: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isForeigner: faker.datatype.boolean(), lolMaxTier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), needCheck: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), phoneNumber: faker.string.alpha(20), pushToken: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.string.alpha(20), signature: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), unique_key: faker.string.alpha(20), university: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, ...overrideResponse}, {}]))

export const getUserControllerRefreshRoleResponseMock = (overrideResponse: Partial< RefreshUserRoleResponseDto | UserControllerRefreshRole201 > = {}): RefreshUserRoleResponseDto | UserControllerRefreshRole201 => (faker.helpers.arrayElement([{refreshed: faker.datatype.boolean(), token: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse}, {}]))

export const getUserControllerSignInWithClerkResponseMock = (overrideResponse: Partial< UserControllerSignInWithClerk200 | void > = {}): UserControllerSignInWithClerk200 | void => ({access_token: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getPassControllerPassResponseMock = (overrideResponse: Partial< PassInfo > = {}): PassInfo => ({birthday: faker.string.alpha(20), foreigner_v2: faker.datatype.boolean(), gender: faker.string.alpha(20), name: faker.string.alpha(20), phone: faker.string.alpha(20), unique_in_site: faker.string.alpha(20), unique_key: faker.string.alpha(20), ...overrideResponse})

export const getPushControllerSendPushResponseMock = (overrideResponse: Partial< SendPushDto > = {}): SendPushDto => ({body: faker.string.alpha(20), data: {}, title: faker.string.alpha(20), ...overrideResponse})

export const getFileUploadControllerUploadFileResponseMock = (overrideResponse: Partial< File > = {}): File => ({competitionId: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, fileId: faker.string.alpha(20), fileName: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), status: faker.string.alpha(20), tag: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getFileUploadControllerGetMyFilesResponseMock = (): File[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({competitionId: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, fileId: faker.string.alpha(20), fileName: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), status: faker.string.alpha(20), tag: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)})))

export const getFileUploadControllerUpdateStatusResponseMock = (overrideResponse: Partial< File > = {}): File => ({competitionId: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, fileId: faker.string.alpha(20), fileName: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), status: faker.string.alpha(20), tag: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getAgreementsControllerFindParentKeyResponseMock = (overrideResponse: Partial< AgreementsWithToken > = {}): AgreementsWithToken => ({agreementId: faker.string.alpha(20), bipaAgreement: faker.datatype.boolean(), competitionId: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), kespaAgreement: faker.datatype.boolean(), parentBirthday: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), parentKey: faker.string.alpha(20), parentName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), parentParticipantConsent: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), parentPhoneNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), parentSignature: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), participantConsent: faker.datatype.boolean(), portraitConsent: faker.datatype.boolean(), privacy3rdConsent: faker.datatype.boolean(), privacyConsent: faker.datatype.boolean(), relationship: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), signature: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), token: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getAgreementsControllerUpdateParentDataByKeyResponseMock = (overrideResponse: Partial< Agreements > = {}): Agreements => ({agreementId: faker.string.alpha(20), bipaAgreement: faker.datatype.boolean(), competitionId: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), kespaAgreement: faker.datatype.boolean(), parentBirthday: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), parentKey: faker.string.alpha(20), parentName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), parentParticipantConsent: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), parentPhoneNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), parentSignature: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), participantConsent: faker.datatype.boolean(), portraitConsent: faker.datatype.boolean(), privacy3rdConsent: faker.datatype.boolean(), privacyConsent: faker.datatype.boolean(), relationship: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), signature: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getAgreementsControllerFindOneResponseMock = (overrideResponse: Partial< Agreements > = {}): Agreements => ({agreementId: faker.string.alpha(20), bipaAgreement: faker.datatype.boolean(), competitionId: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), kespaAgreement: faker.datatype.boolean(), parentBirthday: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), parentKey: faker.string.alpha(20), parentName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), parentParticipantConsent: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), parentPhoneNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), parentSignature: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), participantConsent: faker.datatype.boolean(), portraitConsent: faker.datatype.boolean(), privacy3rdConsent: faker.datatype.boolean(), privacyConsent: faker.datatype.boolean(), relationship: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), signature: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getAgreementsControllerUpdateAgreementResponseMock = (overrideResponse: Partial< Agreements > = {}): Agreements => ({agreementId: faker.string.alpha(20), bipaAgreement: faker.datatype.boolean(), competitionId: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), kespaAgreement: faker.datatype.boolean(), parentBirthday: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), parentKey: faker.string.alpha(20), parentName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), parentParticipantConsent: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), parentPhoneNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), parentSignature: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), participantConsent: faker.datatype.boolean(), portraitConsent: faker.datatype.boolean(), privacy3rdConsent: faker.datatype.boolean(), privacyConsent: faker.datatype.boolean(), relationship: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), signature: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getAgreementsControllerCreateResponseMock = (overrideResponse: Partial< Agreements > = {}): Agreements => ({agreementId: faker.string.alpha(20), bipaAgreement: faker.datatype.boolean(), competitionId: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), kespaAgreement: faker.datatype.boolean(), parentBirthday: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), parentKey: faker.string.alpha(20), parentName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), parentParticipantConsent: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), parentPhoneNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), parentSignature: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), participantConsent: faker.datatype.boolean(), portraitConsent: faker.datatype.boolean(), privacy3rdConsent: faker.datatype.boolean(), privacyConsent: faker.datatype.boolean(), relationship: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), signature: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getGameControllerFindMyGameCardsResponseLolCardMock = (overrideResponse: Partial<LolCard> = {}): LolCard => ({...{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), level: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), profilePicture: faker.string.alpha(20), puuid: faker.string.alpha(20), rank: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), tier: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, ...overrideResponse});

export const getGameControllerFindMyGameCardsResponseFCOnlineCardMock = (overrideResponse: Partial<FCOnlineCard> = {}): FCOnlineCard => ({...{achievementDate: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, division: faker.string.alpha(20), gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), level: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), ouid: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, ...overrideResponse});

export const getGameControllerFindMyGameCardsResponseValCardMock = (overrideResponse: Partial<ValCard> = {}): ValCard => ({...{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), rank: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), tier: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, ...overrideResponse});

export const getGameControllerFindMyGameCardsResponseMock = (): GameControllerFindMyGameCards200Item[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([{...getGameControllerFindMyGameCardsResponseLolCardMock()},{...getGameControllerFindMyGameCardsResponseFCOnlineCardMock()},{...getGameControllerFindMyGameCardsResponseValCardMock()}]))))

export const getGameControllerFindLOLUserResponseMock = (overrideResponse: Partial< LolUser > = {}): LolUser => ({gameName: faker.string.alpha(20), level: faker.number.int({min: undefined, max: undefined}), profilePicture: faker.string.alpha(20), puuid: faker.string.alpha(20), queueType: faker.string.alpha(20), rank: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), tagLine: faker.string.alpha(20), tier: faker.string.alpha(20), ...overrideResponse})

export const getGameControllerFindFCOnlineUserResponseMock = (overrideResponse: Partial< FcOnlineUser > = {}): FcOnlineUser => ({achievementDate: `${faker.date.past().toISOString().split('.')[0]}Z`, division: faker.number.int({min: undefined, max: undefined}), level: faker.number.int({min: undefined, max: undefined}), matchType: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), ouid: faker.string.alpha(20), ...overrideResponse})

export const getGameControllerFindBrawlStarsUserResponseMock = (overrideResponse: Partial< BrawlStarsUser > = {}): BrawlStarsUser => ({expLevel: faker.number.int({min: undefined, max: undefined}), highestTrophies: faker.number.int({min: undefined, max: undefined}), level: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), playerTag: faker.string.alpha(20), trophies: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getGameControllerFindAllGameMetasResponseMock = (): GameMetaDto[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({cardImageUrl: faker.string.alpha(20), genre: faker.helpers.arrayElement(['MOBA','FPS'] as const), icon: faker.string.alpha(20), id: faker.string.alpha(20), krName: faker.string.alpha(20), logo: faker.string.alpha(20), name: faker.string.alpha(20), verifyScreenshotUrl: faker.string.alpha(20), verifyScreenshotUrlDetail: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), verifyUrl: faker.string.alpha(20)})))

export const getGameControllerFindGameMetaByGameIdResponseMock = (overrideResponse: Partial< GameMetaDto > = {}): GameMetaDto => ({cardImageUrl: faker.string.alpha(20), genre: faker.helpers.arrayElement(['MOBA','FPS'] as const), icon: faker.string.alpha(20), id: faker.string.alpha(20), krName: faker.string.alpha(20), logo: faker.string.alpha(20), name: faker.string.alpha(20), verifyScreenshotUrl: faker.string.alpha(20), verifyScreenshotUrlDetail: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), verifyUrl: faker.string.alpha(20), ...overrideResponse})

export const getGameControllerCreateBrawlStarsCardResponseMock = (overrideResponse: Partial< BrawlStarsCard > = {}): BrawlStarsCard => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, expLevel: faker.number.int({min: undefined, max: undefined}), gameCardId: faker.string.alpha(20), highestTrophies: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), playerTag: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), supercellId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), trophies: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getGameControllerCreateEternalReturnsCardResponseMock = (overrideResponse: Partial< BrawlStarsCard | EternalReturnsCard > = {}): BrawlStarsCard | EternalReturnsCard => (faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, expLevel: faker.number.int({min: undefined, max: undefined}), gameCardId: faker.string.alpha(20), highestTrophies: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), playerTag: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), supercellId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), trophies: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse}, {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), mmr: faker.string.alpha(20), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), rank: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse}]))

export const getGameControllerCreateKingOfFightersCardResponseMock = (overrideResponse: Partial< KingOfFightersCard > = {}): KingOfFightersCard => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getGameControllerCreateEFootballCardResponseMock = (overrideResponse: Partial< EFootballCard > = {}): EFootballCard => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), rank: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getGameControllerCreatePokemonUniteCardResponseMock = (overrideResponse: Partial< PokemonUniteCard > = {}): PokemonUniteCard => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), rank: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getGameControllerCreateLolCardResponseMock = (overrideResponse: Partial< LolCard > = {}): LolCard => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), level: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), profilePicture: faker.string.alpha(20), puuid: faker.string.alpha(20), rank: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), tier: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getGameControllerCreateFCOnlineCardResponseMock = (overrideResponse: Partial< FCOnlineCard > = {}): FCOnlineCard => ({achievementDate: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, division: faker.string.alpha(20), gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), level: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), ouid: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getGameControllerCreateValCardResponseMock = (overrideResponse: Partial< ValCard > = {}): ValCard => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), rank: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), tier: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getGameControllerCreateOWCardResponseMock = (overrideResponse: Partial< OWCard > = {}): OWCard => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), rank: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), tier: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getGameControllerCreatePubgMobileCardResponseMock = (overrideResponse: Partial< PubgMobileCard > = {}): PubgMobileCard => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getGameControllerCreateStreetFighterCardResponseMock = (overrideResponse: Partial< StreetFighterCard > = {}): StreetFighterCard => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getGameControllerCreateKartRiderCardResponseMock = (overrideResponse: Partial< KartRiderCard > = {}): KartRiderCard => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getGameControllerFindOWCardResponseMock = (overrideResponse: Partial< OWCard > = {}): OWCard => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), rank: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), tier: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getGameControllerFindBrawlStarsCardResponseMock = (overrideResponse: Partial< BrawlStarsCard > = {}): BrawlStarsCard => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, expLevel: faker.number.int({min: undefined, max: undefined}), gameCardId: faker.string.alpha(20), highestTrophies: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), playerTag: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), supercellId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), trophies: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getGameControllerFindPubgMobileCardResponseMock = (overrideResponse: Partial< PubgMobileCard > = {}): PubgMobileCard => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getGameControllerFindStreetFighterCardResponseMock = (overrideResponse: Partial< StreetFighterCard > = {}): StreetFighterCard => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getGameControllerFindKartRiderCardResponseMock = (overrideResponse: Partial< KartRiderCard > = {}): KartRiderCard => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getGameControllerFindEternalReturnsCardResponseMock = (overrideResponse: Partial< EternalReturnsCard > = {}): EternalReturnsCard => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), mmr: faker.string.alpha(20), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), rank: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getGameControllerFindValCardResponseMock = (overrideResponse: Partial< ValCard > = {}): ValCard => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), rank: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), tier: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getGameControllerFindLolCardResponseMock = (overrideResponse: Partial< LolCard > = {}): LolCard => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), level: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), profilePicture: faker.string.alpha(20), puuid: faker.string.alpha(20), rank: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), tier: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getGameControllerFindKingOfFightersCardResponseMock = (overrideResponse: Partial< KingOfFightersCard > = {}): KingOfFightersCard => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getGameControllerFindEFootballCardResponseMock = (overrideResponse: Partial< EFootballCard > = {}): EFootballCard => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), rank: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getGameControllerFindPokemonUniteCardResponseMock = (overrideResponse: Partial< PokemonUniteCard > = {}): PokemonUniteCard => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), rank: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getGameControllerFindFCOnlineCardResponseMock = (overrideResponse: Partial< FCOnlineCard > = {}): FCOnlineCard => ({achievementDate: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, division: faker.string.alpha(20), gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), level: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), ouid: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getGameControllerRefreshCardResponseLolCardMock = (overrideResponse: Partial<LolCard> = {}): LolCard => ({...{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), level: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), profilePicture: faker.string.alpha(20), puuid: faker.string.alpha(20), rank: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), tier: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, ...overrideResponse});

export const getGameControllerRefreshCardResponseFCOnlineCardMock = (overrideResponse: Partial<FCOnlineCard> = {}): FCOnlineCard => ({...{achievementDate: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, division: faker.string.alpha(20), gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), level: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), ouid: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, ...overrideResponse});

export const getGameControllerRefreshCardResponseMock = (): GameControllerRefreshCard200 | GameControllerRefreshCard201 => (faker.helpers.arrayElement([faker.helpers.arrayElement([{...getGameControllerRefreshCardResponseLolCardMock()},{...getGameControllerRefreshCardResponseFCOnlineCardMock()}]), {}]))

export const getGameControllerUpdateNicknameResponseLolCardMock = (overrideResponse: Partial<LolCard> = {}): LolCard => ({...{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), level: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), profilePicture: faker.string.alpha(20), puuid: faker.string.alpha(20), rank: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), tier: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, ...overrideResponse});

export const getGameControllerUpdateNicknameResponseFCOnlineCardMock = (overrideResponse: Partial<FCOnlineCard> = {}): FCOnlineCard => ({...{achievementDate: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, division: faker.string.alpha(20), gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), level: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), ouid: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, ...overrideResponse});

export const getGameControllerUpdateNicknameResponseValCardMock = (overrideResponse: Partial<ValCard> = {}): ValCard => ({...{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), rank: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), tier: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, ...overrideResponse});

export const getGameControllerUpdateNicknameResponseOWCardMock = (overrideResponse: Partial<OWCard> = {}): OWCard => ({...{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), rank: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), tier: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, ...overrideResponse});

export const getGameControllerUpdateNicknameResponseBrawlStarsCardMock = (overrideResponse: Partial<BrawlStarsCard> = {}): BrawlStarsCard => ({...{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, expLevel: faker.number.int({min: undefined, max: undefined}), gameCardId: faker.string.alpha(20), highestTrophies: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), playerTag: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), supercellId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), trophies: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, ...overrideResponse});

export const getGameControllerUpdateNicknameResponsePubgMobileCardMock = (overrideResponse: Partial<PubgMobileCard> = {}): PubgMobileCard => ({...{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, ...overrideResponse});

export const getGameControllerUpdateNicknameResponseStreetFighterCardMock = (overrideResponse: Partial<StreetFighterCard> = {}): StreetFighterCard => ({...{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, ...overrideResponse});

export const getGameControllerUpdateNicknameResponseKartRiderCardMock = (overrideResponse: Partial<KartRiderCard> = {}): KartRiderCard => ({...{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, ...overrideResponse});

export const getGameControllerUpdateNicknameResponseEternalReturnsCardMock = (overrideResponse: Partial<EternalReturnsCard> = {}): EternalReturnsCard => ({...{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), mmr: faker.string.alpha(20), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), rank: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, ...overrideResponse});

export const getGameControllerUpdateNicknameResponseEFootballCardMock = (overrideResponse: Partial<EFootballCard> = {}): EFootballCard => ({...{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), rank: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, ...overrideResponse});

export const getGameControllerUpdateNicknameResponsePokemonUniteCardMock = (overrideResponse: Partial<PokemonUniteCard> = {}): PokemonUniteCard => ({...{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), rank: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, ...overrideResponse});

export const getGameControllerUpdateNicknameResponseKingOfFightersCardMock = (overrideResponse: Partial<KingOfFightersCard> = {}): KingOfFightersCard => ({...{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, ...overrideResponse});

export const getGameControllerUpdateNicknameResponseMock = (): GameControllerUpdateNickname200 | GameControllerUpdateNickname201 => (faker.helpers.arrayElement([faker.helpers.arrayElement([{...getGameControllerUpdateNicknameResponseLolCardMock()},{...getGameControllerUpdateNicknameResponseFCOnlineCardMock()},{...getGameControllerUpdateNicknameResponseValCardMock()},{...getGameControllerUpdateNicknameResponseOWCardMock()},{...getGameControllerUpdateNicknameResponseBrawlStarsCardMock()},{...getGameControllerUpdateNicknameResponsePubgMobileCardMock()},{...getGameControllerUpdateNicknameResponseStreetFighterCardMock()},{...getGameControllerUpdateNicknameResponseKartRiderCardMock()},{...getGameControllerUpdateNicknameResponseEternalReturnsCardMock()},{...getGameControllerUpdateNicknameResponseEFootballCardMock()},{...getGameControllerUpdateNicknameResponsePokemonUniteCardMock()},{...getGameControllerUpdateNicknameResponseKingOfFightersCardMock()}]), {}]))

export const getGameControllerRemoveGameCardResponseMock = (overrideResponse: Partial< LolCard > = {}): LolCard => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameCardId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), level: faker.number.int({min: undefined, max: undefined}), nickname: faker.string.alpha(20), notOwner: faker.datatype.boolean(), profilePicture: faker.string.alpha(20), puuid: faker.string.alpha(20), rank: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), screenshotFileId: faker.string.alpha(20), screenshotFileName: faker.string.alpha(20), status: faker.string.alpha(20), tier: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), ...overrideResponse})

export const getGameControllerUploadFileResponseMock = (): GameControllerUploadFile201 => ({})

export const getGameControllerUpdateRankAndTierResponseMock = (): GameControllerUpdateRankAndTier200 => ({})

export const getCompetitionsControllerFindAllResponseMock = (): Competition[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])})))

export const getCompetitionsControllerCreateResponseMock = (overrideResponse: Partial< Competition > = {}): Competition => ({alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null]), ...overrideResponse})

export const getCompetitionsControllerFindHostingCompetitionsResponseMock = (overrideResponse: Partial< CompetitionsControllerFindHostingCompetitions200 > = {}): CompetitionsControllerFindHostingCompetitions200 => ({data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])})), undefined]), ...overrideResponse})

export const getCompetitionsControllerFindAllGroupResponseCompetitionDtoMock = (overrideResponse: Partial<CompetitionDto> = {}): CompetitionDto => ({...{alias: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), applicationEndedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), competitionEndedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), competitionId: faker.string.alpha(20), competitionStartedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), description: faker.string.alpha(20), documents: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({competitionId: faker.string.alpha(20), description: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), minorBirthDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), name: faker.string.alpha(20), tag: faker.string.alpha(20)})), dueDate: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameType: faker.helpers.arrayElement([faker.helpers.arrayElements(['lol','fco','val','ow2','brs','pgm','sfv','krt','ert','kof','efo','pku'] as const), undefined]), id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), notice: {brs: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), efo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ert: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), fconline: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), kof: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), krt: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), pgm: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), pku: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), str: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), val: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, organizationTitle: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), privacyPolicy: faker.string.alpha(20), status: faker.helpers.arrayElement([faker.helpers.arrayElement(['opend','closed'] as const), null]), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20)}, ...overrideResponse});

export const getCompetitionsControllerFindAllGroupResponseParentCompetitionDtoMock = (overrideResponse: Partial<ParentCompetitionDto> = {}): ParentCompetitionDto => ({...{applicationEndedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), applicationStartedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), childCategoryType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(CompetitionCategoryType)), undefined]), childCompetitionIds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameType: faker.helpers.arrayElement([faker.helpers.arrayElements(['lol','fco','val','ow2','brs','pgm','sfv','krt','ert','kof','efo','pku'] as const), undefined]), id: faker.string.alpha(20), notice: {brs: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), efo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ert: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), fconline: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), kof: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), krt: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), pgm: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), pku: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), str: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), val: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, status: faker.helpers.arrayElement(['opend','closed'] as const), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20)}, ...overrideResponse});

export const getCompetitionsControllerFindAllGroupResponseMock = (): CompetitionsControllerFindAllGroup200Item[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.helpers.arrayElement([{...getCompetitionsControllerFindAllGroupResponseCompetitionDtoMock()},{...getCompetitionsControllerFindAllGroupResponseParentCompetitionDtoMock()}]))))

export const getCompetitionsControllerFindByParentIdResponseMock = (): ChildCompetitionDto[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({alias: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), applicationEndedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), competitionEndedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), competitionId: faker.string.alpha(20), competitionStartedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), description: faker.string.alpha(20), documents: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({competitionId: faker.string.alpha(20), description: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), minorBirthDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), name: faker.string.alpha(20), tag: faker.string.alpha(20)})), dueDate: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameType: faker.helpers.arrayElement([faker.helpers.arrayElements(['lol','fco','val','ow2','brs','pgm','sfv','krt','ert','kof','efo','pku'] as const), undefined]), id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), notice: {brs: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), efo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ert: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), fconline: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), kof: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), krt: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), pgm: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), pku: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), str: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), val: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, organizationTitle: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), privacyPolicy: faker.string.alpha(20), status: faker.helpers.arrayElement([faker.helpers.arrayElement(['opend','closed'] as const), null]), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20)})))

export const getCompetitionsControllerFindOneResponseMock = (overrideResponse: Partial< CompetitionDto > = {}): CompetitionDto => ({alias: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), applicationEndedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), competitionEndedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), competitionId: faker.string.alpha(20), competitionStartedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), description: faker.string.alpha(20), documents: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({competitionId: faker.string.alpha(20), description: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), minorBirthDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), name: faker.string.alpha(20), tag: faker.string.alpha(20)})), dueDate: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameType: faker.helpers.arrayElement([faker.helpers.arrayElements(['lol','fco','val','ow2','brs','pgm','sfv','krt','ert','kof','efo','pku'] as const), undefined]), id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), notice: {brs: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), efo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ert: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), fconline: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), kof: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), krt: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), lol: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), pgm: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), pku: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), str: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), val: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, organizationTitle: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), privacyPolicy: faker.string.alpha(20), status: faker.helpers.arrayElement([faker.helpers.arrayElement(['opend','closed'] as const), null]), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), ...overrideResponse})

export const getCompetitionsControllerModifyResponseMock = (overrideResponse: Partial< Competition > = {}): Competition => ({alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null]), ...overrideResponse})

export const getCompetitionsControllerDeleteResponseMock = (overrideResponse: Partial< Competition > = {}): Competition => ({alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null]), ...overrideResponse})

export const getCompetitionsControllerFindGameModesResponseMock = (): GameTypeDto[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), id: faker.string.alpha(20), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getCompetitionsControllerModifyGameTypeDetailResponseMock = (overrideResponse: Partial< CompetitionsControllerModifyGameTypeDetail200 > = {}): CompetitionsControllerModifyGameTypeDetail200 => ({data: faker.helpers.arrayElement([{gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), id: faker.string.alpha(20), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), ...overrideResponse})

export const getStageControllerCreateStageResponseMock = (overrideResponse: Partial< StageControllerCreateStage200 | void > = {}): StageControllerCreateStage200 | void => ({data: faker.helpers.arrayElement([{bracket: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), format: faker.string.alpha(20), formatOptions: {}, groups: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({bracketId: faker.number.int({min: undefined, max: undefined}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), participants: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({bracketGroupId: faker.number.int({min: undefined, max: undefined}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, rosterId: faker.number.int({min: undefined, max: undefined}), seed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), rounds: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({bestOf: faker.number.int({min: undefined, max: undefined}), bracketGroupId: faker.number.int({min: undefined, max: undefined}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matches: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({bestOf: faker.number.int({min: undefined, max: undefined}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), loserProgressionMatches: [], loserProgressionMatchId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), matchNumber: faker.number.int({min: undefined, max: undefined}), matchParticipants: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), isWinner: faker.datatype.boolean(), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchParticipantId: faker.number.int({min: undefined, max: undefined}), matchSetResult: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: [], screenshotUrl: faker.helpers.arrayElement([faker.string.alpha(20), null]), setNumber: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, winnerRoster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, winnerRosterId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])}, matchSetResultId: faker.number.int({min: undefined, max: undefined}), statPayload: {}, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, rosterId: faker.number.int({min: undefined, max: undefined}), slotNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), matchReferees: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), matchId: faker.number.int({min: undefined, max: undefined}), referee: {authority: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), firstName: faker.string.alpha(20), gameName: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), issuedDate: `${faker.date.past().toISOString().split('.')[0]}Z`, issuedNumber: faker.string.alpha(20), lastName: faker.string.alpha(20), license: faker.string.alpha(20), matchReferees: [], nationality: faker.string.alpha(20), nativeName: faker.string.alpha(20), photoUrl: faker.string.alpha(20), roundReferees: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), refereeId: faker.number.int({min: undefined, max: undefined}), roundId: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, user: {address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, dateOfBirth: faker.string.alpha(20), deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), email: faker.string.alpha(20), gender: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isForeigner: faker.datatype.boolean(), lolMaxTier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), needCheck: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), phoneNumber: faker.string.alpha(20), pushToken: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.string.alpha(20), signature: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), unique_key: faker.string.alpha(20), university: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, userId: faker.number.int({min: undefined, max: undefined})}, refereeId: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), matchSetResults: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchParticipant: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), isWinner: faker.datatype.boolean(), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: [], roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, rosterId: faker.number.int({min: undefined, max: undefined}), slotNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, matchParticipantId: faker.number.int({min: undefined, max: undefined}), matchSetResultId: faker.number.int({min: undefined, max: undefined}), statPayload: {}, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), screenshotUrl: faker.helpers.arrayElement([faker.string.alpha(20), null]), setNumber: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, winnerRoster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, winnerRosterId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])})), name: faker.helpers.arrayElement([faker.string.alpha(20), null]), resultMemo: faker.helpers.arrayElement([faker.string.alpha(20), null]), resultSubmittedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), resultSubmitter: {address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, dateOfBirth: faker.string.alpha(20), deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), email: faker.string.alpha(20), gender: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isForeigner: faker.datatype.boolean(), lolMaxTier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), needCheck: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), phoneNumber: faker.string.alpha(20), pushToken: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.string.alpha(20), signature: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), unique_key: faker.string.alpha(20), university: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, resultSubmitterId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), roundId: faker.number.int({min: undefined, max: undefined}), scheduledDate: faker.helpers.arrayElement([faker.string.alpha(20), null]), scheduledTime: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, venue: faker.helpers.arrayElement([faker.string.alpha(20), null]), winnerProgressionMatches: [], winnerProgressionMatchId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])})), name: faker.helpers.arrayElement([faker.string.alpha(20), null]), roundNumber: faker.number.int({min: undefined, max: undefined}), roundReferees: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), referee: {authority: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), firstName: faker.string.alpha(20), gameName: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), issuedDate: `${faker.date.past().toISOString().split('.')[0]}Z`, issuedNumber: faker.string.alpha(20), lastName: faker.string.alpha(20), license: faker.string.alpha(20), matchReferees: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), match: {bestOf: faker.number.int({min: undefined, max: undefined}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), loserProgressionMatches: [], loserProgressionMatchId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), matchNumber: faker.number.int({min: undefined, max: undefined}), matchParticipants: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), isWinner: faker.datatype.boolean(), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchParticipantId: faker.number.int({min: undefined, max: undefined}), matchSetResult: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: [], screenshotUrl: faker.helpers.arrayElement([faker.string.alpha(20), null]), setNumber: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, winnerRoster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, winnerRosterId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])}, matchSetResultId: faker.number.int({min: undefined, max: undefined}), statPayload: {}, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, rosterId: faker.number.int({min: undefined, max: undefined}), slotNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), matchReferees: [], matchSetResults: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchParticipant: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), isWinner: faker.datatype.boolean(), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: [], roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, rosterId: faker.number.int({min: undefined, max: undefined}), slotNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, matchParticipantId: faker.number.int({min: undefined, max: undefined}), matchSetResultId: faker.number.int({min: undefined, max: undefined}), statPayload: {}, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), screenshotUrl: faker.helpers.arrayElement([faker.string.alpha(20), null]), setNumber: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, winnerRoster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, winnerRosterId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])})), name: faker.helpers.arrayElement([faker.string.alpha(20), null]), resultMemo: faker.helpers.arrayElement([faker.string.alpha(20), null]), resultSubmittedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), resultSubmitter: {address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, dateOfBirth: faker.string.alpha(20), deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), email: faker.string.alpha(20), gender: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isForeigner: faker.datatype.boolean(), lolMaxTier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), needCheck: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), phoneNumber: faker.string.alpha(20), pushToken: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.string.alpha(20), signature: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), unique_key: faker.string.alpha(20), university: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, resultSubmitterId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), roundId: faker.number.int({min: undefined, max: undefined}), scheduledDate: faker.helpers.arrayElement([faker.string.alpha(20), null]), scheduledTime: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, venue: faker.helpers.arrayElement([faker.string.alpha(20), null]), winnerProgressionMatches: [], winnerProgressionMatchId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])}, matchId: faker.number.int({min: undefined, max: undefined}), refereeId: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), nationality: faker.string.alpha(20), nativeName: faker.string.alpha(20), photoUrl: faker.string.alpha(20), roundReferees: [], updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, user: {address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, dateOfBirth: faker.string.alpha(20), deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), email: faker.string.alpha(20), gender: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isForeigner: faker.datatype.boolean(), lolMaxTier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), needCheck: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), phoneNumber: faker.string.alpha(20), pushToken: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.string.alpha(20), signature: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), unique_key: faker.string.alpha(20), university: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, userId: faker.number.int({min: undefined, max: undefined})}, refereeId: faker.number.int({min: undefined, max: undefined}), roundId: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), scheduledDate: faker.helpers.arrayElement([faker.string.alpha(20), null]), scheduledTime: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, venue: faker.helpers.arrayElement([faker.string.alpha(20), null])})), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), id: faker.number.int({min: undefined, max: undefined}), participantRosterCount: faker.number.int({min: undefined, max: undefined}), stageId: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, useGroups: faker.datatype.boolean()}, competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.number.int({min: undefined, max: undefined}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), stageOrder: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), ...overrideResponse})

export const getStageControllerGetStagesResponseMock = (overrideResponse: Partial< StageControllerGetStages200 > = {}): StageControllerGetStages200 => ({data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({bracket: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), format: faker.string.alpha(20), formatOptions: {}, groups: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({bracketId: faker.number.int({min: undefined, max: undefined}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), participants: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({bracketGroupId: faker.number.int({min: undefined, max: undefined}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, rosterId: faker.number.int({min: undefined, max: undefined}), seed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), rounds: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({bestOf: faker.number.int({min: undefined, max: undefined}), bracketGroupId: faker.number.int({min: undefined, max: undefined}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matches: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({bestOf: faker.number.int({min: undefined, max: undefined}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), loserProgressionMatches: [], loserProgressionMatchId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), matchNumber: faker.number.int({min: undefined, max: undefined}), matchParticipants: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), isWinner: faker.datatype.boolean(), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchParticipantId: faker.number.int({min: undefined, max: undefined}), matchSetResult: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: [], screenshotUrl: faker.helpers.arrayElement([faker.string.alpha(20), null]), setNumber: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, winnerRoster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, winnerRosterId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])}, matchSetResultId: faker.number.int({min: undefined, max: undefined}), statPayload: {}, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, rosterId: faker.number.int({min: undefined, max: undefined}), slotNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), matchReferees: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), matchId: faker.number.int({min: undefined, max: undefined}), referee: {authority: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), firstName: faker.string.alpha(20), gameName: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), issuedDate: `${faker.date.past().toISOString().split('.')[0]}Z`, issuedNumber: faker.string.alpha(20), lastName: faker.string.alpha(20), license: faker.string.alpha(20), matchReferees: [], nationality: faker.string.alpha(20), nativeName: faker.string.alpha(20), photoUrl: faker.string.alpha(20), roundReferees: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), refereeId: faker.number.int({min: undefined, max: undefined}), roundId: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, user: {address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, dateOfBirth: faker.string.alpha(20), deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), email: faker.string.alpha(20), gender: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isForeigner: faker.datatype.boolean(), lolMaxTier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), needCheck: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), phoneNumber: faker.string.alpha(20), pushToken: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.string.alpha(20), signature: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), unique_key: faker.string.alpha(20), university: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, userId: faker.number.int({min: undefined, max: undefined})}, refereeId: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), matchSetResults: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchParticipant: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), isWinner: faker.datatype.boolean(), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: [], roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, rosterId: faker.number.int({min: undefined, max: undefined}), slotNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, matchParticipantId: faker.number.int({min: undefined, max: undefined}), matchSetResultId: faker.number.int({min: undefined, max: undefined}), statPayload: {}, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), screenshotUrl: faker.helpers.arrayElement([faker.string.alpha(20), null]), setNumber: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, winnerRoster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, winnerRosterId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])})), name: faker.helpers.arrayElement([faker.string.alpha(20), null]), resultMemo: faker.helpers.arrayElement([faker.string.alpha(20), null]), resultSubmittedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), resultSubmitter: {address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, dateOfBirth: faker.string.alpha(20), deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), email: faker.string.alpha(20), gender: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isForeigner: faker.datatype.boolean(), lolMaxTier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), needCheck: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), phoneNumber: faker.string.alpha(20), pushToken: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.string.alpha(20), signature: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), unique_key: faker.string.alpha(20), university: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, resultSubmitterId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), roundId: faker.number.int({min: undefined, max: undefined}), scheduledDate: faker.helpers.arrayElement([faker.string.alpha(20), null]), scheduledTime: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, venue: faker.helpers.arrayElement([faker.string.alpha(20), null]), winnerProgressionMatches: [], winnerProgressionMatchId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])})), name: faker.helpers.arrayElement([faker.string.alpha(20), null]), roundNumber: faker.number.int({min: undefined, max: undefined}), roundReferees: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), referee: {authority: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), firstName: faker.string.alpha(20), gameName: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), issuedDate: `${faker.date.past().toISOString().split('.')[0]}Z`, issuedNumber: faker.string.alpha(20), lastName: faker.string.alpha(20), license: faker.string.alpha(20), matchReferees: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), match: {bestOf: faker.number.int({min: undefined, max: undefined}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), loserProgressionMatches: [], loserProgressionMatchId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), matchNumber: faker.number.int({min: undefined, max: undefined}), matchParticipants: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), isWinner: faker.datatype.boolean(), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchParticipantId: faker.number.int({min: undefined, max: undefined}), matchSetResult: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: [], screenshotUrl: faker.helpers.arrayElement([faker.string.alpha(20), null]), setNumber: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, winnerRoster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, winnerRosterId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])}, matchSetResultId: faker.number.int({min: undefined, max: undefined}), statPayload: {}, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, rosterId: faker.number.int({min: undefined, max: undefined}), slotNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), matchReferees: [], matchSetResults: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchParticipant: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), isWinner: faker.datatype.boolean(), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: [], roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, rosterId: faker.number.int({min: undefined, max: undefined}), slotNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, matchParticipantId: faker.number.int({min: undefined, max: undefined}), matchSetResultId: faker.number.int({min: undefined, max: undefined}), statPayload: {}, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), screenshotUrl: faker.helpers.arrayElement([faker.string.alpha(20), null]), setNumber: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, winnerRoster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, winnerRosterId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])})), name: faker.helpers.arrayElement([faker.string.alpha(20), null]), resultMemo: faker.helpers.arrayElement([faker.string.alpha(20), null]), resultSubmittedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), resultSubmitter: {address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, dateOfBirth: faker.string.alpha(20), deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), email: faker.string.alpha(20), gender: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isForeigner: faker.datatype.boolean(), lolMaxTier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), needCheck: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), phoneNumber: faker.string.alpha(20), pushToken: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.string.alpha(20), signature: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), unique_key: faker.string.alpha(20), university: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, resultSubmitterId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), roundId: faker.number.int({min: undefined, max: undefined}), scheduledDate: faker.helpers.arrayElement([faker.string.alpha(20), null]), scheduledTime: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, venue: faker.helpers.arrayElement([faker.string.alpha(20), null]), winnerProgressionMatches: [], winnerProgressionMatchId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])}, matchId: faker.number.int({min: undefined, max: undefined}), refereeId: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), nationality: faker.string.alpha(20), nativeName: faker.string.alpha(20), photoUrl: faker.string.alpha(20), roundReferees: [], updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, user: {address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, dateOfBirth: faker.string.alpha(20), deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), email: faker.string.alpha(20), gender: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isForeigner: faker.datatype.boolean(), lolMaxTier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), needCheck: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), phoneNumber: faker.string.alpha(20), pushToken: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.string.alpha(20), signature: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), unique_key: faker.string.alpha(20), university: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, userId: faker.number.int({min: undefined, max: undefined})}, refereeId: faker.number.int({min: undefined, max: undefined}), roundId: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), scheduledDate: faker.helpers.arrayElement([faker.string.alpha(20), null]), scheduledTime: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, venue: faker.helpers.arrayElement([faker.string.alpha(20), null])})), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), id: faker.number.int({min: undefined, max: undefined}), participantRosterCount: faker.number.int({min: undefined, max: undefined}), stageId: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, useGroups: faker.datatype.boolean()}, competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.number.int({min: undefined, max: undefined}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), stageOrder: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), undefined]), ...overrideResponse})

export const getStageControllerGetStageResponseMock = (overrideResponse: Partial< StageControllerGetStage200 > = {}): StageControllerGetStage200 => ({data: faker.helpers.arrayElement([{bracket: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), format: faker.string.alpha(20), formatOptions: {}, groups: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({bracketId: faker.number.int({min: undefined, max: undefined}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), participants: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({bracketGroupId: faker.number.int({min: undefined, max: undefined}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, rosterId: faker.number.int({min: undefined, max: undefined}), seed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), rounds: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({bestOf: faker.number.int({min: undefined, max: undefined}), bracketGroupId: faker.number.int({min: undefined, max: undefined}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matches: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({bestOf: faker.number.int({min: undefined, max: undefined}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), loserProgressionMatches: [], loserProgressionMatchId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), matchNumber: faker.number.int({min: undefined, max: undefined}), matchParticipants: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), isWinner: faker.datatype.boolean(), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchParticipantId: faker.number.int({min: undefined, max: undefined}), matchSetResult: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: [], screenshotUrl: faker.helpers.arrayElement([faker.string.alpha(20), null]), setNumber: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, winnerRoster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, winnerRosterId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])}, matchSetResultId: faker.number.int({min: undefined, max: undefined}), statPayload: {}, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, rosterId: faker.number.int({min: undefined, max: undefined}), slotNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), matchReferees: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), matchId: faker.number.int({min: undefined, max: undefined}), referee: {authority: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), firstName: faker.string.alpha(20), gameName: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), issuedDate: `${faker.date.past().toISOString().split('.')[0]}Z`, issuedNumber: faker.string.alpha(20), lastName: faker.string.alpha(20), license: faker.string.alpha(20), matchReferees: [], nationality: faker.string.alpha(20), nativeName: faker.string.alpha(20), photoUrl: faker.string.alpha(20), roundReferees: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), refereeId: faker.number.int({min: undefined, max: undefined}), roundId: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, user: {address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, dateOfBirth: faker.string.alpha(20), deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), email: faker.string.alpha(20), gender: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isForeigner: faker.datatype.boolean(), lolMaxTier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), needCheck: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), phoneNumber: faker.string.alpha(20), pushToken: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.string.alpha(20), signature: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), unique_key: faker.string.alpha(20), university: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, userId: faker.number.int({min: undefined, max: undefined})}, refereeId: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), matchSetResults: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchParticipant: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), isWinner: faker.datatype.boolean(), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: [], roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, rosterId: faker.number.int({min: undefined, max: undefined}), slotNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, matchParticipantId: faker.number.int({min: undefined, max: undefined}), matchSetResultId: faker.number.int({min: undefined, max: undefined}), statPayload: {}, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), screenshotUrl: faker.helpers.arrayElement([faker.string.alpha(20), null]), setNumber: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, winnerRoster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, winnerRosterId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])})), name: faker.helpers.arrayElement([faker.string.alpha(20), null]), resultMemo: faker.helpers.arrayElement([faker.string.alpha(20), null]), resultSubmittedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), resultSubmitter: {address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, dateOfBirth: faker.string.alpha(20), deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), email: faker.string.alpha(20), gender: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isForeigner: faker.datatype.boolean(), lolMaxTier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), needCheck: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), phoneNumber: faker.string.alpha(20), pushToken: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.string.alpha(20), signature: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), unique_key: faker.string.alpha(20), university: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, resultSubmitterId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), roundId: faker.number.int({min: undefined, max: undefined}), scheduledDate: faker.helpers.arrayElement([faker.string.alpha(20), null]), scheduledTime: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, venue: faker.helpers.arrayElement([faker.string.alpha(20), null]), winnerProgressionMatches: [], winnerProgressionMatchId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])})), name: faker.helpers.arrayElement([faker.string.alpha(20), null]), roundNumber: faker.number.int({min: undefined, max: undefined}), roundReferees: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), referee: {authority: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), firstName: faker.string.alpha(20), gameName: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), issuedDate: `${faker.date.past().toISOString().split('.')[0]}Z`, issuedNumber: faker.string.alpha(20), lastName: faker.string.alpha(20), license: faker.string.alpha(20), matchReferees: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), match: {bestOf: faker.number.int({min: undefined, max: undefined}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), loserProgressionMatches: [], loserProgressionMatchId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), matchNumber: faker.number.int({min: undefined, max: undefined}), matchParticipants: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), isWinner: faker.datatype.boolean(), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchParticipantId: faker.number.int({min: undefined, max: undefined}), matchSetResult: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: [], screenshotUrl: faker.helpers.arrayElement([faker.string.alpha(20), null]), setNumber: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, winnerRoster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, winnerRosterId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])}, matchSetResultId: faker.number.int({min: undefined, max: undefined}), statPayload: {}, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, rosterId: faker.number.int({min: undefined, max: undefined}), slotNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), matchReferees: [], matchSetResults: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchParticipant: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), isWinner: faker.datatype.boolean(), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: [], roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, rosterId: faker.number.int({min: undefined, max: undefined}), slotNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, matchParticipantId: faker.number.int({min: undefined, max: undefined}), matchSetResultId: faker.number.int({min: undefined, max: undefined}), statPayload: {}, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), screenshotUrl: faker.helpers.arrayElement([faker.string.alpha(20), null]), setNumber: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, winnerRoster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, winnerRosterId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])})), name: faker.helpers.arrayElement([faker.string.alpha(20), null]), resultMemo: faker.helpers.arrayElement([faker.string.alpha(20), null]), resultSubmittedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), resultSubmitter: {address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, dateOfBirth: faker.string.alpha(20), deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), email: faker.string.alpha(20), gender: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isForeigner: faker.datatype.boolean(), lolMaxTier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), needCheck: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), phoneNumber: faker.string.alpha(20), pushToken: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.string.alpha(20), signature: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), unique_key: faker.string.alpha(20), university: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, resultSubmitterId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), roundId: faker.number.int({min: undefined, max: undefined}), scheduledDate: faker.helpers.arrayElement([faker.string.alpha(20), null]), scheduledTime: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, venue: faker.helpers.arrayElement([faker.string.alpha(20), null]), winnerProgressionMatches: [], winnerProgressionMatchId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])}, matchId: faker.number.int({min: undefined, max: undefined}), refereeId: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), nationality: faker.string.alpha(20), nativeName: faker.string.alpha(20), photoUrl: faker.string.alpha(20), roundReferees: [], updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, user: {address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, dateOfBirth: faker.string.alpha(20), deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), email: faker.string.alpha(20), gender: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isForeigner: faker.datatype.boolean(), lolMaxTier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), needCheck: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), phoneNumber: faker.string.alpha(20), pushToken: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.string.alpha(20), signature: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), unique_key: faker.string.alpha(20), university: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, userId: faker.number.int({min: undefined, max: undefined})}, refereeId: faker.number.int({min: undefined, max: undefined}), roundId: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), scheduledDate: faker.helpers.arrayElement([faker.string.alpha(20), null]), scheduledTime: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, venue: faker.helpers.arrayElement([faker.string.alpha(20), null])})), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), id: faker.number.int({min: undefined, max: undefined}), participantRosterCount: faker.number.int({min: undefined, max: undefined}), stageId: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, useGroups: faker.datatype.boolean()}, competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.number.int({min: undefined, max: undefined}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), stageOrder: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), ...overrideResponse})

export const getStageControllerUpdateStageResponseMock = (overrideResponse: Partial< StageControllerUpdateStage200 > = {}): StageControllerUpdateStage200 => ({data: faker.helpers.arrayElement([{bracket: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), format: faker.string.alpha(20), formatOptions: {}, groups: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({bracketId: faker.number.int({min: undefined, max: undefined}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), participants: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({bracketGroupId: faker.number.int({min: undefined, max: undefined}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, rosterId: faker.number.int({min: undefined, max: undefined}), seed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), rounds: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({bestOf: faker.number.int({min: undefined, max: undefined}), bracketGroupId: faker.number.int({min: undefined, max: undefined}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matches: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({bestOf: faker.number.int({min: undefined, max: undefined}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), loserProgressionMatches: [], loserProgressionMatchId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), matchNumber: faker.number.int({min: undefined, max: undefined}), matchParticipants: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), isWinner: faker.datatype.boolean(), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchParticipantId: faker.number.int({min: undefined, max: undefined}), matchSetResult: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: [], screenshotUrl: faker.helpers.arrayElement([faker.string.alpha(20), null]), setNumber: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, winnerRoster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, winnerRosterId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])}, matchSetResultId: faker.number.int({min: undefined, max: undefined}), statPayload: {}, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, rosterId: faker.number.int({min: undefined, max: undefined}), slotNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), matchReferees: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), matchId: faker.number.int({min: undefined, max: undefined}), referee: {authority: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), firstName: faker.string.alpha(20), gameName: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), issuedDate: `${faker.date.past().toISOString().split('.')[0]}Z`, issuedNumber: faker.string.alpha(20), lastName: faker.string.alpha(20), license: faker.string.alpha(20), matchReferees: [], nationality: faker.string.alpha(20), nativeName: faker.string.alpha(20), photoUrl: faker.string.alpha(20), roundReferees: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), refereeId: faker.number.int({min: undefined, max: undefined}), roundId: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, user: {address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, dateOfBirth: faker.string.alpha(20), deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), email: faker.string.alpha(20), gender: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isForeigner: faker.datatype.boolean(), lolMaxTier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), needCheck: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), phoneNumber: faker.string.alpha(20), pushToken: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.string.alpha(20), signature: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), unique_key: faker.string.alpha(20), university: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, userId: faker.number.int({min: undefined, max: undefined})}, refereeId: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), matchSetResults: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchParticipant: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), isWinner: faker.datatype.boolean(), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: [], roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, rosterId: faker.number.int({min: undefined, max: undefined}), slotNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, matchParticipantId: faker.number.int({min: undefined, max: undefined}), matchSetResultId: faker.number.int({min: undefined, max: undefined}), statPayload: {}, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), screenshotUrl: faker.helpers.arrayElement([faker.string.alpha(20), null]), setNumber: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, winnerRoster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, winnerRosterId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])})), name: faker.helpers.arrayElement([faker.string.alpha(20), null]), resultMemo: faker.helpers.arrayElement([faker.string.alpha(20), null]), resultSubmittedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), resultSubmitter: {address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, dateOfBirth: faker.string.alpha(20), deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), email: faker.string.alpha(20), gender: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isForeigner: faker.datatype.boolean(), lolMaxTier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), needCheck: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), phoneNumber: faker.string.alpha(20), pushToken: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.string.alpha(20), signature: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), unique_key: faker.string.alpha(20), university: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, resultSubmitterId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), roundId: faker.number.int({min: undefined, max: undefined}), scheduledDate: faker.helpers.arrayElement([faker.string.alpha(20), null]), scheduledTime: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, venue: faker.helpers.arrayElement([faker.string.alpha(20), null]), winnerProgressionMatches: [], winnerProgressionMatchId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])})), name: faker.helpers.arrayElement([faker.string.alpha(20), null]), roundNumber: faker.number.int({min: undefined, max: undefined}), roundReferees: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), referee: {authority: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), firstName: faker.string.alpha(20), gameName: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), issuedDate: `${faker.date.past().toISOString().split('.')[0]}Z`, issuedNumber: faker.string.alpha(20), lastName: faker.string.alpha(20), license: faker.string.alpha(20), matchReferees: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), match: {bestOf: faker.number.int({min: undefined, max: undefined}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), loserProgressionMatches: [], loserProgressionMatchId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), matchNumber: faker.number.int({min: undefined, max: undefined}), matchParticipants: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), isWinner: faker.datatype.boolean(), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchParticipantId: faker.number.int({min: undefined, max: undefined}), matchSetResult: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: [], screenshotUrl: faker.helpers.arrayElement([faker.string.alpha(20), null]), setNumber: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, winnerRoster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, winnerRosterId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])}, matchSetResultId: faker.number.int({min: undefined, max: undefined}), statPayload: {}, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, rosterId: faker.number.int({min: undefined, max: undefined}), slotNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), matchReferees: [], matchSetResults: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchParticipant: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), isWinner: faker.datatype.boolean(), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: [], roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, rosterId: faker.number.int({min: undefined, max: undefined}), slotNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, matchParticipantId: faker.number.int({min: undefined, max: undefined}), matchSetResultId: faker.number.int({min: undefined, max: undefined}), statPayload: {}, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), screenshotUrl: faker.helpers.arrayElement([faker.string.alpha(20), null]), setNumber: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, winnerRoster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, winnerRosterId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])})), name: faker.helpers.arrayElement([faker.string.alpha(20), null]), resultMemo: faker.helpers.arrayElement([faker.string.alpha(20), null]), resultSubmittedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), resultSubmitter: {address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, dateOfBirth: faker.string.alpha(20), deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), email: faker.string.alpha(20), gender: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isForeigner: faker.datatype.boolean(), lolMaxTier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), needCheck: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), phoneNumber: faker.string.alpha(20), pushToken: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.string.alpha(20), signature: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), unique_key: faker.string.alpha(20), university: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, resultSubmitterId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), roundId: faker.number.int({min: undefined, max: undefined}), scheduledDate: faker.helpers.arrayElement([faker.string.alpha(20), null]), scheduledTime: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, venue: faker.helpers.arrayElement([faker.string.alpha(20), null]), winnerProgressionMatches: [], winnerProgressionMatchId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])}, matchId: faker.number.int({min: undefined, max: undefined}), refereeId: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), nationality: faker.string.alpha(20), nativeName: faker.string.alpha(20), photoUrl: faker.string.alpha(20), roundReferees: [], updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, user: {address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, dateOfBirth: faker.string.alpha(20), deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), email: faker.string.alpha(20), gender: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isForeigner: faker.datatype.boolean(), lolMaxTier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), needCheck: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), phoneNumber: faker.string.alpha(20), pushToken: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.string.alpha(20), signature: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), unique_key: faker.string.alpha(20), university: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, userId: faker.number.int({min: undefined, max: undefined})}, refereeId: faker.number.int({min: undefined, max: undefined}), roundId: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), scheduledDate: faker.helpers.arrayElement([faker.string.alpha(20), null]), scheduledTime: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, venue: faker.helpers.arrayElement([faker.string.alpha(20), null])})), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), id: faker.number.int({min: undefined, max: undefined}), participantRosterCount: faker.number.int({min: undefined, max: undefined}), stageId: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, useGroups: faker.datatype.boolean()}, competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.number.int({min: undefined, max: undefined}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), stageOrder: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), ...overrideResponse})

export const getBatchNotiControllerSendBatchNotiResponseMock = (overrideResponse: Partial< Result > = {}): Result => ({result: faker.datatype.boolean(), ...overrideResponse})

export const getBankAccountsControllerFindMyBankAccountsResponseMock = (): BankAccount[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({account: faker.string.alpha(20), bankCode: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), oriSeqNo: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), verified: faker.datatype.boolean()})))

export const getBankAccountsControllerStartAuthResponseMock = (overrideResponse: Partial< BankAccount > = {}): BankAccount => ({account: faker.string.alpha(20), bankCode: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), oriSeqNo: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), verified: faker.datatype.boolean(), ...overrideResponse})

export const getBankAccountsControllerVerifyResponseMock = (overrideResponse: Partial< BankAccount > = {}): BankAccount => ({account: faker.string.alpha(20), bankCode: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), oriSeqNo: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), verified: faker.datatype.boolean(), ...overrideResponse})

export const getBankAccountsControllerCheckAccountNameResponseMock = (overrideResponse: Partial< BankAccount | void > = {}): BankAccount | void => ({account: faker.string.alpha(20), bankCode: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), oriSeqNo: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20), verified: faker.datatype.boolean(), ...overrideResponse})

export const getCheckinControllerFindMyCheckinResponseMock = (overrideResponse: Partial< Checkin > = {}): Checkin => ({competitionId: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameType: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.number.int({min: undefined, max: undefined}), userId: faker.string.alpha(20), ...overrideResponse})

export const getCheckinControllerScanQrAndCheckInResponseMock = (overrideResponse: Partial< Checkin > = {}): Checkin => ({competitionId: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameType: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.number.int({min: undefined, max: undefined}), userId: faker.string.alpha(20), ...overrideResponse})

export const getQrControllerGetOrCreateQrCodeResponseMock = (overrideResponse: Partial< Qr > = {}): Qr => ({competitionId: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, displayDate: `${faker.date.past().toISOString().split('.')[0]}Z`, gameType: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), qrImageBase64: faker.string.alpha(20), ...overrideResponse})

export const getQrControllerGetQrCodeByGameAndDateResponseMock = (): Qr[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({competitionId: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, displayDate: `${faker.date.past().toISOString().split('.')[0]}Z`, gameType: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), qrImageBase64: faker.string.alpha(20)})))

export const getRsoControllerCallbackResponseMock = (): RsoControllerCallback200 => ({})

export const getProCheckinControllerGenerateCodeResponseMock = (overrideResponse: Partial< DynamicQrDto > = {}): DynamicQrDto => ({code: faker.string.alpha(20), expiredAt: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})

export const getProCheckinControllerAuthenticateCodeResponseMock = (overrideResponse: Partial< void | ProCheckin > = {}): void | ProCheckin => ({checkinAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), checkinId: faker.string.alpha(20), code: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), matchId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), refereeId: faker.string.alpha(20), status: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), userId: faker.string.alpha(20), ...overrideResponse})

export const getProCheckinControllerDenyCheckinResponseMock = (overrideResponse: Partial< void | ProCheckin > = {}): void | ProCheckin => ({checkinAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), checkinId: faker.string.alpha(20), code: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), matchId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), refereeId: faker.string.alpha(20), status: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), userId: faker.string.alpha(20), ...overrideResponse})

export const getProCompetitionControllerFindAllResponseMock = (): ProCompetition[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({competitionId: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, eventEndDate: `${faker.date.past().toISOString().split('.')[0]}Z`, eventStartDate: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), organizer: faker.string.alpha(20), regisitrationStartDate: `${faker.date.past().toISOString().split('.')[0]}Z`, registrationEndDate: `${faker.date.past().toISOString().split('.')[0]}Z`, title: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})))

export const getProHistoryControllerGetHistoriesResponseMock = (overrideResponse: Partial< ProHistoryDto > = {}): ProHistoryDto => ({histories: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({averageAssists: faker.number.int({min: undefined, max: undefined}), averageDeaths: faker.number.int({min: undefined, max: undefined}), averageKDA: faker.number.int({min: undefined, max: undefined}), averageKills: faker.number.int({min: undefined, max: undefined}), competition: {competitionId: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, eventEndDate: `${faker.date.past().toISOString().split('.')[0]}Z`, eventStartDate: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), organizer: faker.string.alpha(20), regisitrationStartDate: `${faker.date.past().toISOString().split('.')[0]}Z`, registrationEndDate: `${faker.date.past().toISOString().split('.')[0]}Z`, title: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, competitionId: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, finalPlacement: faker.string.alpha(20), id: faker.string.alpha(20), individualAward: faker.helpers.arrayElement([faker.string.alpha(20), null]), losses: faker.number.int({min: undefined, max: undefined}), matches: faker.number.int({min: undefined, max: undefined}), proPlayerId: faker.string.alpha(20), teamName: faker.string.alpha(20), totalAssists: faker.number.int({min: undefined, max: undefined}), totalDeaths: faker.number.int({min: undefined, max: undefined}), totalKills: faker.number.int({min: undefined, max: undefined}), userId: faker.string.alpha(20), winRate: faker.string.alpha(20), wins: faker.number.int({min: undefined, max: undefined})})), ...overrideResponse})

export const getProHistoryControllerGetHistoriesByProPlayerIdResponseMock = (overrideResponse: Partial< ProHistoryDto > = {}): ProHistoryDto => ({histories: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({averageAssists: faker.number.int({min: undefined, max: undefined}), averageDeaths: faker.number.int({min: undefined, max: undefined}), averageKDA: faker.number.int({min: undefined, max: undefined}), averageKills: faker.number.int({min: undefined, max: undefined}), competition: {competitionId: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, eventEndDate: `${faker.date.past().toISOString().split('.')[0]}Z`, eventStartDate: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), organizer: faker.string.alpha(20), regisitrationStartDate: `${faker.date.past().toISOString().split('.')[0]}Z`, registrationEndDate: `${faker.date.past().toISOString().split('.')[0]}Z`, title: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, competitionId: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, finalPlacement: faker.string.alpha(20), id: faker.string.alpha(20), individualAward: faker.helpers.arrayElement([faker.string.alpha(20), null]), losses: faker.number.int({min: undefined, max: undefined}), matches: faker.number.int({min: undefined, max: undefined}), proPlayerId: faker.string.alpha(20), teamName: faker.string.alpha(20), totalAssists: faker.number.int({min: undefined, max: undefined}), totalDeaths: faker.number.int({min: undefined, max: undefined}), totalKills: faker.number.int({min: undefined, max: undefined}), userId: faker.string.alpha(20), winRate: faker.string.alpha(20), wins: faker.number.int({min: undefined, max: undefined})})), ...overrideResponse})

export const getProMatchRefereeControllerAssignRefereeResponseMock = (overrideResponse: Partial< ProMatchReferee > = {}): ProMatchReferee => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), matchId: faker.string.alpha(20), matchNote: faker.helpers.arrayElement([faker.string.alpha(20), null]), refereeId: faker.string.alpha(20), role: faker.helpers.arrayElement(['main','assistant'] as const), submittedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), teamName: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})

export const getProMatchRefereeControllerReplaceRefereeByIdsResponseMock = (overrideResponse: Partial< ProMatchReferee > = {}): ProMatchReferee => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), matchId: faker.string.alpha(20), matchNote: faker.helpers.arrayElement([faker.string.alpha(20), null]), refereeId: faker.string.alpha(20), role: faker.helpers.arrayElement(['main','assistant'] as const), submittedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), teamName: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})

export const getProMatchRefereeControllerSubmitMatchByIdsResponseMock = (overrideResponse: Partial< ProMatchReferee > = {}): ProMatchReferee => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), matchId: faker.string.alpha(20), matchNote: faker.helpers.arrayElement([faker.string.alpha(20), null]), refereeId: faker.string.alpha(20), role: faker.helpers.arrayElement(['main','assistant'] as const), submittedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), teamName: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})

export const getProMatchRefereeControllerSubmitMatchNoteByIdsResponseMock = (overrideResponse: Partial< ProMatchReferee > = {}): ProMatchReferee => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), matchId: faker.string.alpha(20), matchNote: faker.helpers.arrayElement([faker.string.alpha(20), null]), refereeId: faker.string.alpha(20), role: faker.helpers.arrayElement(['main','assistant'] as const), submittedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), teamName: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})

export const getProMatchRefereeControllerGetMyAssignmentsResponseMock = (): ProMatchReferee[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), matchId: faker.string.alpha(20), matchNote: faker.helpers.arrayElement([faker.string.alpha(20), null]), refereeId: faker.string.alpha(20), role: faker.helpers.arrayElement(['main','assistant'] as const), submittedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), teamName: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})))

export const getVersionControllerUpdateVersionInfoResponseMock = (overrideResponse: Partial< AppVersion > = {}): AppVersion => ({appStoreUrl: faker.string.alpha(20), forceUpdate: faker.datatype.boolean(), id: faker.number.int({min: undefined, max: undefined}), latestVersion: faker.string.alpha(20), minimumVersion: faker.string.alpha(20), playStoreUrl: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updateMessage: faker.string.alpha(20), ...overrideResponse})

export const getBracketControllerCreateBracketResponseMock = (overrideResponse: Partial< BracketControllerCreateBracket200 | void > = {}): BracketControllerCreateBracket200 | void => ({data: faker.helpers.arrayElement([{bracketGroups: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20)})), bracketId: faker.number.int({min: undefined, max: undefined})}, undefined]), ...overrideResponse})

export const getBracketGroupControllerGetBracketGroupOverviewResponseMock = (overrideResponse: Partial< BracketGroupControllerGetBracketGroupOverview200 > = {}): BracketGroupControllerGetBracketGroupOverview200 => ({data: faker.helpers.arrayElement([{matches: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.number.int({min: undefined, max: undefined}), matchNumber: faker.number.int({min: undefined, max: undefined}), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), participants: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({rosterId: faker.number.int({min: undefined, max: undefined})})), undefined]), prevMatchIds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.number.int({min: undefined, max: undefined}))), undefined]), roundId: faker.number.int({min: undefined, max: undefined}), scheduledDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), scheduledTime: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined])})), rounds: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({bestOf: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), roundNumber: faker.number.int({min: undefined, max: undefined}), scheduledDate: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined]), scheduledTime: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.string.alpha(20), null]), undefined])}))}, undefined]), ...overrideResponse})

export const getMatchControllerGetSetResultsResponseMock = (overrideResponse: Partial< MatchControllerGetSetResults200 > = {}): MatchControllerGetSetResults200 => ({data: faker.helpers.arrayElement([{resultMemo: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), resultSubmittedAt: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), resultSubmitterId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), setResults: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.number.int({min: undefined, max: undefined}), screenshotUrl: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), setNumber: faker.number.int({min: undefined, max: undefined}), winnerRosterId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}))}, undefined]), ...overrideResponse})

export const getMatchControllerGetSetParticipantStatsResponseMock = (overrideResponse: Partial< MatchControllerGetSetParticipantStats200 > = {}): MatchControllerGetSetParticipantStats200 => ({data: faker.helpers.arrayElement([{setResults: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.number.int({min: undefined, max: undefined}), setNumber: faker.number.int({min: undefined, max: undefined}), setParticipantStats: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.number.int({min: undefined, max: undefined}), participant: {rosterId: faker.number.int({min: undefined, max: undefined}), slotNumber: faker.number.int({min: undefined, max: undefined})}, statPayload: {}}))}))}, undefined]), ...overrideResponse})

export const getMatchControllerUploadSetResultScreenshotResponseMock = (overrideResponse: Partial< MatchControllerUploadSetResultScreenshot200 | void > = {}): MatchControllerUploadSetResultScreenshot200 | void => ({data: faker.helpers.arrayElement([{screenshotUrl: faker.string.alpha(20)}, undefined]), ...overrideResponse})

export const getRosterControllerCreateRosterResponseMock = (overrideResponse: Partial< RosterControllerCreateRoster200 | void > = {}): RosterControllerCreateRoster200 | void => ({data: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), ...overrideResponse})

export const getRosterControllerFindAllByQueryResponseMock = (): RosterControllerFindAllByQuery200AllOf => ({...data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), undefined]), meta: faker.helpers.arrayElement([{pagination: faker.helpers.arrayElement([{limit: faker.number.int({min: undefined, max: undefined}), page: faker.number.int({min: undefined, max: undefined}), totalItems: faker.number.int({min: undefined, max: undefined}), totalPages: faker.number.int({min: undefined, max: undefined})}, undefined])}, undefined])})

export const getRosterControllerFindOneResponseMock = (overrideResponse: Partial< RosterControllerFindOne200 > = {}): RosterControllerFindOne200 => ({data: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), ...overrideResponse})

export const getRefereeControllerFindAllResponseMock = (): Referee[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({authority: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), firstName: faker.string.alpha(20), gameName: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), issuedDate: `${faker.date.past().toISOString().split('.')[0]}Z`, issuedNumber: faker.string.alpha(20), lastName: faker.string.alpha(20), license: faker.string.alpha(20), matchReferees: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), match: {bestOf: faker.number.int({min: undefined, max: undefined}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), loserProgressionMatches: [], loserProgressionMatchId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), matchNumber: faker.number.int({min: undefined, max: undefined}), matchParticipants: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), isWinner: faker.datatype.boolean(), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchParticipantId: faker.number.int({min: undefined, max: undefined}), matchSetResult: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: [], screenshotUrl: faker.helpers.arrayElement([faker.string.alpha(20), null]), setNumber: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, winnerRoster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, winnerRosterId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])}, matchSetResultId: faker.number.int({min: undefined, max: undefined}), statPayload: {}, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, rosterId: faker.number.int({min: undefined, max: undefined}), slotNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), matchReferees: [], matchSetResults: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchParticipant: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), isWinner: faker.datatype.boolean(), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: [], roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, rosterId: faker.number.int({min: undefined, max: undefined}), slotNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, matchParticipantId: faker.number.int({min: undefined, max: undefined}), matchSetResultId: faker.number.int({min: undefined, max: undefined}), statPayload: {}, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), screenshotUrl: faker.helpers.arrayElement([faker.string.alpha(20), null]), setNumber: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, winnerRoster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, winnerRosterId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])})), name: faker.helpers.arrayElement([faker.string.alpha(20), null]), resultMemo: faker.helpers.arrayElement([faker.string.alpha(20), null]), resultSubmittedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), resultSubmitter: {address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, dateOfBirth: faker.string.alpha(20), deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), email: faker.string.alpha(20), gender: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isForeigner: faker.datatype.boolean(), lolMaxTier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), needCheck: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), phoneNumber: faker.string.alpha(20), pushToken: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.string.alpha(20), signature: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), unique_key: faker.string.alpha(20), university: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, resultSubmitterId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), round: {bestOf: faker.number.int({min: undefined, max: undefined}), bracketGroup: {bracket: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), format: faker.string.alpha(20), formatOptions: {}, groups: [], id: faker.number.int({min: undefined, max: undefined}), participantRosterCount: faker.number.int({min: undefined, max: undefined}), stage: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.number.int({min: undefined, max: undefined}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), stageOrder: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, stageId: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, useGroups: faker.datatype.boolean()}, bracketId: faker.number.int({min: undefined, max: undefined}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), participants: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({bracketGroupId: faker.number.int({min: undefined, max: undefined}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, rosterId: faker.number.int({min: undefined, max: undefined}), seed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), rounds: [], updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, bracketGroupId: faker.number.int({min: undefined, max: undefined}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matches: [], name: faker.helpers.arrayElement([faker.string.alpha(20), null]), roundNumber: faker.number.int({min: undefined, max: undefined}), roundReferees: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), refereeId: faker.number.int({min: undefined, max: undefined}), roundId: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), scheduledDate: faker.helpers.arrayElement([faker.string.alpha(20), null]), scheduledTime: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, venue: faker.helpers.arrayElement([faker.string.alpha(20), null])}, roundId: faker.number.int({min: undefined, max: undefined}), scheduledDate: faker.helpers.arrayElement([faker.string.alpha(20), null]), scheduledTime: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, venue: faker.helpers.arrayElement([faker.string.alpha(20), null]), winnerProgressionMatches: [], winnerProgressionMatchId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])}, matchId: faker.number.int({min: undefined, max: undefined}), refereeId: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), nationality: faker.string.alpha(20), nativeName: faker.string.alpha(20), photoUrl: faker.string.alpha(20), roundReferees: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), refereeId: faker.number.int({min: undefined, max: undefined}), round: {bestOf: faker.number.int({min: undefined, max: undefined}), bracketGroup: {bracket: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), format: faker.string.alpha(20), formatOptions: {}, groups: [], id: faker.number.int({min: undefined, max: undefined}), participantRosterCount: faker.number.int({min: undefined, max: undefined}), stage: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.number.int({min: undefined, max: undefined}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), stageOrder: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, stageId: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, useGroups: faker.datatype.boolean()}, bracketId: faker.number.int({min: undefined, max: undefined}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), participants: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({bracketGroupId: faker.number.int({min: undefined, max: undefined}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, rosterId: faker.number.int({min: undefined, max: undefined}), seed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), rounds: [], updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, bracketGroupId: faker.number.int({min: undefined, max: undefined}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matches: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({bestOf: faker.number.int({min: undefined, max: undefined}), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), loserProgressionMatches: [], loserProgressionMatchId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), matchNumber: faker.number.int({min: undefined, max: undefined}), matchParticipants: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), isWinner: faker.datatype.boolean(), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchParticipantId: faker.number.int({min: undefined, max: undefined}), matchSetResult: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: [], screenshotUrl: faker.helpers.arrayElement([faker.string.alpha(20), null]), setNumber: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, winnerRoster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, winnerRosterId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])}, matchSetResultId: faker.number.int({min: undefined, max: undefined}), statPayload: {}, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, rosterId: faker.number.int({min: undefined, max: undefined}), slotNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), matchReferees: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), matchId: faker.number.int({min: undefined, max: undefined}), refereeId: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), matchSetResults: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), matchParticipant: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.number.int({min: undefined, max: undefined}), isWinner: faker.datatype.boolean(), matchId: faker.number.int({min: undefined, max: undefined}), matchSetParticipantStats: [], roster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, rosterId: faker.number.int({min: undefined, max: undefined}), slotNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, matchParticipantId: faker.number.int({min: undefined, max: undefined}), matchSetResultId: faker.number.int({min: undefined, max: undefined}), statPayload: {}, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), screenshotUrl: faker.helpers.arrayElement([faker.string.alpha(20), null]), setNumber: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, winnerRoster: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), gameType: {competition: {alias: faker.string.alpha(20), applicationEndedAt: faker.string.alpha(20), applicationForm: faker.string.alpha(20), applicationStartedAt: faker.string.alpha(20), competitionEndedAt: faker.string.alpha(20), competitionId: faker.string.alpha(20), competitionStartedAt: faker.string.alpha(20), description: faker.string.alpha(20), fullTitle: faker.string.alpha(20), gameTypes: [], id: faker.number.int({min: undefined, max: undefined}), minorConsent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), notice: faker.string.alpha(20), organizationTitle: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), organizer: faker.string.alpha(20), organizerUrl: faker.string.alpha(20), parentCompetitionId: faker.helpers.arrayElement([faker.string.alpha(20), null]), privacyPolicy: faker.string.alpha(20), status: faker.string.alpha(20), thumbnail: faker.string.alpha(20), title: faker.string.alpha(20), workspace: faker.helpers.arrayElement([{createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), id: faker.string.alpha(20), name: faker.string.alpha(20), organization: {createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.string.alpha(20), name: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, organizationId: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), workspaceId: faker.helpers.arrayElement([faker.string.alpha(20), null])}, competitionId: faker.string.alpha(20), gameId: faker.string.alpha(20), gameMode: faker.helpers.arrayElement(['SOLO','TEAM'] as const), gameTypeId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isRosterConfirmed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), maxSubstituteCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.string.alpha(20), numberOfTeams: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), playersPerTeam: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, gameTypeId: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), player: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, deletedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, final: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gameCardId: faker.string.alpha(20), gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), playerId: faker.string.alpha(20), position: faker.string.alpha(20), reason: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, status: faker.string.alpha(20), teamCode: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, playerId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), team: {competitionId: faker.string.alpha(20), confirmed: faker.datatype.boolean(), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, gameId: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), leaderId: faker.string.alpha(20), name: faker.string.alpha(20), organization: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), roster: undefined, teamCode: faker.string.alpha(20), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, teamId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`}, winnerRosterId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])})), name: faker.helpers.arrayElement([faker.string.alpha(20), null]), resultMemo: faker.helpers.arrayElement([faker.string.alpha(20), null]), resultSubmittedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), resultSubmitter: {address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, dateOfBirth: faker.string.alpha(20), deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), email: faker.string.alpha(20), gender: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isForeigner: faker.datatype.boolean(), lolMaxTier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), needCheck: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), phoneNumber: faker.string.alpha(20), pushToken: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.string.alpha(20), signature: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), unique_key: faker.string.alpha(20), university: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, resultSubmitterId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), roundId: faker.number.int({min: undefined, max: undefined}), scheduledDate: faker.helpers.arrayElement([faker.string.alpha(20), null]), scheduledTime: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, venue: faker.helpers.arrayElement([faker.string.alpha(20), null]), winnerProgressionMatches: [], winnerProgressionMatchId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null])})), name: faker.helpers.arrayElement([faker.string.alpha(20), null]), roundNumber: faker.number.int({min: undefined, max: undefined}), roundReferees: [], scheduledDate: faker.helpers.arrayElement([faker.string.alpha(20), null]), scheduledTime: faker.helpers.arrayElement([faker.string.alpha(20), null]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, venue: faker.helpers.arrayElement([faker.string.alpha(20), null])}, roundId: faker.number.int({min: undefined, max: undefined}), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, user: {address: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, dateOfBirth: faker.string.alpha(20), deletedAt: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), email: faker.string.alpha(20), gender: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), isForeigner: faker.datatype.boolean(), lolMaxTier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), name: faker.string.alpha(20), needCheck: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), phoneNumber: faker.string.alpha(20), pushToken: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), role: faker.string.alpha(20), signature: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), unique_key: faker.string.alpha(20), university: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, userId: faker.string.alpha(20)}, userId: faker.number.int({min: undefined, max: undefined})})))


export const getAppControllerGetHelloMockHandler = (overrideResponse?: string | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<string> | string)) => {
  return http.get('*/healthcheck', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAppControllerGetHelloResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAppControllerTestRoleMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/test/role', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getTeamsControllerFindMyTeamMockHandler = (overrideResponse?: MyTeamResonse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<MyTeamResonse> | MyTeamResonse)) => {
  return http.get('*/teams/me', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getTeamsControllerFindMyTeamResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getTeamsControllerFindOneMockHandler = (overrideResponse?: MyTeamResonse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<MyTeamResonse> | MyTeamResonse)) => {
  return http.get('*/teams/:teamCode', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getTeamsControllerFindOneResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getTeamsControllerFindAllMockHandler = (overrideResponse?: Team[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Team[]> | Team[])) => {
  return http.get('*/teams', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getTeamsControllerFindAllResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getTeamsControllerCreateMockHandler = (overrideResponse?: Team | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Team> | Team)) => {
  return http.post('*/teams', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getTeamsControllerCreateResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getTeamsControllerFindPlayersMockHandler = (overrideResponse?: Player[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Player[]> | Player[])) => {
  return http.get('*/teams/:teamCode/players', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getTeamsControllerFindPlayersResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getTeamsControllerAddPlayerMockHandler = (overrideResponse?: Player | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Player> | Player)) => {
  return http.post('*/teams/:teamCode/players', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getTeamsControllerAddPlayerResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getTeamsControllerCheckTeamNameExistMockHandler = (overrideResponse?: CheckTeamNameResponse | void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CheckTeamNameResponse | void> | CheckTeamNameResponse | void)) => {
  return http.post('*/teams/teamName', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getTeamsControllerCheckTeamNameExistResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getTeamsControllerConfirmMockHandler = (overrideResponse?: Team | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Team> | Team)) => {
  return http.post('*/teams/:teamCode/confirm', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getTeamsControllerConfirmResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getTeamsControllerUpdatePositionMockHandler = (overrideResponse?: Player | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Player> | Player)) => {
  return http.put('*/teams/:teamCode/:userId/position', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getTeamsControllerUpdatePositionResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getTeamsControllerRemovePlayerMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/teams/:userId', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getTeamsControllerRemoveTeamMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/teams/entry/:teamCode', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getPlayersControllerUpdateStatusMockHandler = (overrideResponse?: Player | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Player> | Player)) => {
  return http.put('*/players/:userId/status', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPlayersControllerUpdateStatusResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPlayersControllerGetMyRegistrationInfoMockHandler = (overrideResponse?: Player | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Player> | Player)) => {
  return http.get('*/players/me', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPlayersControllerGetMyRegistrationInfoResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPlayersControllerChangeCardStatusMockHandler = (overrideResponse?: PlayersControllerChangeCardStatus200 | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<PlayersControllerChangeCardStatus200> | PlayersControllerChangeCardStatus200)) => {
  return http.put('*/players/gameCards/:userId/status', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPlayersControllerChangeCardStatusResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPlayersControllerCompleteSoloApplicationMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<void> | void)) => {
  return http.put('*/players/:playerId/complete', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getPlayersControllerAddPlayerMockHandler = (overrideResponse?: Player | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Player> | Player)) => {
  return http.post('*/players', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPlayersControllerAddPlayerResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUserControllerFindMeMockHandler = (overrideResponse?: User | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<User> | User)) => {
  return http.get('*/user/me', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUserControllerFindMeResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUserControllerFindOneMockHandler = (overrideResponse?: User | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<User> | User)) => {
  return http.get('*/user/:userId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUserControllerFindOneResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUserControllerUpdateUserInfoMockHandler = (overrideResponse?: User | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<User> | User)) => {
  return http.put('*/user/:userId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUserControllerUpdateUserInfoResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUserControllerRemoveUserMockHandler = (overrideResponse?: User | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<User> | User)) => {
  return http.delete('*/user/:userId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUserControllerRemoveUserResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUserControllerGetDemoUserMockHandler = (overrideResponse?: SignInWithPassResponseDto | void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<SignInWithPassResponseDto | void> | SignInWithPassResponseDto | void)) => {
  return http.post('*/user/demo', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUserControllerGetDemoUserResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUserControllerAddUserWithNameMockHandler = (overrideResponse?: SignInWithPassResponseDto | UserControllerAddUserWithName201 | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<SignInWithPassResponseDto | UserControllerAddUserWithName201> | SignInWithPassResponseDto | UserControllerAddUserWithName201)) => {
  return http.post('*/user/register', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUserControllerAddUserWithNameResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUserControllerSignInWithPassMockHandler = (overrideResponse?: SignInWithPassResponseDto | UserControllerSignInWithPass201 | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<SignInWithPassResponseDto | UserControllerSignInWithPass201> | SignInWithPassResponseDto | UserControllerSignInWithPass201)) => {
  return http.post('*/user/pass/:uid', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUserControllerSignInWithPassResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUserControllerRefreshRoleMockHandler = (overrideResponse?: RefreshUserRoleResponseDto | UserControllerRefreshRole201 | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<RefreshUserRoleResponseDto | UserControllerRefreshRole201> | RefreshUserRoleResponseDto | UserControllerRefreshRole201)) => {
  return http.post('*/user/roles/refresh', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUserControllerRefreshRoleResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUserControllerSignInWithClerkMockHandler = (overrideResponse?: UserControllerSignInWithClerk200 | void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<UserControllerSignInWithClerk200 | void> | UserControllerSignInWithClerk200 | void)) => {
  return http.post('*/user/clerk/sign-in', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUserControllerSignInWithClerkResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPassControllerPassMockHandler = (overrideResponse?: PassInfo | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PassInfo> | PassInfo)) => {
  return http.get('*/id/pass/:uid', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPassControllerPassResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPushControllerSendPushMockHandler = (overrideResponse?: SendPushDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<SendPushDto> | SendPushDto)) => {
  return http.post('*/push/:pushToken', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPushControllerSendPushResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getFileUploadControllerUploadFileMockHandler = (overrideResponse?: File | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<File> | File)) => {
  return http.post('*/files/upload/:tag', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getFileUploadControllerUploadFileResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getFileUploadControllerGetMyFilesMockHandler = (overrideResponse?: File[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<File[]> | File[])) => {
  return http.get('*/files/me', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getFileUploadControllerGetMyFilesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getFileUploadControllerDownloadFileMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/files/:fileId', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getFileUploadControllerDownloadFileByUserIdAndTagMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/files/:userId/:tag', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getFileUploadControllerUpdateStatusMockHandler = (overrideResponse?: File | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<File> | File)) => {
  return http.put('*/files/status/:userId/:tag', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getFileUploadControllerUpdateStatusResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getLogoControllerUploadLogoMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/logo', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getLogoControllerGetLogoMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/logo/:fileId', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getAgreementsControllerFindParentKeyMockHandler = (overrideResponse?: AgreementsWithToken | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<AgreementsWithToken> | AgreementsWithToken)) => {
  return http.get('*/agreements/parents/:parentKey', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAgreementsControllerFindParentKeyResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAgreementsControllerUpdateParentDataByKeyMockHandler = (overrideResponse?: Agreements | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Agreements> | Agreements)) => {
  return http.put('*/agreements/parents/:parentKey', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAgreementsControllerUpdateParentDataByKeyResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAgreementsControllerFindOneMockHandler = (overrideResponse?: Agreements | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Agreements> | Agreements)) => {
  return http.get('*/agreements/:userId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAgreementsControllerFindOneResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAgreementsControllerUpdateAgreementMockHandler = (overrideResponse?: Agreements | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Agreements> | Agreements)) => {
  return http.put('*/agreements/:userId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAgreementsControllerUpdateAgreementResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAgreementsControllerCreateMockHandler = (overrideResponse?: Agreements | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Agreements> | Agreements)) => {
  return http.post('*/agreements', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAgreementsControllerCreateResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGameControllerFindMyGameCardsMockHandler = (overrideResponse?: GameControllerFindMyGameCards200Item[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GameControllerFindMyGameCards200Item[]> | GameControllerFindMyGameCards200Item[])) => {
  return http.get('*/games/me', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGameControllerFindMyGameCardsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGameControllerFindLOLUserMockHandler = (overrideResponse?: LolUser | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<LolUser> | LolUser)) => {
  return http.get('*/games/lol/users/:name', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGameControllerFindLOLUserResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGameControllerFindFCOnlineUserMockHandler = (overrideResponse?: FcOnlineUser | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<FcOnlineUser> | FcOnlineUser)) => {
  return http.get('*/games/fconline/users/:name', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGameControllerFindFCOnlineUserResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGameControllerFindBrawlStarsUserMockHandler = (overrideResponse?: BrawlStarsUser | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<BrawlStarsUser> | BrawlStarsUser)) => {
  return http.get('*/games/brawlstars/users/:tag', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGameControllerFindBrawlStarsUserResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGameControllerGetUserInfoMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/games/eternalreturn/users/:name', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getGameControllerFindAllGameMetasMockHandler = (overrideResponse?: GameMetaDto[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GameMetaDto[]> | GameMetaDto[])) => {
  return http.get('*/games/meta', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGameControllerFindAllGameMetasResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGameControllerFindGameMetaByGameIdMockHandler = (overrideResponse?: GameMetaDto | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GameMetaDto> | GameMetaDto)) => {
  return http.get('*/games/meta/:gameId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGameControllerFindGameMetaByGameIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGameControllerCreateBrawlStarsCardMockHandler = (overrideResponse?: BrawlStarsCard | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<BrawlStarsCard> | BrawlStarsCard)) => {
  return http.post('*/games/brawlstars/cards', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGameControllerCreateBrawlStarsCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGameControllerCreateEternalReturnsCardMockHandler = (overrideResponse?: BrawlStarsCard | EternalReturnsCard | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<BrawlStarsCard | EternalReturnsCard> | BrawlStarsCard | EternalReturnsCard)) => {
  return http.post('*/games/eternalreturn/cards', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGameControllerCreateEternalReturnsCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGameControllerCreateKingOfFightersCardMockHandler = (overrideResponse?: KingOfFightersCard | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<KingOfFightersCard> | KingOfFightersCard)) => {
  return http.post('*/games/kingoffighters/cards', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGameControllerCreateKingOfFightersCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGameControllerCreateEFootballCardMockHandler = (overrideResponse?: EFootballCard | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<EFootballCard> | EFootballCard)) => {
  return http.post('*/games/efootball/cards', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGameControllerCreateEFootballCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGameControllerCreatePokemonUniteCardMockHandler = (overrideResponse?: PokemonUniteCard | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PokemonUniteCard> | PokemonUniteCard)) => {
  return http.post('*/games/pokemonunite/cards', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGameControllerCreatePokemonUniteCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGameControllerCreateLolCardMockHandler = (overrideResponse?: LolCard | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<LolCard> | LolCard)) => {
  return http.post('*/games/lol/cards', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGameControllerCreateLolCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGameControllerCreateFCOnlineCardMockHandler = (overrideResponse?: FCOnlineCard | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<FCOnlineCard> | FCOnlineCard)) => {
  return http.post('*/games/fconline/cards', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGameControllerCreateFCOnlineCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGameControllerCreateValCardMockHandler = (overrideResponse?: ValCard | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ValCard> | ValCard)) => {
  return http.post('*/games/val/cards', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGameControllerCreateValCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGameControllerCreateOWCardMockHandler = (overrideResponse?: OWCard | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<OWCard> | OWCard)) => {
  return http.post('*/games/overwatch/cards', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGameControllerCreateOWCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGameControllerCreatePubgMobileCardMockHandler = (overrideResponse?: PubgMobileCard | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PubgMobileCard> | PubgMobileCard)) => {
  return http.post('*/games/pubgmobile/cards', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGameControllerCreatePubgMobileCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGameControllerCreateStreetFighterCardMockHandler = (overrideResponse?: StreetFighterCard | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<StreetFighterCard> | StreetFighterCard)) => {
  return http.post('*/games/streetfighter/cards', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGameControllerCreateStreetFighterCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGameControllerCreateKartRiderCardMockHandler = (overrideResponse?: KartRiderCard | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<KartRiderCard> | KartRiderCard)) => {
  return http.post('*/games/kartrider/cards', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGameControllerCreateKartRiderCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGameControllerFindOWCardMockHandler = (overrideResponse?: OWCard | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<OWCard> | OWCard)) => {
  return http.get('*/games/overwatch/cards/:gameCardId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGameControllerFindOWCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGameControllerFindBrawlStarsCardMockHandler = (overrideResponse?: BrawlStarsCard | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<BrawlStarsCard> | BrawlStarsCard)) => {
  return http.get('*/games/brawlstars/cards/:gameCardId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGameControllerFindBrawlStarsCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGameControllerFindPubgMobileCardMockHandler = (overrideResponse?: PubgMobileCard | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PubgMobileCard> | PubgMobileCard)) => {
  return http.get('*/games/pubgmobile/cards/:gameCardId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGameControllerFindPubgMobileCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGameControllerFindStreetFighterCardMockHandler = (overrideResponse?: StreetFighterCard | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<StreetFighterCard> | StreetFighterCard)) => {
  return http.get('*/games/streetfighter/cards/:gameCardId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGameControllerFindStreetFighterCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGameControllerFindKartRiderCardMockHandler = (overrideResponse?: KartRiderCard | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<KartRiderCard> | KartRiderCard)) => {
  return http.get('*/games/kartrider/cards/:gameCardId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGameControllerFindKartRiderCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGameControllerFindEternalReturnsCardMockHandler = (overrideResponse?: EternalReturnsCard | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<EternalReturnsCard> | EternalReturnsCard)) => {
  return http.get('*/games/eternalreturn/cards/:gameCardId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGameControllerFindEternalReturnsCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGameControllerFindValCardMockHandler = (overrideResponse?: ValCard | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ValCard> | ValCard)) => {
  return http.get('*/games/val/cards/:gameCardId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGameControllerFindValCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGameControllerFindLolCardMockHandler = (overrideResponse?: LolCard | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<LolCard> | LolCard)) => {
  return http.get('*/games/lol/cards/:gameCardId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGameControllerFindLolCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGameControllerFindKingOfFightersCardMockHandler = (overrideResponse?: KingOfFightersCard | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<KingOfFightersCard> | KingOfFightersCard)) => {
  return http.get('*/games/kingoffighters/cards/:gameCardId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGameControllerFindKingOfFightersCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGameControllerFindEFootballCardMockHandler = (overrideResponse?: EFootballCard | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<EFootballCard> | EFootballCard)) => {
  return http.get('*/games/efootball/cards/:gameCardId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGameControllerFindEFootballCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGameControllerFindPokemonUniteCardMockHandler = (overrideResponse?: PokemonUniteCard | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PokemonUniteCard> | PokemonUniteCard)) => {
  return http.get('*/games/pokemonunite/cards/:gameCardId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGameControllerFindPokemonUniteCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGameControllerFindFCOnlineCardMockHandler = (overrideResponse?: FCOnlineCard | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<FCOnlineCard> | FCOnlineCard)) => {
  return http.get('*/games/fconline/cards/:gameCardId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGameControllerFindFCOnlineCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGameControllerRefreshCardMockHandler = (overrideResponse?: GameControllerRefreshCard200 | GameControllerRefreshCard201 | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<GameControllerRefreshCard200 | GameControllerRefreshCard201> | GameControllerRefreshCard200 | GameControllerRefreshCard201)) => {
  return http.post('*/games/refresh/:gameCardId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGameControllerRefreshCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGameControllerUpdateNicknameMockHandler = (overrideResponse?: GameControllerUpdateNickname200 | GameControllerUpdateNickname201 | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<GameControllerUpdateNickname200 | GameControllerUpdateNickname201> | GameControllerUpdateNickname200 | GameControllerUpdateNickname201)) => {
  return http.post('*/games/updateNickname/:gameCardId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGameControllerUpdateNicknameResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGameControllerRemoveGameCardMockHandler = (overrideResponse?: LolCard | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<LolCard> | LolCard)) => {
  return http.delete('*/games/cards/:gameCardId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGameControllerRemoveGameCardResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGameControllerUploadFileMockHandler = (overrideResponse?: GameControllerUploadFile201 | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<GameControllerUploadFile201> | GameControllerUploadFile201)) => {
  return http.post('*/games/screenshots/:gameCardId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGameControllerUploadFileResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGameControllerDownloadFileByUserIdAndTagMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/games/screenshots/:gameCardId', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getGameControllerUpdateRankAndTierMockHandler = (overrideResponse?: GameControllerUpdateRankAndTier200 | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<GameControllerUpdateRankAndTier200> | GameControllerUpdateRankAndTier200)) => {
  return http.put('*/games/rankandtier/:gameCardId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGameControllerUpdateRankAndTierResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCompetitionsControllerFindAllMockHandler = (overrideResponse?: Competition[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Competition[]> | Competition[])) => {
  return http.get('*/competitions', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCompetitionsControllerFindAllResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCompetitionsControllerCreateMockHandler = (overrideResponse?: Competition | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Competition> | Competition)) => {
  return http.post('*/competitions', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCompetitionsControllerCreateResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCompetitionsControllerFindHostingCompetitionsMockHandler = (overrideResponse?: CompetitionsControllerFindHostingCompetitions200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<CompetitionsControllerFindHostingCompetitions200> | CompetitionsControllerFindHostingCompetitions200)) => {
  return http.get('*/competitions/my', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCompetitionsControllerFindHostingCompetitionsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCompetitionsControllerFindAllGroupMockHandler = (overrideResponse?: CompetitionsControllerFindAllGroup200Item[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<CompetitionsControllerFindAllGroup200Item[]> | CompetitionsControllerFindAllGroup200Item[])) => {
  return http.get('*/competitions/groups', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCompetitionsControllerFindAllGroupResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCompetitionsControllerFindByParentIdMockHandler = (overrideResponse?: ChildCompetitionDto[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ChildCompetitionDto[]> | ChildCompetitionDto[])) => {
  return http.get('*/competitions/groups/:parentId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCompetitionsControllerFindByParentIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCompetitionsControllerFindOneMockHandler = (overrideResponse?: CompetitionDto | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<CompetitionDto> | CompetitionDto)) => {
  return http.get('*/competitions/:competitionId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCompetitionsControllerFindOneResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCompetitionsControllerModifyMockHandler = (overrideResponse?: Competition | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Competition> | Competition)) => {
  return http.put('*/competitions/:competitionId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCompetitionsControllerModifyResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCompetitionsControllerDeleteMockHandler = (overrideResponse?: Competition | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<Competition> | Competition)) => {
  return http.delete('*/competitions/:competitionId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCompetitionsControllerDeleteResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCompetitionsControllerFindGameModesMockHandler = (overrideResponse?: GameTypeDto[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GameTypeDto[]> | GameTypeDto[])) => {
  return http.get('*/competitions/:competitionId/game-modes', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCompetitionsControllerFindGameModesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCompetitionsControllerModifyGameTypeDetailMockHandler = (overrideResponse?: CompetitionsControllerModifyGameTypeDetail200 | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<CompetitionsControllerModifyGameTypeDetail200> | CompetitionsControllerModifyGameTypeDetail200)) => {
  return http.patch('*/competitions/game-types/:gameTypeId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCompetitionsControllerModifyGameTypeDetailResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getStageControllerCreateStageMockHandler = (overrideResponse?: StageControllerCreateStage200 | void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<StageControllerCreateStage200 | void> | StageControllerCreateStage200 | void)) => {
  return http.post('*/stages', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getStageControllerCreateStageResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getStageControllerGetStagesMockHandler = (overrideResponse?: StageControllerGetStages200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<StageControllerGetStages200> | StageControllerGetStages200)) => {
  return http.get('*/stages', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getStageControllerGetStagesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getStageControllerGetStageMockHandler = (overrideResponse?: StageControllerGetStage200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<StageControllerGetStage200> | StageControllerGetStage200)) => {
  return http.get('*/stages/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getStageControllerGetStageResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getStageControllerUpdateStageMockHandler = (overrideResponse?: StageControllerUpdateStage200 | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<StageControllerUpdateStage200> | StageControllerUpdateStage200)) => {
  return http.patch('*/stages/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getStageControllerUpdateStageResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getStageControllerDeleteStageMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/stages/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getBatchNotiControllerSendBatchNotiMockHandler = (overrideResponse?: Result | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Result> | Result)) => {
  return http.post('*/batchNoti', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getBatchNotiControllerSendBatchNotiResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getBankAccountsControllerFindMyBankAccountsMockHandler = (overrideResponse?: BankAccount[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<BankAccount[]> | BankAccount[])) => {
  return http.get('*/bankaccounts/me', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getBankAccountsControllerFindMyBankAccountsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getBankAccountsControllerStartAuthMockHandler = (overrideResponse?: BankAccount | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<BankAccount> | BankAccount)) => {
  return http.post('*/bankaccounts/startAuth', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getBankAccountsControllerStartAuthResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getBankAccountsControllerVerifyMockHandler = (overrideResponse?: BankAccount | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<BankAccount> | BankAccount)) => {
  return http.post('*/bankaccounts/verify', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getBankAccountsControllerVerifyResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getBankAccountsControllerCheckAccountNameMockHandler = (overrideResponse?: BankAccount | void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<BankAccount | void> | BankAccount | void)) => {
  return http.post('*/bankaccounts/validateAccount', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getBankAccountsControllerCheckAccountNameResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCheckinControllerFindMyCheckinMockHandler = (overrideResponse?: Checkin | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Checkin> | Checkin)) => {
  return http.get('*/checkin/me', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCheckinControllerFindMyCheckinResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCheckinControllerScanQrAndCheckInMockHandler = (overrideResponse?: Checkin | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Checkin> | Checkin)) => {
  return http.post('*/checkin', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCheckinControllerScanQrAndCheckInResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getQrControllerGetOrCreateQrCodeMockHandler = (overrideResponse?: Qr | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Qr> | Qr)) => {
  return http.post('*/qr', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getQrControllerGetOrCreateQrCodeResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getQrControllerGetQrCodeByGameAndDateMockHandler = (overrideResponse?: Qr[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Qr[]> | Qr[])) => {
  return http.get('*/qr', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getQrControllerGetQrCodeByGameAndDateResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getRsoControllerCallbackMockHandler = (overrideResponse?: RsoControllerCallback200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<RsoControllerCallback200> | RsoControllerCallback200)) => {
  return http.get('*/rso/callback', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getRsoControllerCallbackResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getProCheckinControllerFindMyCheckinMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/pro/checkins/me', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getProCheckinControllerFindByCodeMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/pro/checkins/results/:code', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getProCheckinControllerGenerateCodeMockHandler = (overrideResponse?: DynamicQrDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<DynamicQrDto> | DynamicQrDto)) => {
  return http.post('*/pro/checkins', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getProCheckinControllerGenerateCodeResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getProCheckinControllerPeakUserInfoByCodeMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/pro/checkins/peak/:code', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getProCheckinControllerAuthenticateCodeMockHandler = (overrideResponse?: void | ProCheckin | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void | ProCheckin> | void | ProCheckin)) => {
  return http.post('*/pro/checkins/approve', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getProCheckinControllerAuthenticateCodeResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getProCheckinControllerDenyCheckinMockHandler = (overrideResponse?: void | ProCheckin | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void | ProCheckin> | void | ProCheckin)) => {
  return http.post('*/pro/checkins/deny', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getProCheckinControllerDenyCheckinResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getProProfileControllerGetMyProfileMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/pro/profiles/me', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getProMatchControllerFindAllMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/pro/competitions/:competitionId/matches', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getProMatchControllerFindOneMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/pro/competitions/:competitionId/matches/:matchId', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getProMatchControllerGetMatchSetsMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/pro/competitions/:competitionId/matches/:matchId/sets', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getProMatchControllerManageMatchSetsMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<void> | void)) => {
  return http.put('*/pro/competitions/:competitionId/matches/:matchId/sets', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getProMatchControllerSubmitMatchMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<void> | void)) => {
  return http.put('*/pro/competitions/:competitionId/matches/:matchId/submit', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getProCompetitionControllerFindAllMockHandler = (overrideResponse?: ProCompetition[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ProCompetition[]> | ProCompetition[])) => {
  return http.get('*/pro/competitions', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getProCompetitionControllerFindAllResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getProPhotoControllerGetPlayerPhotoMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/pro/photo/players/:userId', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getProPhotoControllerGetMyPhotoMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/pro/photo/:type', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getProHistoryControllerGetHistoriesMockHandler = (overrideResponse?: ProHistoryDto | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ProHistoryDto> | ProHistoryDto)) => {
  return http.get('*/pro/history', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getProHistoryControllerGetHistoriesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getProHistoryControllerGetHistoriesByProPlayerIdMockHandler = (overrideResponse?: ProHistoryDto | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ProHistoryDto> | ProHistoryDto)) => {
  return http.get('*/pro/history/:proPlayerId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getProHistoryControllerGetHistoriesByProPlayerIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getProMatchGameControllerGetGamesMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/pro/matches/:matchId/games', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getProMatchGameControllerDeleteGameMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/pro/matches/:matchId/games/:gameSet', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getProMatchSetsControllerGetMatchSetsMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/pro/matches/:matchId/sets', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getProMatchSetsControllerManageMatchSetsMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<void> | void)) => {
  return http.put('*/pro/matches/:matchId/sets', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getProMatchSetsControllerGetMatchSetMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/pro/matches/:matchId/sets/:setNumber', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getProMatchSetsControllerUpdateSetScreenshotMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<void> | void)) => {
  return http.put('*/pro/matches/:matchId/sets/:setNumber/screenshot', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getProMatchSetsControllerDeleteSetScreenshotMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/pro/matches/:matchId/sets/:setNumber/screenshot', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getProMatchRefereeControllerAssignRefereeMockHandler = (overrideResponse?: ProMatchReferee | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ProMatchReferee> | ProMatchReferee)) => {
  return http.post('*/pro/match-referees/assign-referee', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getProMatchRefereeControllerAssignRefereeResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getProMatchRefereeControllerReplaceRefereeByIdsMockHandler = (overrideResponse?: ProMatchReferee | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ProMatchReferee> | ProMatchReferee)) => {
  return http.post('*/pro/match-referees/replace-referee', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getProMatchRefereeControllerReplaceRefereeByIdsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getProMatchRefereeControllerSubmitMatchByIdsMockHandler = (overrideResponse?: ProMatchReferee | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ProMatchReferee> | ProMatchReferee)) => {
  return http.post('*/pro/match-referees/submit', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getProMatchRefereeControllerSubmitMatchByIdsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getProMatchRefereeControllerSubmitMatchNoteByIdsMockHandler = (overrideResponse?: ProMatchReferee | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ProMatchReferee> | ProMatchReferee)) => {
  return http.post('*/pro/match-referees/note', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getProMatchRefereeControllerSubmitMatchNoteByIdsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getProMatchRefereeControllerGetMyAssignmentsMockHandler = (overrideResponse?: ProMatchReferee[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ProMatchReferee[]> | ProMatchReferee[])) => {
  return http.get('*/pro/match-referees/my-assignments', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getProMatchRefereeControllerGetMyAssignmentsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getProMatchRefereeControllerRemoveRefereeMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/pro/match-referees/remove-referee/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getVersionControllerCheckVersionMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/version/check', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getVersionControllerUpdateVersionInfoMockHandler = (overrideResponse?: AppVersion | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<AppVersion> | AppVersion)) => {
  return http.put('*/version', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getVersionControllerUpdateVersionInfoResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getBracketControllerCreateBracketMockHandler = (overrideResponse?: BracketControllerCreateBracket200 | void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<BracketControllerCreateBracket200 | void> | BracketControllerCreateBracket200 | void)) => {
  return http.post('*/brackets', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getBracketControllerCreateBracketResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getBracketControllerInitializeBracketStructureMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/brackets/:bracketId/structure', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getBracketControllerDeleteBracketMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/brackets/:bracketId', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getBracketGroupControllerGetBracketGroupOverviewMockHandler = (overrideResponse?: BracketGroupControllerGetBracketGroupOverview200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<BracketGroupControllerGetBracketGroupOverview200> | BracketGroupControllerGetBracketGroupOverview200)) => {
  return http.get('*/bracket-groups/:bracketGroupId/overview', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getBracketGroupControllerGetBracketGroupOverviewResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getBracketGroupControllerAddParticipantsMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/bracket-groups/:bracketGroupId/participants', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getMatchControllerGetSetResultsMockHandler = (overrideResponse?: MatchControllerGetSetResults200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<MatchControllerGetSetResults200> | MatchControllerGetSetResults200)) => {
  return http.get('*/matches/:matchId/set-results', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getMatchControllerGetSetResultsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getMatchControllerSaveSetResultsMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<void> | void)) => {
  return http.patch('*/matches/:matchId/set-results', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getMatchControllerGetSetParticipantStatsMockHandler = (overrideResponse?: MatchControllerGetSetParticipantStats200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<MatchControllerGetSetParticipantStats200> | MatchControllerGetSetParticipantStats200)) => {
  return http.get('*/matches/:matchId/set-participant-stats', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getMatchControllerGetSetParticipantStatsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getMatchControllerSaveSetParticipantStatsMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<void> | void)) => {
  return http.patch('*/matches/:matchId/set-participant-stats', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getMatchControllerUploadSetResultScreenshotMockHandler = (overrideResponse?: MatchControllerUploadSetResultScreenshot200 | void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<MatchControllerUploadSetResultScreenshot200 | void> | MatchControllerUploadSetResultScreenshot200 | void)) => {
  return http.post('*/matches/:matchId/set-results/:setResultId/screenshots', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getMatchControllerUploadSetResultScreenshotResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getRosterControllerCreateRosterMockHandler = (overrideResponse?: RosterControllerCreateRoster200 | void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<RosterControllerCreateRoster200 | void> | RosterControllerCreateRoster200 | void)) => {
  return http.post('*/roster', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getRosterControllerCreateRosterResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getRosterControllerFindAllByQueryMockHandler = (overrideResponse?: RosterControllerFindAllByQuery200AllOf | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<RosterControllerFindAllByQuery200AllOf> | RosterControllerFindAllByQuery200AllOf)) => {
  return http.get('*/roster', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getRosterControllerFindAllByQueryResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getRosterControllerCreateBulkRosterMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/roster/bulk', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getRosterControllerFindOneMockHandler = (overrideResponse?: RosterControllerFindOne200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<RosterControllerFindOne200> | RosterControllerFindOne200)) => {
  return http.get('*/roster/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getRosterControllerFindOneResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getRosterControllerSoftRemoveMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/roster/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getRefereeControllerFindAllMockHandler = (overrideResponse?: Referee[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Referee[]> | Referee[])) => {
  return http.get('*/referee', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getRefereeControllerFindAllResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getPlayIDAPIMock = () => [
  getAppControllerGetHelloMockHandler(),
  getAppControllerTestRoleMockHandler(),
  getTeamsControllerFindMyTeamMockHandler(),
  getTeamsControllerFindOneMockHandler(),
  getTeamsControllerFindAllMockHandler(),
  getTeamsControllerCreateMockHandler(),
  getTeamsControllerFindPlayersMockHandler(),
  getTeamsControllerAddPlayerMockHandler(),
  getTeamsControllerCheckTeamNameExistMockHandler(),
  getTeamsControllerConfirmMockHandler(),
  getTeamsControllerUpdatePositionMockHandler(),
  getTeamsControllerRemovePlayerMockHandler(),
  getTeamsControllerRemoveTeamMockHandler(),
  getPlayersControllerUpdateStatusMockHandler(),
  getPlayersControllerGetMyRegistrationInfoMockHandler(),
  getPlayersControllerChangeCardStatusMockHandler(),
  getPlayersControllerCompleteSoloApplicationMockHandler(),
  getPlayersControllerAddPlayerMockHandler(),
  getUserControllerFindMeMockHandler(),
  getUserControllerFindOneMockHandler(),
  getUserControllerUpdateUserInfoMockHandler(),
  getUserControllerRemoveUserMockHandler(),
  getUserControllerGetDemoUserMockHandler(),
  getUserControllerAddUserWithNameMockHandler(),
  getUserControllerSignInWithPassMockHandler(),
  getUserControllerRefreshRoleMockHandler(),
  getUserControllerSignInWithClerkMockHandler(),
  getPassControllerPassMockHandler(),
  getPushControllerSendPushMockHandler(),
  getFileUploadControllerUploadFileMockHandler(),
  getFileUploadControllerGetMyFilesMockHandler(),
  getFileUploadControllerDownloadFileMockHandler(),
  getFileUploadControllerDownloadFileByUserIdAndTagMockHandler(),
  getFileUploadControllerUpdateStatusMockHandler(),
  getLogoControllerUploadLogoMockHandler(),
  getLogoControllerGetLogoMockHandler(),
  getAgreementsControllerFindParentKeyMockHandler(),
  getAgreementsControllerUpdateParentDataByKeyMockHandler(),
  getAgreementsControllerFindOneMockHandler(),
  getAgreementsControllerUpdateAgreementMockHandler(),
  getAgreementsControllerCreateMockHandler(),
  getGameControllerFindMyGameCardsMockHandler(),
  getGameControllerFindLOLUserMockHandler(),
  getGameControllerFindFCOnlineUserMockHandler(),
  getGameControllerFindBrawlStarsUserMockHandler(),
  getGameControllerGetUserInfoMockHandler(),
  getGameControllerFindAllGameMetasMockHandler(),
  getGameControllerFindGameMetaByGameIdMockHandler(),
  getGameControllerCreateBrawlStarsCardMockHandler(),
  getGameControllerCreateEternalReturnsCardMockHandler(),
  getGameControllerCreateKingOfFightersCardMockHandler(),
  getGameControllerCreateEFootballCardMockHandler(),
  getGameControllerCreatePokemonUniteCardMockHandler(),
  getGameControllerCreateLolCardMockHandler(),
  getGameControllerCreateFCOnlineCardMockHandler(),
  getGameControllerCreateValCardMockHandler(),
  getGameControllerCreateOWCardMockHandler(),
  getGameControllerCreatePubgMobileCardMockHandler(),
  getGameControllerCreateStreetFighterCardMockHandler(),
  getGameControllerCreateKartRiderCardMockHandler(),
  getGameControllerFindOWCardMockHandler(),
  getGameControllerFindBrawlStarsCardMockHandler(),
  getGameControllerFindPubgMobileCardMockHandler(),
  getGameControllerFindStreetFighterCardMockHandler(),
  getGameControllerFindKartRiderCardMockHandler(),
  getGameControllerFindEternalReturnsCardMockHandler(),
  getGameControllerFindValCardMockHandler(),
  getGameControllerFindLolCardMockHandler(),
  getGameControllerFindKingOfFightersCardMockHandler(),
  getGameControllerFindEFootballCardMockHandler(),
  getGameControllerFindPokemonUniteCardMockHandler(),
  getGameControllerFindFCOnlineCardMockHandler(),
  getGameControllerRefreshCardMockHandler(),
  getGameControllerUpdateNicknameMockHandler(),
  getGameControllerRemoveGameCardMockHandler(),
  getGameControllerUploadFileMockHandler(),
  getGameControllerDownloadFileByUserIdAndTagMockHandler(),
  getGameControllerUpdateRankAndTierMockHandler(),
  getCompetitionsControllerFindAllMockHandler(),
  getCompetitionsControllerCreateMockHandler(),
  getCompetitionsControllerFindHostingCompetitionsMockHandler(),
  getCompetitionsControllerFindAllGroupMockHandler(),
  getCompetitionsControllerFindByParentIdMockHandler(),
  getCompetitionsControllerFindOneMockHandler(),
  getCompetitionsControllerModifyMockHandler(),
  getCompetitionsControllerDeleteMockHandler(),
  getCompetitionsControllerFindGameModesMockHandler(),
  getCompetitionsControllerModifyGameTypeDetailMockHandler(),
  getStageControllerCreateStageMockHandler(),
  getStageControllerGetStagesMockHandler(),
  getStageControllerGetStageMockHandler(),
  getStageControllerUpdateStageMockHandler(),
  getStageControllerDeleteStageMockHandler(),
  getBatchNotiControllerSendBatchNotiMockHandler(),
  getBankAccountsControllerFindMyBankAccountsMockHandler(),
  getBankAccountsControllerStartAuthMockHandler(),
  getBankAccountsControllerVerifyMockHandler(),
  getBankAccountsControllerCheckAccountNameMockHandler(),
  getCheckinControllerFindMyCheckinMockHandler(),
  getCheckinControllerScanQrAndCheckInMockHandler(),
  getQrControllerGetOrCreateQrCodeMockHandler(),
  getQrControllerGetQrCodeByGameAndDateMockHandler(),
  getRsoControllerCallbackMockHandler(),
  getProCheckinControllerFindMyCheckinMockHandler(),
  getProCheckinControllerFindByCodeMockHandler(),
  getProCheckinControllerGenerateCodeMockHandler(),
  getProCheckinControllerPeakUserInfoByCodeMockHandler(),
  getProCheckinControllerAuthenticateCodeMockHandler(),
  getProCheckinControllerDenyCheckinMockHandler(),
  getProProfileControllerGetMyProfileMockHandler(),
  getProMatchControllerFindAllMockHandler(),
  getProMatchControllerFindOneMockHandler(),
  getProMatchControllerGetMatchSetsMockHandler(),
  getProMatchControllerManageMatchSetsMockHandler(),
  getProMatchControllerSubmitMatchMockHandler(),
  getProCompetitionControllerFindAllMockHandler(),
  getProPhotoControllerGetPlayerPhotoMockHandler(),
  getProPhotoControllerGetMyPhotoMockHandler(),
  getProHistoryControllerGetHistoriesMockHandler(),
  getProHistoryControllerGetHistoriesByProPlayerIdMockHandler(),
  getProMatchGameControllerGetGamesMockHandler(),
  getProMatchGameControllerDeleteGameMockHandler(),
  getProMatchSetsControllerGetMatchSetsMockHandler(),
  getProMatchSetsControllerManageMatchSetsMockHandler(),
  getProMatchSetsControllerGetMatchSetMockHandler(),
  getProMatchSetsControllerUpdateSetScreenshotMockHandler(),
  getProMatchSetsControllerDeleteSetScreenshotMockHandler(),
  getProMatchRefereeControllerAssignRefereeMockHandler(),
  getProMatchRefereeControllerReplaceRefereeByIdsMockHandler(),
  getProMatchRefereeControllerSubmitMatchByIdsMockHandler(),
  getProMatchRefereeControllerSubmitMatchNoteByIdsMockHandler(),
  getProMatchRefereeControllerGetMyAssignmentsMockHandler(),
  getProMatchRefereeControllerRemoveRefereeMockHandler(),
  getVersionControllerCheckVersionMockHandler(),
  getVersionControllerUpdateVersionInfoMockHandler(),
  getBracketControllerCreateBracketMockHandler(),
  getBracketControllerInitializeBracketStructureMockHandler(),
  getBracketControllerDeleteBracketMockHandler(),
  getBracketGroupControllerGetBracketGroupOverviewMockHandler(),
  getBracketGroupControllerAddParticipantsMockHandler(),
  getMatchControllerGetSetResultsMockHandler(),
  getMatchControllerSaveSetResultsMockHandler(),
  getMatchControllerGetSetParticipantStatsMockHandler(),
  getMatchControllerSaveSetParticipantStatsMockHandler(),
  getMatchControllerUploadSetResultScreenshotMockHandler(),
  getRosterControllerCreateRosterMockHandler(),
  getRosterControllerFindAllByQueryMockHandler(),
  getRosterControllerCreateBulkRosterMockHandler(),
  getRosterControllerFindOneMockHandler(),
  getRosterControllerSoftRemoveMockHandler(),
  getRefereeControllerFindAllMockHandler()]
