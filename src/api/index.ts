/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Play.ID API
 * Esports API for Play.ID
 * OpenAPI spec version: 1.0
 */
import type {
  AddParticipantsDto,
  AddUserBody,
  Agreements,
  AgreementsControllerFindOneParams,
  AgreementsWithToken,
  AppVersion,
  AssignRefereeDto,
  AuthenticateCheckinDto,
  BankAccount,
  BracketControllerCreateBracket200,
  BracketGroupControllerGetBracketGroupOverview200,
  BrawlStarsCard,
  BrawlStarsUser,
  ChangeCardStatusDto,
  ChangeFileStatusDto,
  CheckAccountDto,
  CheckTeamNameDto,
  CheckTeamNameResponse,
  Checkin,
  CheckinControllerFindMyCheckinParams,
  ChildCompetitionDto,
  ClerkSignInResponseDto,
  Competition,
  CompetitionDto,
  CompetitionsControllerFindAllGroup200Item,
  CompetitionsControllerFindHostingCompetitions200,
  CompetitionsControllerModifyGameTypeDetail200,
  CreateAgreementDto,
  CreateBracketDto,
  CreateBrawlStarsCardDto,
  CreateBulkRosterDto,
  CreateCompetitionDto,
  CreateEFootballCardDto,
  CreateEternalReturnsCardDto,
  CreateFCOnlineCardDto,
  CreateKartCardDto,
  CreateKingOfFightersCardDto,
  CreateLolCardDto,
  CreateOWCardDto,
  CreatePokemonUniteCardDto,
  CreatePubgMobileCardDto,
  CreateQrDto,
  CreateRosterDto,
  CreateStageDto,
  CreateStreetFighterCardDto,
  CreateTeamDto,
  CreateValCardDto,
  DemoBody,
  DenyCheckinDto,
  DynamicQrDto,
  EFootballCard,
  EternalReturnsCard,
  FCOnlineCard,
  FcOnlineUser,
  File,
  FileUploadControllerDownloadFileByUserIdAndTagParams,
  FileUploadControllerGetMyFilesParams,
  FileUploadControllerUploadFileBody,
  FileUploadControllerUploadFileParams,
  GameControllerFindMyGameCards200Item,
  GameControllerRefreshCard200,
  GameControllerRefreshCard201,
  GameControllerUpdateNickname200,
  GameControllerUpdateNickname201,
  GameControllerUpdateRankAndTier200,
  GameControllerUploadFile201,
  GameControllerUploadFileBody,
  GameMetaDto,
  GameTypeDto,
  InitializeBracketStructureDto,
  KartRiderCard,
  KingOfFightersCard,
  LogoControllerUploadLogoBody,
  LolCard,
  LolUser,
  ManageMatchSetsDto,
  MatchControllerGetSetParticipantStats200,
  MatchControllerGetSetResults200,
  MatchControllerUploadSetResultScreenshot200,
  ModifyCompetitionDto,
  MyTeamResonse,
  OWCard,
  PassInfo,
  Player,
  PlayersControllerChangeCardStatus200,
  PlayersControllerGetMyRegistrationInfoParams,
  PokemonUniteCard,
  ProCheckin,
  ProCheckinControllerPeakUserInfoByCodeParams,
  ProCompetition,
  ProHistoryDto,
  ProMatchReferee,
  ProMatchRefereeControllerGetMyAssignmentsParams,
  ProPhotoControllerGetPlayerPhotoParams,
  PubgMobileCard,
  Qr,
  QrControllerGetQrCodeByGameAndDateParams,
  Referee,
  RefreshUserRoleResponseDto,
  RegisterPlayerDto,
  ReplaceRefereeDto,
  Result,
  RosterControllerCreateRoster200,
  RosterControllerFindAllByQuery200AllOf,
  RosterControllerFindAllByQueryParams,
  RosterControllerFindOne200,
  RsoControllerCallback200,
  RsoControllerCallbackParams,
  SaveSetParticipantStatsDto,
  SaveSetResultsDto,
  ScanQrDto,
  SendBatchNotiDto,
  SendPushDto,
  SignInWithClerkTokenDto,
  SignInWithPassResponseDto,
  StageControllerCreateStage200,
  StageControllerGetStage200,
  StageControllerGetStages200,
  StageControllerGetStagesParams,
  StageControllerUpdateStage200,
  StartAuthDto,
  StreetFighterCard,
  SubmitMatchDto,
  SubmitMatchNoteDto,
  Team,
  TeamsControllerFindMyTeamParams,
  TeamsControllerRemovePlayerParams,
  TeamsControllerRemoveTeamParams,
  UpdateGameTypeDto,
  UpdateMatchSetScreenshotDto,
  UpdateNicknameDto,
  UpdateParentAgreementDto,
  UpdatePositionDto,
  UpdateRankAndTierDto,
  UpdateStageDto,
  UpdateStatusDto,
  UpdateUserDto,
  User,
  UserControllerAddUserWithName201,
  UserControllerRefreshRole201,
  UserControllerSignInWithPass201,
  ValCard,
  VerifyAuthDto,
  VersionControllerCheckVersionParams,
} from "./model";
import { customInstance } from "../lib/axios";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const appControllerGetHello = (
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<string>(
    { url: `/healthcheck`, method: "GET" },
    options
  );
};

export const appControllerTestRole = (
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>({ url: `/test/role`, method: "GET" }, options);
};

/**
 * @summary get my team
 */
export const teamsControllerFindMyTeam = (
  params: TeamsControllerFindMyTeamParams,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<MyTeamResonse>(
    { url: `/teams/me`, method: "GET", params },
    options
  );
};

/**
 * @summary get team by teamCode
 */
export const teamsControllerFindOne = (
  teamCode: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<MyTeamResonse>(
    { url: `/teams/${teamCode}`, method: "GET" },
    options
  );
};

/**
 * @summary find all teams
 */
export const teamsControllerFindAll = (
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Team[]>({ url: `/teams`, method: "GET" }, options);
};

/**
 * @summary create a new team
 */
export const teamsControllerCreate = (
  createTeamDto: CreateTeamDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Team>(
    {
      url: `/teams`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createTeamDto,
    },
    options
  );
};

/**
 * @summary get players in team
 */
export const teamsControllerFindPlayers = (
  teamCode: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Player[]>(
    { url: `/teams/${teamCode}/players`, method: "GET" },
    options
  );
};

/**
 * @summary add player to team
 */
export const teamsControllerAddPlayer = (
  teamCode: string,
  registerPlayerDto: RegisterPlayerDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Player>(
    {
      url: `/teams/${teamCode}/players`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: registerPlayerDto,
    },
    options
  );
};

/**
 * @summary check team name exist
 */
export const teamsControllerCheckTeamNameExist = (
  checkTeamNameDto: CheckTeamNameDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<CheckTeamNameResponse | void>(
    {
      url: `/teams/teamName`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: checkTeamNameDto,
    },
    options
  );
};

/**
 * @summary confirm team
 */
export const teamsControllerConfirm = (
  teamCode: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Team>(
    { url: `/teams/${teamCode}/confirm`, method: "POST" },
    options
  );
};

/**
 * @summary update player position
 */
export const teamsControllerUpdatePosition = (
  teamCode: string,
  userId: string,
  updatePositionDto: UpdatePositionDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Player>(
    {
      url: `/teams/${teamCode}/${userId}/position`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updatePositionDto,
    },
    options
  );
};

/**
 * @summary remove player by userId
 */
export const teamsControllerRemovePlayer = (
  userId: string,
  params: TeamsControllerRemovePlayerParams,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/teams/${userId}`, method: "DELETE", params },
    options
  );
};

/**
 * @summary remove team
 */
export const teamsControllerRemoveTeam = (
  teamCode: string,
  params: TeamsControllerRemoveTeamParams,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/teams/entry/${teamCode}`, method: "DELETE", params },
    options
  );
};

/**
 * @summary update player status
 */
export const playersControllerUpdateStatus = (
  userId: string,
  updateStatusDto: UpdateStatusDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Player>(
    {
      url: `/players/${userId}/status`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateStatusDto,
    },
    options
  );
};

/**
 * @summary get my registration info
 */
export const playersControllerGetMyRegistrationInfo = (
  params: PlayersControllerGetMyRegistrationInfoParams,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Player>(
    { url: `/players/me`, method: "GET", params },
    options
  );
};

/**
 * @summary change game card status
 */
export const playersControllerChangeCardStatus = (
  userId: string,
  changeCardStatusDto: ChangeCardStatusDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<PlayersControllerChangeCardStatus200>(
    {
      url: `/players/gameCards/${userId}/status`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: changeCardStatusDto,
    },
    options
  );
};

/**
 * @summary Complete solo player application
 */
export const playersControllerCompleteSoloApplication = (
  playerId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/players/${playerId}/complete`, method: "PUT" },
    options
  );
};

/**
 * @summary add solo player
 */
export const playersControllerAddPlayer = (
  registerPlayerDto: RegisterPlayerDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Player>(
    {
      url: `/players`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: registerPlayerDto,
    },
    options
  );
};

/**
 * @summary get my user info
 */
export const userControllerFindMe = (
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<User>({ url: `/user/me`, method: "GET" }, options);
};

/**
 * @summary get user info
 */
export const userControllerFindOne = (
  userId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<User>(
    { url: `/user/${userId}`, method: "GET" },
    options
  );
};

/**
 * @summary update user info
 */
export const userControllerUpdateUserInfo = (
  userId: string,
  updateUserDto: UpdateUserDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<User>(
    {
      url: `/user/${userId}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateUserDto,
    },
    options
  );
};

/**
 * @summary [DEBUG]: remove user info
 */
export const userControllerRemoveUser = (
  userId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<User>(
    { url: `/user/${userId}`, method: "DELETE" },
    options
  );
};

/**
 * @summary create user info with pass
 */
export const userControllerGetDemoUser = (
  demoBody: DemoBody,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<SignInWithPassResponseDto | void>(
    {
      url: `/user/demo`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: demoBody,
    },
    options
  );
};

/**
 * @summary create user info with name and birthday
 */
export const userControllerAddUserWithName = (
  addUserBody: AddUserBody,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<
    SignInWithPassResponseDto | UserControllerAddUserWithName201
  >(
    {
      url: `/user/register`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: addUserBody,
    },
    options
  );
};

/**
 * @summary create user info with pass
 */
export const userControllerSignInWithPass = (
  uid: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<
    SignInWithPassResponseDto | UserControllerSignInWithPass201
  >({ url: `/user/pass/${uid}`, method: "POST" }, options);
};

/**
 * @summary Refresh user roles and token
 */
export const userControllerRefreshRole = (
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<
    RefreshUserRoleResponseDto | UserControllerRefreshRole201
  >({ url: `/user/roles/refresh`, method: "POST" }, options);
};

/**
 * Clerk Token Sign In
 */
export const userControllerSignInWithClerk = (
  signInWithClerkTokenDto: SignInWithClerkTokenDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<ClerkSignInResponseDto>(
    {
      url: `/user/clerk/sign-in`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: signInWithClerkTokenDto,
    },
    options
  );
};

/**
 * @summary get my team
 */
export const passControllerPass = (
  uid: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<PassInfo>(
    { url: `/id/pass/${uid}`, method: "GET" },
    options
  );
};

/**
 * @summary send push notification
 */
export const pushControllerSendPush = (
  pushToken: string,
  sendPushDto: SendPushDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<SendPushDto>(
    {
      url: `/push/${pushToken}`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: sendPushDto,
    },
    options
  );
};

export const fileUploadControllerUploadFile = (
  tag: string,
  fileUploadControllerUploadFileBody: FileUploadControllerUploadFileBody,
  params: FileUploadControllerUploadFileParams,
  options?: SecondParameter<typeof customInstance>
) => {
  const formData = new FormData();
  if (fileUploadControllerUploadFileBody.file !== undefined) {
    formData.append("file", fileUploadControllerUploadFileBody.file);
  }

  return customInstance<File>(
    {
      url: `/files/upload/${tag}`,
      method: "POST",
      headers: { "Content-Type": "multipart/form-data" },
      data: formData,
      params,
    },
    options
  );
};

export const fileUploadControllerGetMyFiles = (
  params?: FileUploadControllerGetMyFilesParams,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<File[]>(
    { url: `/files/me`, method: "GET", params },
    options
  );
};

export const fileUploadControllerDownloadFile = (
  fileId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/files/${fileId}`, method: "GET" },
    options
  );
};

export const fileUploadControllerDownloadFileByUserIdAndTag = (
  userId: string,
  tag: string,
  params: FileUploadControllerDownloadFileByUserIdAndTagParams,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/files/${userId}/${tag}`, method: "GET", params },
    options
  );
};

/**
 * @summary update file status
 */
export const fileUploadControllerUpdateStatus = (
  userId: string,
  tag: string,
  changeFileStatusDto: ChangeFileStatusDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<File>(
    {
      url: `/files/status/${userId}/${tag}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: changeFileStatusDto,
    },
    options
  );
};

export const logoControllerUploadLogo = (
  logoControllerUploadLogoBody: LogoControllerUploadLogoBody,
  options?: SecondParameter<typeof customInstance>
) => {
  const formData = new FormData();
  if (logoControllerUploadLogoBody.file !== undefined) {
    formData.append("file", logoControllerUploadLogoBody.file);
  }

  return customInstance<void>(
    {
      url: `/logo`,
      method: "POST",
      headers: { "Content-Type": "multipart/form-data" },
      data: formData,
    },
    options
  );
};

export const logoControllerGetLogo = (
  fileId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/logo/${fileId}`, method: "GET" },
    options
  );
};

/**
 * @summary get aggrement by parent key
 */
export const agreementsControllerFindParentKey = (
  parentKey: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<AgreementsWithToken>(
    { url: `/agreements/parents/${parentKey}`, method: "GET" },
    options
  );
};

/**
 * @summary update parent data by key
 */
export const agreementsControllerUpdateParentDataByKey = (
  parentKey: string,
  updateParentAgreementDto: UpdateParentAgreementDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Agreements>(
    {
      url: `/agreements/parents/${parentKey}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateParentAgreementDto,
    },
    options
  );
};

/**
 * @summary get agreement info
 */
export const agreementsControllerFindOne = (
  userId: string,
  params: AgreementsControllerFindOneParams,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Agreements>(
    { url: `/agreements/${userId}`, method: "GET", params },
    options
  );
};

/**
 * @summary update agreement info
 */
export const agreementsControllerUpdateAgreement = (
  userId: string,
  createAgreementDto: CreateAgreementDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Agreements>(
    {
      url: `/agreements/${userId}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: createAgreementDto,
    },
    options
  );
};

/**
 * @summary create agreement info
 */
export const agreementsControllerCreate = (
  createAgreementDto: CreateAgreementDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Agreements>(
    {
      url: `/agreements`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createAgreementDto,
    },
    options
  );
};

/**
 * @summary get my game cards
 */
export const gameControllerFindMyGameCards = (
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<GameControllerFindMyGameCards200Item[]>(
    { url: `/games/me`, method: "GET" },
    options
  );
};

/**
 * @summary get LOL user info
 */
export const gameControllerFindLOLUser = (
  name: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<LolUser>(
    { url: `/games/lol/users/${name}`, method: "GET" },
    options
  );
};

/**
 * @summary get FC Online user info
 */
export const gameControllerFindFCOnlineUser = (
  name: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<FcOnlineUser>(
    { url: `/games/fconline/users/${name}`, method: "GET" },
    options
  );
};

/**
 * @summary get Brawl Stars user info
 */
export const gameControllerFindBrawlStarsUser = (
  tag: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<BrawlStarsUser>(
    { url: `/games/brawlstars/users/${tag}`, method: "GET" },
    options
  );
};

export const gameControllerGetUserInfo = (
  name: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/games/eternalreturn/users/${name}`, method: "GET" },
    options
  );
};

/**
 * @summary Get all game meta information
 */
export const gameControllerFindAllGameMetas = (
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<GameMetaDto[]>(
    { url: `/games/meta`, method: "GET" },
    options
  );
};

/**
 * @summary Get game meta information by game ID
 */
export const gameControllerFindGameMetaByGameId = (
  gameId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<GameMetaDto>(
    { url: `/games/meta/${gameId}`, method: "GET" },
    options
  );
};

/**
 * @summary create Brawl Stars card
 */
export const gameControllerCreateBrawlStarsCard = (
  createBrawlStarsCardDto: CreateBrawlStarsCardDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<BrawlStarsCard>(
    {
      url: `/games/brawlstars/cards`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createBrawlStarsCardDto,
    },
    options
  );
};

/**
 * @summary create Brawl Stars card
 */
export const gameControllerCreateEternalReturnsCard = (
  createEternalReturnsCardDto: CreateEternalReturnsCardDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<BrawlStarsCard | EternalReturnsCard>(
    {
      url: `/games/eternalreturn/cards`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createEternalReturnsCardDto,
    },
    options
  );
};

/**
 * @summary create King of Fighters card
 */
export const gameControllerCreateKingOfFightersCard = (
  createKingOfFightersCardDto: CreateKingOfFightersCardDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<KingOfFightersCard>(
    {
      url: `/games/kingoffighters/cards`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createKingOfFightersCardDto,
    },
    options
  );
};

/**
 * @summary create eFootball card
 */
export const gameControllerCreateEFootballCard = (
  createEFootballCardDto: CreateEFootballCardDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<EFootballCard>(
    {
      url: `/games/efootball/cards`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createEFootballCardDto,
    },
    options
  );
};

/**
 * @summary create Pokemon Unite card
 */
export const gameControllerCreatePokemonUniteCard = (
  createPokemonUniteCardDto: CreatePokemonUniteCardDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<PokemonUniteCard>(
    {
      url: `/games/pokemonunite/cards`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createPokemonUniteCardDto,
    },
    options
  );
};

/**
 * @summary create LOL card
 */
export const gameControllerCreateLolCard = (
  createLolCardDto: CreateLolCardDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<LolCard>(
    {
      url: `/games/lol/cards`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createLolCardDto,
    },
    options
  );
};

/**
 * @summary create FC Online card
 */
export const gameControllerCreateFCOnlineCard = (
  createFCOnlineCardDto: CreateFCOnlineCardDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<FCOnlineCard>(
    {
      url: `/games/fconline/cards`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createFCOnlineCardDto,
    },
    options
  );
};

/**
 * @summary create VAL card
 */
export const gameControllerCreateValCard = (
  createValCardDto: CreateValCardDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<ValCard>(
    {
      url: `/games/val/cards`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createValCardDto,
    },
    options
  );
};

/**
 * @summary create OW2 card
 */
export const gameControllerCreateOWCard = (
  createOWCardDto: CreateOWCardDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<OWCard>(
    {
      url: `/games/overwatch/cards`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createOWCardDto,
    },
    options
  );
};

/**
 * @summary create PUBG Mobile card
 */
export const gameControllerCreatePubgMobileCard = (
  createPubgMobileCardDto: CreatePubgMobileCardDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<PubgMobileCard>(
    {
      url: `/games/pubgmobile/cards`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createPubgMobileCardDto,
    },
    options
  );
};

/**
 * @summary create Street Fighter card
 */
export const gameControllerCreateStreetFighterCard = (
  createStreetFighterCardDto: CreateStreetFighterCardDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<StreetFighterCard>(
    {
      url: `/games/streetfighter/cards`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createStreetFighterCardDto,
    },
    options
  );
};

/**
 * @summary create KartRider card
 */
export const gameControllerCreateKartRiderCard = (
  createKartCardDto: CreateKartCardDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<KartRiderCard>(
    {
      url: `/games/kartrider/cards`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createKartCardDto,
    },
    options
  );
};

/**
 * @summary get OW2 card info
 */
export const gameControllerFindOWCard = (
  gameCardId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<OWCard>(
    { url: `/games/overwatch/cards/${gameCardId}`, method: "GET" },
    options
  );
};

/**
 * @summary get BrawlStars card info
 */
export const gameControllerFindBrawlStarsCard = (
  gameCardId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<BrawlStarsCard>(
    { url: `/games/brawlstars/cards/${gameCardId}`, method: "GET" },
    options
  );
};

/**
 * @summary get PUBG Mobile card info
 */
export const gameControllerFindPubgMobileCard = (
  gameCardId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<PubgMobileCard>(
    { url: `/games/pubgmobile/cards/${gameCardId}`, method: "GET" },
    options
  );
};

/**
 * @summary get Street Fighter card info
 */
export const gameControllerFindStreetFighterCard = (
  gameCardId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<StreetFighterCard>(
    { url: `/games/streetfighter/cards/${gameCardId}`, method: "GET" },
    options
  );
};

/**
 * @summary get KartRider card info
 */
export const gameControllerFindKartRiderCard = (
  gameCardId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<KartRiderCard>(
    { url: `/games/kartrider/cards/${gameCardId}`, method: "GET" },
    options
  );
};

/**
 * @summary get Eternal Returns card info
 */
export const gameControllerFindEternalReturnsCard = (
  gameCardId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<EternalReturnsCard>(
    { url: `/games/eternalreturn/cards/${gameCardId}`, method: "GET" },
    options
  );
};

/**
 * @summary get VAL card info
 */
export const gameControllerFindValCard = (
  gameCardId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<ValCard>(
    { url: `/games/val/cards/${gameCardId}`, method: "GET" },
    options
  );
};

/**
 * @summary get LoL card info
 */
export const gameControllerFindLolCard = (
  gameCardId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<LolCard>(
    { url: `/games/lol/cards/${gameCardId}`, method: "GET" },
    options
  );
};

/**
 * @summary get King of Fighters card info
 */
export const gameControllerFindKingOfFightersCard = (
  gameCardId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<KingOfFightersCard>(
    { url: `/games/kingoffighters/cards/${gameCardId}`, method: "GET" },
    options
  );
};

/**
 * @summary get eFootball card info
 */
export const gameControllerFindEFootballCard = (
  gameCardId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<EFootballCard>(
    { url: `/games/efootball/cards/${gameCardId}`, method: "GET" },
    options
  );
};

/**
 * @summary get Pokemon Unite card info
 */
export const gameControllerFindPokemonUniteCard = (
  gameCardId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<PokemonUniteCard>(
    { url: `/games/pokemonunite/cards/${gameCardId}`, method: "GET" },
    options
  );
};

/**
 * @summary get FC Online card info
 */
export const gameControllerFindFCOnlineCard = (
  gameCardId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<FCOnlineCard>(
    { url: `/games/fconline/cards/${gameCardId}`, method: "GET" },
    options
  );
};

/**
 * @summary Game card refresh
 */
export const gameControllerRefreshCard = (
  gameCardId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<
    GameControllerRefreshCard200 | GameControllerRefreshCard201
  >({ url: `/games/refresh/${gameCardId}`, method: "POST" }, options);
};

/**
 * @summary update nickname
 */
export const gameControllerUpdateNickname = (
  gameCardId: string,
  updateNicknameDto: UpdateNicknameDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<
    GameControllerUpdateNickname200 | GameControllerUpdateNickname201
  >(
    {
      url: `/games/updateNickname/${gameCardId}`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: updateNicknameDto,
    },
    options
  );
};

/**
 * @summary remove game card
 */
export const gameControllerRemoveGameCard = (
  gameCardId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<LolCard>(
    { url: `/games/cards/${gameCardId}`, method: "DELETE" },
    options
  );
};

export const gameControllerUploadFile = (
  gameCardId: string,
  gameControllerUploadFileBody: GameControllerUploadFileBody,
  options?: SecondParameter<typeof customInstance>
) => {
  const formData = new FormData();
  if (gameControllerUploadFileBody.file !== undefined) {
    formData.append("file", gameControllerUploadFileBody.file);
  }

  return customInstance<GameControllerUploadFile201>(
    {
      url: `/games/screenshots/${gameCardId}`,
      method: "POST",
      headers: { "Content-Type": "multipart/form-data" },
      data: formData,
    },
    options
  );
};

export const gameControllerDownloadFileByUserIdAndTag = (
  gameCardId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/games/screenshots/${gameCardId}`, method: "GET" },
    options
  );
};

export const gameControllerUpdateRankAndTier = (
  gameCardId: string,
  updateRankAndTierDto: UpdateRankAndTierDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<GameControllerUpdateRankAndTier200>(
    {
      url: `/games/rankandtier/${gameCardId}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateRankAndTierDto,
    },
    options
  );
};

/**
 * @summary get all competitions with game types
 */
export const competitionsControllerFindAll = (
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Competition[]>(
    { url: `/competitions`, method: "GET" },
    options
  );
};

/**
 * @summary create a new competition
 */
export const competitionsControllerCreate = (
  createCompetitionDto: CreateCompetitionDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Competition>(
    {
      url: `/competitions`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createCompetitionDto,
    },
    options
  );
};

/**
 * @summary get all competitions that the user is a host of
 */
export const competitionsControllerFindHostingCompetitions = (
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<CompetitionsControllerFindHostingCompetitions200>(
    { url: `/competitions/my`, method: "GET" },
    options
  );
};

/**
 * @summary get competition groups
 */
export const competitionsControllerFindAllGroup = (
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<CompetitionsControllerFindAllGroup200Item[]>(
    { url: `/competitions/groups`, method: "GET" },
    options
  );
};

/**
 * @summary Get child competitions by parent ID
 */
export const competitionsControllerFindByParentId = (
  parentId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<ChildCompetitionDto[]>(
    { url: `/competitions/groups/${parentId}`, method: "GET" },
    options
  );
};

/**
 * @summary get competition details with game types
 */
export const competitionsControllerFindOne = (
  competitionId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<CompetitionDto>(
    { url: `/competitions/${competitionId}`, method: "GET" },
    options
  );
};

/**
 * @summary modify competition
 */
export const competitionsControllerModify = (
  competitionId: string,
  modifyCompetitionDto: ModifyCompetitionDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Competition>(
    {
      url: `/competitions/${competitionId}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: modifyCompetitionDto,
    },
    options
  );
};

/**
 * @summary delete a competition
 */
export const competitionsControllerDelete = (
  competitionId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Competition>(
    { url: `/competitions/${competitionId}`, method: "DELETE" },
    options
  );
};

/**
 * @summary ÎåÄÌöåÏùò Í≤åÏûÑ Î™®Îìú Î™©Î°ù Ï°∞Ìöå
 */
export const competitionsControllerFindGameModes = (
  competitionId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<GameTypeDto[]>(
    { url: `/competitions/${competitionId}/game-modes`, method: "GET" },
    options
  );
};

/**
 * @summary modify game type
 */
export const competitionsControllerModifyGameTypeDetail = (
  gameTypeId: string,
  updateGameTypeDto: UpdateGameTypeDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<CompetitionsControllerModifyGameTypeDetail200>(
    {
      url: `/competitions/game-types/${gameTypeId}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateGameTypeDto,
    },
    options
  );
};

export const stageControllerCreateStage = (
  createStageDto: CreateStageDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<StageControllerCreateStage200 | void>(
    {
      url: `/stages`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createStageDto,
    },
    options
  );
};

export const stageControllerGetStages = (
  params?: StageControllerGetStagesParams,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<StageControllerGetStages200>(
    { url: `/stages`, method: "GET", params },
    options
  );
};

export const stageControllerGetStage = (
  id: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<StageControllerGetStage200>(
    { url: `/stages/${id}`, method: "GET" },
    options
  );
};

export const stageControllerUpdateStage = (
  id: number,
  updateStageDto: UpdateStageDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<StageControllerUpdateStage200>(
    {
      url: `/stages/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateStageDto,
    },
    options
  );
};

export const stageControllerDeleteStage = (
  id: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/stages/${id}`, method: "DELETE" },
    options
  );
};

/**
 * @summary get my team
 */
export const batchNotiControllerSendBatchNoti = (
  sendBatchNotiDto: SendBatchNotiDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Result>(
    {
      url: `/batchNoti`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: sendBatchNotiDto,
    },
    options
  );
};

/**
 * @summary get my bank accounts
 */
export const bankAccountsControllerFindMyBankAccounts = (
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<BankAccount[]>(
    { url: `/bankaccounts/me`, method: "GET" },
    options
  );
};

/**
 * @summary create bank account
 */
export const bankAccountsControllerStartAuth = (
  startAuthDto: StartAuthDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<BankAccount>(
    {
      url: `/bankaccounts/startAuth`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: startAuthDto,
    },
    options
  );
};

/**
 * @summary verify bank account
 */
export const bankAccountsControllerVerify = (
  verifyAuthDto: VerifyAuthDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<BankAccount>(
    {
      url: `/bankaccounts/verify`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: verifyAuthDto,
    },
    options
  );
};

/**
 * @summary check my bank account name
 */
export const bankAccountsControllerCheckAccountName = (
  checkAccountDto: CheckAccountDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<BankAccount | void>(
    {
      url: `/bankaccounts/validateAccount`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: checkAccountDto,
    },
    options
  );
};

/**
 * @summary Get my check-in information
 */
export const checkinControllerFindMyCheckin = (
  params: CheckinControllerFindMyCheckinParams,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Checkin>(
    { url: `/checkin/me`, method: "GET", params },
    options
  );
};

/**
 * @summary Check-in with QR code scan
 */
export const checkinControllerScanQrAndCheckIn = (
  scanQrDto: ScanQrDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Checkin>(
    {
      url: `/checkin`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: scanQrDto,
    },
    options
  );
};

/**
 * @summary Create or get QR code by date and game type
 */
export const qrControllerGetOrCreateQrCode = (
  createQrDto: CreateQrDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Qr>(
    {
      url: `/qr`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createQrDto,
    },
    options
  );
};

/**
 * @summary Get QR codes (filter by game type, date, and/or competition ID)
 */
export const qrControllerGetQrCodeByGameAndDate = (
  params?: QrControllerGetQrCodeByGameAndDateParams,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Qr[]>({ url: `/qr`, method: "GET", params }, options);
};

export const rsoControllerCallback = (
  params: RsoControllerCallbackParams,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<RsoControllerCallback200>(
    { url: `/rso/callback`, method: "GET", params },
    options
  );
};

/**
 * @summary get my checkin info
 */
export const proCheckinControllerFindMyCheckin = (
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/pro/checkins/me`, method: "GET" },
    options
  );
};

/**
 * @summary get checkin result by code
 */
export const proCheckinControllerFindByCode = (
  code: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/pro/checkins/results/${code}`, method: "GET" },
    options
  );
};

/**
 * @summary create code for QR Code
 */
export const proCheckinControllerGenerateCode = (
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<DynamicQrDto>(
    { url: `/pro/checkins`, method: "POST" },
    options
  );
};

/**
 * @summary get checkin result by code
 */
export const proCheckinControllerPeakUserInfoByCode = (
  code: string,
  params: ProCheckinControllerPeakUserInfoByCodeParams,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/pro/checkins/peak/${code}`, method: "GET", params },
    options
  );
};

/**
 * @summary authenticate code for QR Code
 */
export const proCheckinControllerAuthenticateCode = (
  authenticateCheckinDto: AuthenticateCheckinDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void | ProCheckin>(
    {
      url: `/pro/checkins/approve`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: authenticateCheckinDto,
    },
    options
  );
};

/**
 * @summary deny checkin with code
 */
export const proCheckinControllerDenyCheckin = (
  denyCheckinDto: DenyCheckinDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void | ProCheckin>(
    {
      url: `/pro/checkins/deny`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: denyCheckinDto,
    },
    options
  );
};

/**
 * @summary get my card profile info
 */
export const proProfileControllerGetMyProfile = (
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/pro/profiles/me`, method: "GET" },
    options
  );
};

/**
 * @summary get all matches
 */
export const proMatchControllerFindAll = (
  competitionId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/pro/competitions/${competitionId}/matches`, method: "GET" },
    options
  );
};

/**
 * @summary get a match
 */
export const proMatchControllerFindOne = (
  competitionId: string,
  matchId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    {
      url: `/pro/competitions/${competitionId}/matches/${matchId}`,
      method: "GET",
    },
    options
  );
};

/**
 * @summary get match sets
 */
export const proMatchControllerGetMatchSets = (
  competitionId: string,
  matchId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    {
      url: `/pro/competitions/${competitionId}/matches/${matchId}/sets`,
      method: "GET",
    },
    options
  );
};

/**
 * @summary Îß§Ïπò ÏÑ∏Ìä∏ Í¥ÄÎ¶¨ (ÏÉùÏÑ±, ÏàòÏ†ï, ÏÇ≠Ï†ú)
 */
export const proMatchControllerManageMatchSets = (
  competitionId: string,
  matchId: string,
  manageMatchSetsDto: ManageMatchSetsDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    {
      url: `/pro/competitions/${competitionId}/matches/${matchId}/sets`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: manageMatchSetsDto,
    },
    options
  );
};

/**
 * @summary Submit match with teams and note (main referee only)
 */
export const proMatchControllerSubmitMatch = (
  competitionId: string,
  matchId: string,
  submitMatchDto: SubmitMatchDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    {
      url: `/pro/competitions/${competitionId}/matches/${matchId}/submit`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: submitMatchDto,
    },
    options
  );
};

/**
 * @summary get all competitions
 */
export const proCompetitionControllerFindAll = (
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<ProCompetition[]>(
    { url: `/pro/competitions`, method: "GET" },
    options
  );
};

/**
 * @summary get player's photo by type
 */
export const proPhotoControllerGetPlayerPhoto = (
  userId: string,
  params: ProPhotoControllerGetPlayerPhotoParams,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/pro/photo/players/${userId}`, method: "GET", params },
    options
  );
};

/**
 * @summary get user's photo by type
 */
export const proPhotoControllerGetMyPhoto = (
  type: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/pro/photo/${type}`, method: "GET" },
    options
  );
};

/**
 * @summary get player's history
 */
export const proHistoryControllerGetHistories = (
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<ProHistoryDto>(
    { url: `/pro/history`, method: "GET" },
    options
  );
};

/**
 * @summary get player's history by proPlayerId
 */
export const proHistoryControllerGetHistoriesByProPlayerId = (
  proPlayerId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<ProHistoryDto>(
    { url: `/pro/history/${proPlayerId}`, method: "GET" },
    options
  );
};

/**
 * @summary Get all games in a series
 */
export const proMatchGameControllerGetGames = (
  matchId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/pro/matches/${matchId}/games`, method: "GET" },
    options
  );
};

/**
 * @summary Delete a game result
 */
export const proMatchGameControllerDeleteGame = (
  matchId: string,
  gameSet: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/pro/matches/${matchId}/games/${gameSet}`, method: "DELETE" },
    options
  );
};

/**
 * @summary get match sets
 */
export const proMatchSetsControllerGetMatchSets = (
  matchId: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/pro/matches/${matchId}/sets`, method: "GET" },
    options
  );
};

/**
 * @summary Manage match sets (create, update, delete)
 */
export const proMatchSetsControllerManageMatchSets = (
  matchId: string,
  manageMatchSetsDto: ManageMatchSetsDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    {
      url: `/pro/matches/${matchId}/sets`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: manageMatchSetsDto,
    },
    options
  );
};

/**
 * @summary Get specific match set
 */
export const proMatchSetsControllerGetMatchSet = (
  matchId: string,
  setNumber: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/pro/matches/${matchId}/sets/${setNumber}`, method: "GET" },
    options
  );
};

/**
 * @summary Update set screenshot information
 */
export const proMatchSetsControllerUpdateSetScreenshot = (
  matchId: string,
  setNumber: number,
  updateMatchSetScreenshotDto: UpdateMatchSetScreenshotDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    {
      url: `/pro/matches/${matchId}/sets/${setNumber}/screenshot`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateMatchSetScreenshotDto,
    },
    options
  );
};

/**
 * @summary Delete set screenshot information
 */
export const proMatchSetsControllerDeleteSetScreenshot = (
  matchId: string,
  setNumber: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    {
      url: `/pro/matches/${matchId}/sets/${setNumber}/screenshot`,
      method: "DELETE",
    },
    options
  );
};

/**
 * @summary Assign a specific referee to a match by admin
 */
export const proMatchRefereeControllerAssignReferee = (
  assignRefereeDto: AssignRefereeDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<ProMatchReferee>(
    {
      url: `/pro/match-referees/assign-referee`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: assignRefereeDto,
    },
    options
  );
};

/**
 * @summary Replace a referee (using matchId and refereeId)
 */
export const proMatchRefereeControllerReplaceRefereeByIds = (
  replaceRefereeDto: ReplaceRefereeDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<ProMatchReferee>(
    {
      url: `/pro/match-referees/replace-referee`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: replaceRefereeDto,
    },
    options
  );
};

/**
 * @summary Submit match processing (using matchId and refereeId)
 */
export const proMatchRefereeControllerSubmitMatchByIds = (
  submitMatchDto: SubmitMatchDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<ProMatchReferee>(
    {
      url: `/pro/match-referees/submit`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: submitMatchDto,
    },
    options
  );
};

/**
 * @summary Submit referee match notes (using JWT token for referee identification)
 */
export const proMatchRefereeControllerSubmitMatchNoteByIds = (
  submitMatchNoteDto: SubmitMatchNoteDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<ProMatchReferee>(
    {
      url: `/pro/match-referees/note`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: submitMatchNoteDto,
    },
    options
  );
};

/**
 * @summary Get referee match assignments - supports optional matchId
 */
export const proMatchRefereeControllerGetMyAssignments = (
  params: ProMatchRefereeControllerGetMyAssignmentsParams,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<ProMatchReferee[]>(
    { url: `/pro/match-referees/my-assignments`, method: "GET", params },
    options
  );
};

/**
 * @summary Remove referee from match
 */
export const proMatchRefereeControllerRemoveReferee = (
  id: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/pro/match-referees/remove-referee/${id}`, method: "DELETE" },
    options
  );
};

export const versionControllerCheckVersion = (
  params: VersionControllerCheckVersionParams,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/version/check`, method: "GET", params },
    options
  );
};

export const versionControllerUpdateVersionInfo = (
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<AppVersion>(
    { url: `/version`, method: "PUT" },
    options
  );
};

/**
 * ÎåÄÏßÑÌëú ÏÉùÏÑ± Î∞è Í∑∏Î£π ÏÉùÏÑ±
 */
export const bracketControllerCreateBracket = (
  createBracketDto: CreateBracketDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<BracketControllerCreateBracket200 | void>(
    {
      url: `/brackets`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createBracketDto,
    },
    options
  );
};

/**
 * ÎåÄÏßÑÌëú Ï†ÑÏ≤¥ Íµ¨Ï°∞ Ï¥àÍ∏∞Ìôî (Ï†ÑÏ≤¥ Íµ¨Ï°∞ ‚àã Ìè¨Îß∑ ÏÑ§Ï†ï, ÎùºÏö¥Îìú, Îß§Ïπò Îì±)
 */
export const bracketControllerInitializeBracketStructure = (
  bracketId: number,
  initializeBracketStructureDto: InitializeBracketStructureDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    {
      url: `/brackets/${bracketId}/structure`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: initializeBracketStructureDto,
    },
    options
  );
};

/**
 * ÎåÄÏßÑÌëú ÏÇ≠Ï†ú
 */
export const bracketControllerDeleteBracket = (
  bracketId: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/brackets/${bracketId}`, method: "DELETE" },
    options
  );
};

/**
 * ÎåÄÏßÑÌëú Í∑∏Î£πÏùò Ï†ÑÏ≤¥ Íµ¨Ï°∞ Ï°∞Ìöå
 */
export const bracketGroupControllerGetBracketGroupOverview = (
  bracketGroupId: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<BracketGroupControllerGetBracketGroupOverview200>(
    { url: `/bracket-groups/${bracketGroupId}/overview`, method: "GET" },
    options
  );
};

/**
 * ÎåÄÏßÑÌëú Í∑∏Î£πÏóê Î°úÏä§ÌÑ∞ Ï∂îÍ∞Ä
 */
export const bracketGroupControllerAddParticipants = (
  bracketGroupId: number,
  addParticipantsDto: AddParticipantsDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    {
      url: `/bracket-groups/${bracketGroupId}/participants`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: addParticipantsDto,
    },
    options
  );
};

/**
 * Îß§ÏπòÏùò ÏÑ∏Ìä∏ Í≤ΩÍ∏∞ Í≤∞Í≥ºÎì§ Ï°∞Ìöå
 */
export const matchControllerGetSetResults = (
  matchId: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<MatchControllerGetSetResults200>(
    { url: `/matches/${matchId}/set-results`, method: "GET" },
    options
  );
};

/**
 * Îß§ÏπòÏùò ÏÑ∏Ìä∏ Í≤ΩÍ∏∞ Í≤∞Í≥ºÎì§ Ï†ÄÏû•
 */
export const matchControllerSaveSetResults = (
  matchId: number,
  saveSetResultsDto: SaveSetResultsDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    {
      url: `/matches/${matchId}/set-results`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: saveSetResultsDto,
    },
    options
  );
};

/**
 * Îß§ÏπòÏùò ÏÑ∏Ìä∏Î≥Ñ Ï∞∏Ïó¨ÏûêÎì§Ïùò ÏÉÅÏÑ∏ Í≤∞Í≥º(stat) Ï°∞Ìöå
 */
export const matchControllerGetSetParticipantStats = (
  matchId: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<MatchControllerGetSetParticipantStats200>(
    { url: `/matches/${matchId}/set-participant-stats`, method: "GET" },
    options
  );
};

/**
 * Îß§ÏπòÏùò ÏÑ∏Ìä∏Î≥Ñ Ï∞∏Ïó¨ÏûêÎì§Ïùò ÏÉÅÏÑ∏ Í≤∞Í≥º Ï†ÄÏû•
 */
export const matchControllerSaveSetParticipantStats = (
  matchId: number,
  saveSetParticipantStatsDto: SaveSetParticipantStatsDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    {
      url: `/matches/${matchId}/set-participant-stats`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: saveSetParticipantStatsDto,
    },
    options
  );
};

/**
 * Îß§ÏπòÏùò ÏÑ∏Ìä∏ Í≤ΩÍ∏∞ Í≤∞Í≥ºÏóê Í¥ÄÌïú Ïä§ÌÅ¨Î¶∞ÏÉ∑ ÌååÏùº ÏóÖÎ°úÎìú
 */
export const matchControllerUploadSetResultScreenshot = (
  matchId: number,
  setResultId: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<MatchControllerUploadSetResultScreenshot200 | void>(
    {
      url: `/matches/${matchId}/set-results/${setResultId}/screenshots`,
      method: "POST",
    },
    options
  );
};

/**
 * Create a new roster
 */
export const rosterControllerCreateRoster = (
  createRosterDto: CreateRosterDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<RosterControllerCreateRoster200 | void>(
    {
      url: `/roster`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createRosterDto,
    },
    options
  );
};

/**
 * Find all rosters by query
 */
export const rosterControllerFindAllByQuery = (
  params: RosterControllerFindAllByQueryParams,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<RosterControllerFindAllByQuery200AllOf>(
    { url: `/roster`, method: "GET", params },
    options
  );
};

/**
 * Create a new roster
 */
export const rosterControllerCreateBulkRoster = (
  createBulkRosterDto: CreateBulkRosterDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    {
      url: `/roster/bulk`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createBulkRosterDto,
    },
    options
  );
};

/**
 * Find one roster by id
 */
export const rosterControllerFindOne = (
  id: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<RosterControllerFindOne200>(
    { url: `/roster/${id}`, method: "GET" },
    options
  );
};

/**
 * Remove a roster by id
 */
export const rosterControllerSoftRemove = (
  id: number,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/roster/${id}`, method: "DELETE" },
    options
  );
};

/**
 * @summary Î™®Îì† Ïã¨Ìåê Ï°∞Ìöå
 */
export const refereeControllerFindAll = (
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<Referee[]>({ url: `/referee`, method: "GET" }, options);
};

export type AppControllerGetHelloResult = NonNullable<
  Awaited<ReturnType<typeof appControllerGetHello>>
>;
export type AppControllerTestRoleResult = NonNullable<
  Awaited<ReturnType<typeof appControllerTestRole>>
>;
export type TeamsControllerFindMyTeamResult = NonNullable<
  Awaited<ReturnType<typeof teamsControllerFindMyTeam>>
>;
export type TeamsControllerFindOneResult = NonNullable<
  Awaited<ReturnType<typeof teamsControllerFindOne>>
>;
export type TeamsControllerFindAllResult = NonNullable<
  Awaited<ReturnType<typeof teamsControllerFindAll>>
>;
export type TeamsControllerCreateResult = NonNullable<
  Awaited<ReturnType<typeof teamsControllerCreate>>
>;
export type TeamsControllerFindPlayersResult = NonNullable<
  Awaited<ReturnType<typeof teamsControllerFindPlayers>>
>;
export type TeamsControllerAddPlayerResult = NonNullable<
  Awaited<ReturnType<typeof teamsControllerAddPlayer>>
>;
export type TeamsControllerCheckTeamNameExistResult = NonNullable<
  Awaited<ReturnType<typeof teamsControllerCheckTeamNameExist>>
>;
export type TeamsControllerConfirmResult = NonNullable<
  Awaited<ReturnType<typeof teamsControllerConfirm>>
>;
export type TeamsControllerUpdatePositionResult = NonNullable<
  Awaited<ReturnType<typeof teamsControllerUpdatePosition>>
>;
export type TeamsControllerRemovePlayerResult = NonNullable<
  Awaited<ReturnType<typeof teamsControllerRemovePlayer>>
>;
export type TeamsControllerRemoveTeamResult = NonNullable<
  Awaited<ReturnType<typeof teamsControllerRemoveTeam>>
>;
export type PlayersControllerUpdateStatusResult = NonNullable<
  Awaited<ReturnType<typeof playersControllerUpdateStatus>>
>;
export type PlayersControllerGetMyRegistrationInfoResult = NonNullable<
  Awaited<ReturnType<typeof playersControllerGetMyRegistrationInfo>>
>;
export type PlayersControllerChangeCardStatusResult = NonNullable<
  Awaited<ReturnType<typeof playersControllerChangeCardStatus>>
>;
export type PlayersControllerCompleteSoloApplicationResult = NonNullable<
  Awaited<ReturnType<typeof playersControllerCompleteSoloApplication>>
>;
export type PlayersControllerAddPlayerResult = NonNullable<
  Awaited<ReturnType<typeof playersControllerAddPlayer>>
>;
export type UserControllerFindMeResult = NonNullable<
  Awaited<ReturnType<typeof userControllerFindMe>>
>;
export type UserControllerFindOneResult = NonNullable<
  Awaited<ReturnType<typeof userControllerFindOne>>
>;
export type UserControllerUpdateUserInfoResult = NonNullable<
  Awaited<ReturnType<typeof userControllerUpdateUserInfo>>
>;
export type UserControllerRemoveUserResult = NonNullable<
  Awaited<ReturnType<typeof userControllerRemoveUser>>
>;
export type UserControllerGetDemoUserResult = NonNullable<
  Awaited<ReturnType<typeof userControllerGetDemoUser>>
>;
export type UserControllerAddUserWithNameResult = NonNullable<
  Awaited<ReturnType<typeof userControllerAddUserWithName>>
>;
export type UserControllerSignInWithPassResult = NonNullable<
  Awaited<ReturnType<typeof userControllerSignInWithPass>>
>;
export type UserControllerRefreshRoleResult = NonNullable<
  Awaited<ReturnType<typeof userControllerRefreshRole>>
>;
export type UserControllerSignInWithClerkResult = NonNullable<
  Awaited<ReturnType<typeof userControllerSignInWithClerk>>
>;
export type PassControllerPassResult = NonNullable<
  Awaited<ReturnType<typeof passControllerPass>>
>;
export type PushControllerSendPushResult = NonNullable<
  Awaited<ReturnType<typeof pushControllerSendPush>>
>;
export type FileUploadControllerUploadFileResult = NonNullable<
  Awaited<ReturnType<typeof fileUploadControllerUploadFile>>
>;
export type FileUploadControllerGetMyFilesResult = NonNullable<
  Awaited<ReturnType<typeof fileUploadControllerGetMyFiles>>
>;
export type FileUploadControllerDownloadFileResult = NonNullable<
  Awaited<ReturnType<typeof fileUploadControllerDownloadFile>>
>;
export type FileUploadControllerDownloadFileByUserIdAndTagResult = NonNullable<
  Awaited<ReturnType<typeof fileUploadControllerDownloadFileByUserIdAndTag>>
>;
export type FileUploadControllerUpdateStatusResult = NonNullable<
  Awaited<ReturnType<typeof fileUploadControllerUpdateStatus>>
>;
export type LogoControllerUploadLogoResult = NonNullable<
  Awaited<ReturnType<typeof logoControllerUploadLogo>>
>;
export type LogoControllerGetLogoResult = NonNullable<
  Awaited<ReturnType<typeof logoControllerGetLogo>>
>;
export type AgreementsControllerFindParentKeyResult = NonNullable<
  Awaited<ReturnType<typeof agreementsControllerFindParentKey>>
>;
export type AgreementsControllerUpdateParentDataByKeyResult = NonNullable<
  Awaited<ReturnType<typeof agreementsControllerUpdateParentDataByKey>>
>;
export type AgreementsControllerFindOneResult = NonNullable<
  Awaited<ReturnType<typeof agreementsControllerFindOne>>
>;
export type AgreementsControllerUpdateAgreementResult = NonNullable<
  Awaited<ReturnType<typeof agreementsControllerUpdateAgreement>>
>;
export type AgreementsControllerCreateResult = NonNullable<
  Awaited<ReturnType<typeof agreementsControllerCreate>>
>;
export type GameControllerFindMyGameCardsResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerFindMyGameCards>>
>;
export type GameControllerFindLOLUserResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerFindLOLUser>>
>;
export type GameControllerFindFCOnlineUserResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerFindFCOnlineUser>>
>;
export type GameControllerFindBrawlStarsUserResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerFindBrawlStarsUser>>
>;
export type GameControllerGetUserInfoResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerGetUserInfo>>
>;
export type GameControllerFindAllGameMetasResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerFindAllGameMetas>>
>;
export type GameControllerFindGameMetaByGameIdResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerFindGameMetaByGameId>>
>;
export type GameControllerCreateBrawlStarsCardResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerCreateBrawlStarsCard>>
>;
export type GameControllerCreateEternalReturnsCardResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerCreateEternalReturnsCard>>
>;
export type GameControllerCreateKingOfFightersCardResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerCreateKingOfFightersCard>>
>;
export type GameControllerCreateEFootballCardResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerCreateEFootballCard>>
>;
export type GameControllerCreatePokemonUniteCardResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerCreatePokemonUniteCard>>
>;
export type GameControllerCreateLolCardResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerCreateLolCard>>
>;
export type GameControllerCreateFCOnlineCardResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerCreateFCOnlineCard>>
>;
export type GameControllerCreateValCardResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerCreateValCard>>
>;
export type GameControllerCreateOWCardResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerCreateOWCard>>
>;
export type GameControllerCreatePubgMobileCardResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerCreatePubgMobileCard>>
>;
export type GameControllerCreateStreetFighterCardResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerCreateStreetFighterCard>>
>;
export type GameControllerCreateKartRiderCardResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerCreateKartRiderCard>>
>;
export type GameControllerFindOWCardResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerFindOWCard>>
>;
export type GameControllerFindBrawlStarsCardResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerFindBrawlStarsCard>>
>;
export type GameControllerFindPubgMobileCardResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerFindPubgMobileCard>>
>;
export type GameControllerFindStreetFighterCardResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerFindStreetFighterCard>>
>;
export type GameControllerFindKartRiderCardResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerFindKartRiderCard>>
>;
export type GameControllerFindEternalReturnsCardResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerFindEternalReturnsCard>>
>;
export type GameControllerFindValCardResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerFindValCard>>
>;
export type GameControllerFindLolCardResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerFindLolCard>>
>;
export type GameControllerFindKingOfFightersCardResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerFindKingOfFightersCard>>
>;
export type GameControllerFindEFootballCardResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerFindEFootballCard>>
>;
export type GameControllerFindPokemonUniteCardResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerFindPokemonUniteCard>>
>;
export type GameControllerFindFCOnlineCardResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerFindFCOnlineCard>>
>;
export type GameControllerRefreshCardResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerRefreshCard>>
>;
export type GameControllerUpdateNicknameResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerUpdateNickname>>
>;
export type GameControllerRemoveGameCardResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerRemoveGameCard>>
>;
export type GameControllerUploadFileResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerUploadFile>>
>;
export type GameControllerDownloadFileByUserIdAndTagResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerDownloadFileByUserIdAndTag>>
>;
export type GameControllerUpdateRankAndTierResult = NonNullable<
  Awaited<ReturnType<typeof gameControllerUpdateRankAndTier>>
>;
export type CompetitionsControllerFindAllResult = NonNullable<
  Awaited<ReturnType<typeof competitionsControllerFindAll>>
>;
export type CompetitionsControllerCreateResult = NonNullable<
  Awaited<ReturnType<typeof competitionsControllerCreate>>
>;
export type CompetitionsControllerFindHostingCompetitionsResult = NonNullable<
  Awaited<ReturnType<typeof competitionsControllerFindHostingCompetitions>>
>;
export type CompetitionsControllerFindAllGroupResult = NonNullable<
  Awaited<ReturnType<typeof competitionsControllerFindAllGroup>>
>;
export type CompetitionsControllerFindByParentIdResult = NonNullable<
  Awaited<ReturnType<typeof competitionsControllerFindByParentId>>
>;
export type CompetitionsControllerFindOneResult = NonNullable<
  Awaited<ReturnType<typeof competitionsControllerFindOne>>
>;
export type CompetitionsControllerModifyResult = NonNullable<
  Awaited<ReturnType<typeof competitionsControllerModify>>
>;
export type CompetitionsControllerDeleteResult = NonNullable<
  Awaited<ReturnType<typeof competitionsControllerDelete>>
>;
export type CompetitionsControllerFindGameModesResult = NonNullable<
  Awaited<ReturnType<typeof competitionsControllerFindGameModes>>
>;
export type CompetitionsControllerModifyGameTypeDetailResult = NonNullable<
  Awaited<ReturnType<typeof competitionsControllerModifyGameTypeDetail>>
>;
export type StageControllerCreateStageResult = NonNullable<
  Awaited<ReturnType<typeof stageControllerCreateStage>>
>;
export type StageControllerGetStagesResult = NonNullable<
  Awaited<ReturnType<typeof stageControllerGetStages>>
>;
export type StageControllerGetStageResult = NonNullable<
  Awaited<ReturnType<typeof stageControllerGetStage>>
>;
export type StageControllerUpdateStageResult = NonNullable<
  Awaited<ReturnType<typeof stageControllerUpdateStage>>
>;
export type StageControllerDeleteStageResult = NonNullable<
  Awaited<ReturnType<typeof stageControllerDeleteStage>>
>;
export type BatchNotiControllerSendBatchNotiResult = NonNullable<
  Awaited<ReturnType<typeof batchNotiControllerSendBatchNoti>>
>;
export type BankAccountsControllerFindMyBankAccountsResult = NonNullable<
  Awaited<ReturnType<typeof bankAccountsControllerFindMyBankAccounts>>
>;
export type BankAccountsControllerStartAuthResult = NonNullable<
  Awaited<ReturnType<typeof bankAccountsControllerStartAuth>>
>;
export type BankAccountsControllerVerifyResult = NonNullable<
  Awaited<ReturnType<typeof bankAccountsControllerVerify>>
>;
export type BankAccountsControllerCheckAccountNameResult = NonNullable<
  Awaited<ReturnType<typeof bankAccountsControllerCheckAccountName>>
>;
export type CheckinControllerFindMyCheckinResult = NonNullable<
  Awaited<ReturnType<typeof checkinControllerFindMyCheckin>>
>;
export type CheckinControllerScanQrAndCheckInResult = NonNullable<
  Awaited<ReturnType<typeof checkinControllerScanQrAndCheckIn>>
>;
export type QrControllerGetOrCreateQrCodeResult = NonNullable<
  Awaited<ReturnType<typeof qrControllerGetOrCreateQrCode>>
>;
export type QrControllerGetQrCodeByGameAndDateResult = NonNullable<
  Awaited<ReturnType<typeof qrControllerGetQrCodeByGameAndDate>>
>;
export type RsoControllerCallbackResult = NonNullable<
  Awaited<ReturnType<typeof rsoControllerCallback>>
>;
export type ProCheckinControllerFindMyCheckinResult = NonNullable<
  Awaited<ReturnType<typeof proCheckinControllerFindMyCheckin>>
>;
export type ProCheckinControllerFindByCodeResult = NonNullable<
  Awaited<ReturnType<typeof proCheckinControllerFindByCode>>
>;
export type ProCheckinControllerGenerateCodeResult = NonNullable<
  Awaited<ReturnType<typeof proCheckinControllerGenerateCode>>
>;
export type ProCheckinControllerPeakUserInfoByCodeResult = NonNullable<
  Awaited<ReturnType<typeof proCheckinControllerPeakUserInfoByCode>>
>;
export type ProCheckinControllerAuthenticateCodeResult = NonNullable<
  Awaited<ReturnType<typeof proCheckinControllerAuthenticateCode>>
>;
export type ProCheckinControllerDenyCheckinResult = NonNullable<
  Awaited<ReturnType<typeof proCheckinControllerDenyCheckin>>
>;
export type ProProfileControllerGetMyProfileResult = NonNullable<
  Awaited<ReturnType<typeof proProfileControllerGetMyProfile>>
>;
export type ProMatchControllerFindAllResult = NonNullable<
  Awaited<ReturnType<typeof proMatchControllerFindAll>>
>;
export type ProMatchControllerFindOneResult = NonNullable<
  Awaited<ReturnType<typeof proMatchControllerFindOne>>
>;
export type ProMatchControllerGetMatchSetsResult = NonNullable<
  Awaited<ReturnType<typeof proMatchControllerGetMatchSets>>
>;
export type ProMatchControllerManageMatchSetsResult = NonNullable<
  Awaited<ReturnType<typeof proMatchControllerManageMatchSets>>
>;
export type ProMatchControllerSubmitMatchResult = NonNullable<
  Awaited<ReturnType<typeof proMatchControllerSubmitMatch>>
>;
export type ProCompetitionControllerFindAllResult = NonNullable<
  Awaited<ReturnType<typeof proCompetitionControllerFindAll>>
>;
export type ProPhotoControllerGetPlayerPhotoResult = NonNullable<
  Awaited<ReturnType<typeof proPhotoControllerGetPlayerPhoto>>
>;
export type ProPhotoControllerGetMyPhotoResult = NonNullable<
  Awaited<ReturnType<typeof proPhotoControllerGetMyPhoto>>
>;
export type ProHistoryControllerGetHistoriesResult = NonNullable<
  Awaited<ReturnType<typeof proHistoryControllerGetHistories>>
>;
export type ProHistoryControllerGetHistoriesByProPlayerIdResult = NonNullable<
  Awaited<ReturnType<typeof proHistoryControllerGetHistoriesByProPlayerId>>
>;
export type ProMatchGameControllerGetGamesResult = NonNullable<
  Awaited<ReturnType<typeof proMatchGameControllerGetGames>>
>;
export type ProMatchGameControllerDeleteGameResult = NonNullable<
  Awaited<ReturnType<typeof proMatchGameControllerDeleteGame>>
>;
export type ProMatchSetsControllerGetMatchSetsResult = NonNullable<
  Awaited<ReturnType<typeof proMatchSetsControllerGetMatchSets>>
>;
export type ProMatchSetsControllerManageMatchSetsResult = NonNullable<
  Awaited<ReturnType<typeof proMatchSetsControllerManageMatchSets>>
>;
export type ProMatchSetsControllerGetMatchSetResult = NonNullable<
  Awaited<ReturnType<typeof proMatchSetsControllerGetMatchSet>>
>;
export type ProMatchSetsControllerUpdateSetScreenshotResult = NonNullable<
  Awaited<ReturnType<typeof proMatchSetsControllerUpdateSetScreenshot>>
>;
export type ProMatchSetsControllerDeleteSetScreenshotResult = NonNullable<
  Awaited<ReturnType<typeof proMatchSetsControllerDeleteSetScreenshot>>
>;
export type ProMatchRefereeControllerAssignRefereeResult = NonNullable<
  Awaited<ReturnType<typeof proMatchRefereeControllerAssignReferee>>
>;
export type ProMatchRefereeControllerReplaceRefereeByIdsResult = NonNullable<
  Awaited<ReturnType<typeof proMatchRefereeControllerReplaceRefereeByIds>>
>;
export type ProMatchRefereeControllerSubmitMatchByIdsResult = NonNullable<
  Awaited<ReturnType<typeof proMatchRefereeControllerSubmitMatchByIds>>
>;
export type ProMatchRefereeControllerSubmitMatchNoteByIdsResult = NonNullable<
  Awaited<ReturnType<typeof proMatchRefereeControllerSubmitMatchNoteByIds>>
>;
export type ProMatchRefereeControllerGetMyAssignmentsResult = NonNullable<
  Awaited<ReturnType<typeof proMatchRefereeControllerGetMyAssignments>>
>;
export type ProMatchRefereeControllerRemoveRefereeResult = NonNullable<
  Awaited<ReturnType<typeof proMatchRefereeControllerRemoveReferee>>
>;
export type VersionControllerCheckVersionResult = NonNullable<
  Awaited<ReturnType<typeof versionControllerCheckVersion>>
>;
export type VersionControllerUpdateVersionInfoResult = NonNullable<
  Awaited<ReturnType<typeof versionControllerUpdateVersionInfo>>
>;
export type BracketControllerCreateBracketResult = NonNullable<
  Awaited<ReturnType<typeof bracketControllerCreateBracket>>
>;
export type BracketControllerInitializeBracketStructureResult = NonNullable<
  Awaited<ReturnType<typeof bracketControllerInitializeBracketStructure>>
>;
export type BracketControllerDeleteBracketResult = NonNullable<
  Awaited<ReturnType<typeof bracketControllerDeleteBracket>>
>;
export type BracketGroupControllerGetBracketGroupOverviewResult = NonNullable<
  Awaited<ReturnType<typeof bracketGroupControllerGetBracketGroupOverview>>
>;
export type BracketGroupControllerAddParticipantsResult = NonNullable<
  Awaited<ReturnType<typeof bracketGroupControllerAddParticipants>>
>;
export type MatchControllerGetSetResultsResult = NonNullable<
  Awaited<ReturnType<typeof matchControllerGetSetResults>>
>;
export type MatchControllerSaveSetResultsResult = NonNullable<
  Awaited<ReturnType<typeof matchControllerSaveSetResults>>
>;
export type MatchControllerGetSetParticipantStatsResult = NonNullable<
  Awaited<ReturnType<typeof matchControllerGetSetParticipantStats>>
>;
export type MatchControllerSaveSetParticipantStatsResult = NonNullable<
  Awaited<ReturnType<typeof matchControllerSaveSetParticipantStats>>
>;
export type MatchControllerUploadSetResultScreenshotResult = NonNullable<
  Awaited<ReturnType<typeof matchControllerUploadSetResultScreenshot>>
>;
export type RosterControllerCreateRosterResult = NonNullable<
  Awaited<ReturnType<typeof rosterControllerCreateRoster>>
>;
export type RosterControllerFindAllByQueryResult = NonNullable<
  Awaited<ReturnType<typeof rosterControllerFindAllByQuery>>
>;
export type RosterControllerCreateBulkRosterResult = NonNullable<
  Awaited<ReturnType<typeof rosterControllerCreateBulkRoster>>
>;
export type RosterControllerFindOneResult = NonNullable<
  Awaited<ReturnType<typeof rosterControllerFindOne>>
>;
export type RosterControllerSoftRemoveResult = NonNullable<
  Awaited<ReturnType<typeof rosterControllerSoftRemove>>
>;
export type RefereeControllerFindAllResult = NonNullable<
  Awaited<ReturnType<typeof refereeControllerFindAll>>
>;
